#include atoms_red
#include ./redhc_made_soa_vbs_aq.spc
#include ./redhc_made_soa_vbs_aq.eqn




#INLINE F90_RATES


REAL(KIND=dp) FUNCTION usro3j2oh(temp,c_m,c_h2o)
   
   REAL(KIND=dp), INTENT(IN) :: temp, c_m, c_h2o
   REAL(KIND=dp) :: kh2o,kn2,ko2

   kh2o = 2.2e-10_dp
   kn2  = 0.79_dp * ARR2(1.8e-11_dp,-110.0_dp, temp) 
   ko2  = 0.21_dp * ARR2(3.2e-11_dp, -70.0_dp, temp)

   usro3j2oh = (kh2o*c_h2o) / (kh2o*c_h2o + kn2*c_m + ko2*c_m)

END FUNCTION usro3j2oh




REAL(KIND=dp) FUNCTION TROEMS(k0_300K,n,kinf_300K,m,TEMP,C_M)

    INTRINSIC LOG10

    REAL(KIND=dp), INTENT(IN) :: TEMP      ! TEMPerature [K]
    REAL(KIND=dp), INTENT(IN) :: C_M      ! air concentration [molecules/cm3]
    REAL(KIND=dp), INTENT(IN) :: k0_300K   ! low pressure limit at 300 K
    REAL(KIND=dp), INTENT(IN) :: n         ! exponent for low pressure limit
    REAL(KIND=dp), INTENT(IN) :: kinf_300K ! high pressure limit at 300 K
    REAL(KIND=dp), INTENT(IN) :: m         ! exponent for high pressure limit
    REAL(KIND=dp)             :: zt_help, k0_T, kinf_T, k_ratio

    zt_help = TEMP/300._dp
    k0_T    = k0_300K   * zt_help**(n) * C_M ! k_0   at current T
    kinf_T  = kinf_300K * zt_help**(m)        ! k_inf at current T
    k_ratio = k0_T/kinf_T
    TROEMS   = k0_T/(1._dp+k_ratio)*0.6_dp**(1._dp/(1._dp+LOG10(k_ratio)**2))

END FUNCTION TROEMS


REAL(KIND=dp) FUNCTION usr5( temp, c_m )

    REAL(KIND=dp), INTENT(IN) :: temp
    REAL(KIND=dp), INTENT(IN) :: c_m

    REAL(KIND=dp) :: k0, k2

   k0 = c_m * 6.5e-34_dp * exp( 1335._dp/temp )
   k2 = exp( 2199._dp/temp )
   k0 = k0 /(1.0_dp + k0/(2.7e-11_dp*k2))
   k2 = exp( 460._dp/temp )

   usr5 = k0 + 2.4e-14_dp * k2

END FUNCTION usr5

REAL(KIND=dp) FUNCTION k45( TEMP, C_M )
    REAL(KIND=dp), INTENT(IN) :: temp, c_m
    REAL(KIND=dp) :: k0, k2, k3 

   k0=2.4E-14_dp * EXP(460._dp/TEMP)
   k2=2.7E-17_dp * EXP(2199._dp/TEMP)
   k3=6.5E-34_dp * EXP(1335._dp/TEMP) * c_m

   k45=k0+k3/(1+k3/k2)

END FUNCTION k45

REAL(KIND=dp) FUNCTION usr8( temp, c_m )

    REAL(KIND=dp), INTENT(IN) :: temp
    REAL(KIND=dp), INTENT(IN) :: c_m

    REAL(KIND=dp), parameter :: boltz = 1.38044e-16_dp

    usr8 = 1.5e-13_dp * (1._dp + 6.e-7_dp*boltz*c_m*temp)

END FUNCTION usr8

REAL(KIND=dp) FUNCTION usr9( temp, c_m, c_h2o )

    REAL(KIND=dp), INTENT(IN) :: temp
    REAL(KIND=dp), INTENT(IN) :: c_m
    REAL(KIND=dp), INTENT(IN) :: c_h2o

    REAL(KIND=dp) :: ko, kinf, fc

    if( c_h2o > 0._dp ) then
       ko   = 2.3e-13_dp * exp( 600._dp/temp )
       kinf = 1.7e-33_dp * c_m * exp( 1000._dp/temp )
       fc   = 1._dp + c_h2o * 1.4e-21_dp * exp( 2200._dp/temp )
       usr9 = (ko + kinf) * fc
    else
       usr9 = 0._dp
    end if

END FUNCTION usr9

REAL(KIND=dp) FUNCTION usr16( rh, temp )

    REAL(KIND=dp), INTENT(IN) :: rh                       ! relative humidity
    REAL(KIND=dp), INTENT(IN) :: temp                     ! temperature (K)


    usr16 = 0._dp

END FUNCTION usr16

REAL(KIND=dp) FUNCTION usr17( rh, temp )

    REAL(KIND=dp), INTENT(IN) :: rh                       ! relative humidity
    REAL(KIND=dp), INTENT(IN) :: temp                     ! temperature (K)

    usr17 = 0._dp

END FUNCTION usr17

REAL(KIND=dp) FUNCTION usr17a( rh, temp )

    REAL(KIND=dp), INTENT(IN) :: rh                       ! relative humidity
    REAL(KIND=dp), INTENT(IN) :: temp                     ! temperature (K)

    usr17a = 0._dp

END FUNCTION usr17a

REAL(KIND=dp) FUNCTION usr23( temp, c_m )

    REAL(KIND=dp), INTENT(IN) :: temp
    REAL(KIND=dp), INTENT(IN) :: c_m

    REAL(KIND=dp) :: fc, k0
    REAL(KIND=dp) :: wrk

    fc    = 3.e-11_dp * (300._dp/temp) ** 3.3_dp
    wrk   = fc * c_m
    k0    = wrk / (1._dp + wrk/1.5e-12_dp)
    usr23 = k0 * .6_dp ** (1._dp/(1._dp + (log10( wrk/1.5e-12_dp ))**2._dp))

END FUNCTION usr23

REAL(KIND=dp) FUNCTION usr24( temp, c_m )

    REAL(KIND=dp), INTENT(IN) :: temp
    REAL(KIND=dp), INTENT(IN) :: c_m

    REAL(KIND=dp) :: ko, wrk

    wrk   = .21_dp*c_m
    ko    = 1._dp + 5.5e-31_dp*exp( 7460._dp/temp )*wrk
    usr24 = 1.7e-42_dp*exp( 7810._dp/temp )*wrk/ko

END FUNCTION usr24

REAL(KIND=dp) FUNCTION usr_c2o3_no2( c_m )

    REAL(KIND=dp), INTENT(IN) :: c_m

    REAL(KIND=dp) :: ko, kinf, wrk

    ko    = 2.6e-28_dp * c_m
    kinf  = 1.2e-11_dp
    wrk   = ko/kinf
    usr_c2o3_no2 = (ko/(1._dp+wrk))*.6_dp**(1._dp/(1._dp+(log10(wrk))**2))

END FUNCTION usr_c2o3_no2

REAL(KIND=dp) FUNCTION usr_xo2n_ho2( temp )

    REAL(KIND=dp), INTENT(IN) :: temp

    REAL(KIND=dp) :: rxn_xo2_no, rxn_xo2n_no, rxn_xo2_ho2

    rxn_xo2_no  = ARR2( 4.2e-12_dp, -180._dp, temp )
    rxn_xo2n_no = 6.8e-13_dp
    rxn_xo2_ho2 = ARR2( 3.5e-13_dp, -1000._dp, temp )
    usr_xo2n_ho2 = rxn_xo2n_no * rxn_xo2_ho2 / (rxn_xo2_no + 1.e-36_dp)

END FUNCTION usr_xo2n_ho2

REAL(KIND=dp) FUNCTION usr26( rh, temp )

    REAL(KIND=dp), INTENT(IN) :: rh                       ! relative humidity
    REAL(KIND=dp), INTENT(IN) :: temp                     ! temperature (K)

    usr26 = 0._dp

END FUNCTION usr26

REAL(KIND=dp) FUNCTION usr_N2O5_aer( aero_srf_area, aero_diam, temp )
! heterogeneous uptake on aerosols: N2O5 -> 2 HNO3

    REAL(KIND=dp), INTENT(IN) :: aero_srf_area(:)         ! aerosol surface area
    REAL(KIND=dp), INTENT(IN) :: aero_diam(:)             ! aerosol diameter
    REAL(KIND=dp), INTENT(IN) :: temp                     ! temperature (K)

    INTEGER :: n
    REAL(KIND=dp), parameter :: dg = .1_dp
    REAL(KIND=dp), parameter :: gamma_n2o5 = .1_dp
    REAL(KIND=dp) :: c_n2o5, term

    n = size( aero_srf_area )
    c_n2o5 = 1.40e3_dp * sqrt( temp )
    term = 4._dp/(c_n2o5*gamma_n2o5)

    usr_N2O5_aer = &
     sum( aero_srf_area(1:n)/(.5_dp*aero_diam(1:n)/dg + term) )

END FUNCTION usr_N2O5_aer


REAL(KIND=dp) FUNCTION usr_ONIT_aer( aero_srf_area, aero_diam, temp )
! heterogeneous uptake on aerosols: ONITR -> HNO3

    REAL(KIND=dp), INTENT(IN) :: aero_srf_area(:)         ! aerosol surface area
    REAL(KIND=dp), INTENT(IN) :: aero_diam(:)             ! aerosol diameter
    REAL(KIND=dp), INTENT(IN) :: temp                     ! temperature (K)

    INTEGER :: n
    REAL(KIND=dp), parameter :: dg = .1_dp
    REAL(KIND=dp), parameter :: gamma_onitr = .005_dp
    REAL(KIND=dp) :: c_onitr, term

    n = size( aero_srf_area )
    c_onitr = 1.20e3_dp * sqrt( temp )
    term = 4._dp/(c_onitr*gamma_onitr)

    usr_ONIT_aer = &
     sum( aero_srf_area(1:n)/(.5_dp*aero_diam(1:n)/dg + term) )

END FUNCTION usr_ONIT_aer

REAL(KIND=dp) FUNCTION usr_NO3_aer( aero_srf_area, aero_diam, temp )
! heterogeneous uptake on aerosols: NO3 -> HNO3

    REAL(KIND=dp), INTENT(IN) :: aero_srf_area(:)         ! aerosol surface area
    REAL(KIND=dp), INTENT(IN) :: aero_diam(:)             ! aerosol diameter
    REAL(KIND=dp), INTENT(IN) :: temp                     ! temperature (K)

    INTEGER :: n
    REAL(KIND=dp), parameter :: dg = .1_dp
    REAL(KIND=dp), parameter :: gamma_no3 = 1.e-3_dp
    REAL(KIND=dp) :: c_no3, term

    n = size( aero_srf_area )
    c_no3 = 1.85e3_dp * sqrt( temp )
    term = 4._dp/(c_no3*gamma_no3)

    usr_NO3_aer = &
     sum( aero_srf_area(1:n)/(.5_dp*aero_diam(1:n)/dg + term) )

END FUNCTION usr_NO3_aer

REAL(KIND=dp) FUNCTION usr_NO2_aer( aero_srf_area, aero_diam, temp )
! heterogeneous uptake on aerosols: NO2 -> 0.5 OH + 0.5 NO + 0.5 HNO3

    REAL(KIND=dp), INTENT(IN) :: aero_srf_area(:)         ! aerosol surface area
    REAL(KIND=dp), INTENT(IN) :: aero_diam(:)             ! aerosol diameter
    REAL(KIND=dp), INTENT(IN) :: temp                     ! temperature (K)

    INTEGER :: n
    REAL(KIND=dp), parameter :: dg = .1_dp
    REAL(KIND=dp), parameter :: gamma_no2 = 1.e-4_dp
    REAL(KIND=dp) :: c_no2, term

    n = size( aero_srf_area )
    c_no2 = 2.15e3_dp * sqrt( temp )
    term = 4._dp/(c_no2*gamma_no2)

    usr_NO2_aer = &
     sum( aero_srf_area(1:n)/(.5_dp*aero_diam(1:n)/dg + term) )

END FUNCTION usr_NO2_aer

REAL(KIND=dp) FUNCTION usr_HO2_aer( aero_srf_area, aero_diam, temp )
! heterogeneous uptake on aerosols: HO2 -> 0.5 H2O2

    REAL(KIND=dp), INTENT(IN) :: aero_srf_area(:)         ! aerosol surface area
    REAL(KIND=dp), INTENT(IN) :: aero_diam(:)             ! aerosol diameter
    REAL(KIND=dp), INTENT(IN) :: temp                     ! temperature (K)

    INTEGER :: n
    REAL(KIND=dp), parameter :: dg = .1_dp
    REAL(KIND=dp), parameter :: gamma_ho2 = .2_dp
    REAL(KIND=dp) :: c_ho2, term

    n = size( aero_srf_area )
    c_ho2 = 2.53e3_dp * sqrt( temp )
    term = 4._dp/(c_ho2*gamma_ho2)

    usr_HO2_aer = &
     sum( aero_srf_area(1:n)/(.5_dp*aero_diam(1:n)/dg + term) )

END FUNCTION usr_HO2_aer

SUBROUTINE aero_surfarea( aero_srf_area, aero_diam, rh, temp, &
                              aer_so4, aer_oc2, aer_bc2 )

    IMPLICIT NONE

    !-----------------------------------------------------------------
    ! Dummy arguments
    !-----------------------------------------------------------------
    REAL(kind=dp), intent(in)  :: rh
    REAL(kind=dp), intent(in)  :: temp
    REAL(kind=dp), intent(in)  :: aer_so4, aer_oc2, aer_bc2
    REAL(kind=dp), intent(out) :: aero_srf_area(3)
    REAL(kind=dp), intent(out) :: aero_diam(3)

    !-----------------------------------------------------------------
    ! Local variables
    !-----------------------------------------------------------------
    ! mean radius, diameter, and std dev of sulfate particles (cm) (Chin)
    real(dp), parameter :: rm_sulf  = 6.95e-6_dp
    real(dp), parameter :: dm_sulf  = 2._dp*rm_sulf
    real(dp), parameter :: sd_sulf  = 2.03_dp

    ! mean radius, diameter, and std dev of organic carbon particles (cm) (Chin)
    real(dp), parameter :: rm_orgc  = 2.12e-6_dp
    real(dp), parameter :: dm_orgc  = 2._dp*rm_orgc
    real(dp), parameter :: sd_orgc  = 2.20_dp

    ! mean radius, diameter, and std dev of soot/BC particles (cm) (Chin)
    real(dp), parameter :: rm_bc    = 1.18e-6_dp
    real(dp), parameter :: dm_bc    = 2._dp*rm_bc
    real(dp), parameter :: sd_bc    = 2.00_dp

    real(dp), parameter :: pi       = 3.1415926535897932384626433_dp

    integer  :: irh, rh_l, rh_u
    real(dp) :: log_sd_sulf, log_sd_orgc, log_sd_bc
    real(dp) :: dm_sulf_wet, dm_orgc_wet, dm_bc_wet
    real(dp) :: rfac_sulf, rfac_oc, rfac_bc
    real(dp) :: n, n_exp, factor, s_exp
    !-----------------------------------------------------------------
    !   ... table for hygroscopic growth effect on radius (Chin et al)
    !           (no growth effect for mineral dust)
    !-----------------------------------------------------------------
    real(dp), dimension(7) :: table_rh, table_rfac_sulf
    real(dp), dimension(7) :: table_rfac_bc, table_rfac_oc

    data table_rh(1:7) &
        / 0.0_dp, 0.5_dp, 0.7_dp, 0.8_dp, 0.9_dp, 0.95_dp, 0.99_dp /
    data table_rfac_sulf(1:7) &
        / 1.0_dp, 1.4_dp, 1.5_dp, 1.6_dp, 1.8_dp, 1.9_dp,  2.2_dp /
    data table_rfac_oc(1:7) &
        / 1.0_dp, 1.2_dp, 1.4_dp, 1.5_dp, 1.6_dp, 1.8_dp,  2.2_dp /
    data table_rfac_bc(1:7) &
        / 1.0_dp, 1.0_dp, 1.0_dp, 1.2_dp, 1.4_dp, 1.5_dp,  1.9_dp /

    log_sd_sulf = log( sd_sulf )
    log_sd_orgc = log( sd_orgc )
    log_sd_bc   = log( sd_bc )

    !-----------------------------------------------------------------
    !   ... exponent for calculating number density
    !-----------------------------------------------------------------
    n_exp = exp( -4.5_dp*log(sd_sulf)*log(sd_sulf) )
    !-------------------------------------------------------------------------
    !       ... aerosol growth interpolated from M.Chins table
    !-------------------------------------------------------------------------
    if (rh >= table_rh(7)) then
      rfac_sulf = table_rfac_sulf(7)
      rfac_oc = table_rfac_oc(7)
      rfac_bc = table_rfac_bc(7)
    else
      do irh = 2,7
        if (rh <= table_rh(irh)) then
          exit
        end if
      end do
      rh_l = irh-1
      rh_u = irh

      factor = (rh - table_rh(rh_l))/(table_rh(rh_u) - table_rh(rh_l))

      rfac_sulf = table_rfac_sulf(rh_l) &
                + factor*(table_rfac_sulf(rh_u) - table_rfac_sulf(rh_l))
      rfac_oc = table_rfac_oc(rh_u) &
              + factor*(table_rfac_oc(rh_u) - table_rfac_oc(rh_l))
      rfac_bc = table_rfac_bc(rh_u) &
              + factor*(table_rfac_bc(rh_u) - table_rfac_bc(rh_l))
    end if

dm_sulf_wet = dm_sulf * rfac_sulf
    dm_orgc_wet = dm_orgc * rfac_oc
    dm_bc_wet = dm_bc * rfac_bc

    ! maximum size is 0.5 micron (Chin)
    dm_bc_wet   = min(dm_bc_wet  ,50.e-6_dp)
    dm_orgc_wet = min(dm_orgc_wet,50.e-6_dp)

    aero_diam(:) = (/ dm_sulf_wet, dm_orgc_wet, dm_bc_wet /)

    n = aer_so4 * (6._dp/pi)*(1._dp/(dm_sulf**3))*n_exp
    s_exp = exp( 2._dp*log_sd_sulf*log_sd_sulf )
    aero_srf_area(1) = n * pi * (dm_sulf_wet*dm_sulf_wet) * s_exp

    n = aer_oc2 * (6._dp/pi)*(1._dp/(dm_orgc**3))*n_exp
    s_exp = exp( 2._dp*log_sd_orgc*log_sd_orgc )
    aero_srf_area(2) = n * pi * (dm_orgc_wet*dm_orgc_wet) * s_exp

    n = aer_bc2 * (6._dp/pi)*(1._dp/(dm_bc**3))*n_exp
    s_exp = exp( 2._dp*log_sd_bc*log_sd_bc )
    aero_srf_area(3) = n * pi * (dm_bc_wet*dm_bc_wet) * s_exp

    END SUBROUTINE aero_surfarea

REAL(KIND=dp) FUNCTION usr_HO2_HO2( temp, c_m, c_h2o )
! for cesm-consistent reaction labels, equivalent to usr9
! HO2+HO2 -> H2O2+O2
! H2O included in fc calculation, not as reactant

    REAL(KIND=dp), INTENT(IN) :: temp
    REAL(KIND=dp), INTENT(IN) :: c_m
    REAL(KIND=dp), INTENT(IN) :: c_h2o

    REAL(KIND=dp) :: ko, kinf, fc

    if( c_h2o > 0._dp ) then
       ko   = 2.3e-13_dp * exp( 600._dp/temp )
       kinf = 1.7e-33_dp * c_m * exp( 1000._dp/temp )
       fc = 1._dp + 1.4e-21_dp *c_h2o* exp( 2200._dp/temp )
       usr_HO2_HO2 = (ko + kinf) * fc
    else
       usr_HO2_HO2 = 0._dp
    end if
END FUNCTION usr_HO2_HO2


#ENDINLINE 
