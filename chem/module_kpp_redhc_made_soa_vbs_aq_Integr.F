! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! 
! Numerical Integrator (Time-Stepping) File
! 
! Generated by KPP-2.1 symbolic chemistry Kinetics PreProcessor
!       (http://www.cs.vt.edu/~asandu/Software/KPP)
! KPP is distributed under GPL, the general public licence
!       (http://www.gnu.org/copyleft/gpl.html)
! (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa
! (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech
!     With important contributions from:
!        M. Damian, Villanova University, USA
!        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
! 
! File                 : redhc_made_soa_vbs_aq_Integrator.f90
! Time                 : Wed Jan 29 03:54:24 2025
! Working directory    : /scratch1/BMC/wrf-chem/minsusee/WRFV4.6/chem/KPP/mechanisms/redhc_made_soa_vbs_aq
! Equation file        : redhc_made_soa_vbs_aq.kpp
! Output root filename : redhc_made_soa_vbs_aq
! 
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! 
! INTEGRATE - Integrator routine
!   Arguments :
!      TIN       - Start Time for Integration
!      TOUT      - End Time for Integration
! 
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MODULE redhc_made_soa_vbs_aq_Integrator

 USE redhc_made_soa_vbs_aq_Parameters
 USE redhc_made_soa_vbs_aq_Precision
 USE redhc_made_soa_vbs_aq_JacobianSP

  IMPLICIT NONE
 


  INTEGER, PARAMETER :: ifun=1, ijac=2, istp=3, iacc=4, &
    irej=5, idec=6, isol=7, isng=8, itexit=1, ihexit=2
    

  ! description of the error numbers IERR
  CHARACTER(LEN=50), PARAMETER, DIMENSION(-8:1) :: IERR_NAMES = (/ &
    'Matrix is repeatedly singular                     ', & ! -8
    'Step size too small                               ', & ! -7
    'No of steps exceeds maximum bound                 ', & ! -6
    'Improper tolerance values                         ', & ! -5
    'FacMin/FacMax/FacRej must be positive             ', & ! -4
    'Hmin/Hmax/Hstart must be positive                 ', & ! -3
    'Selected Rosenbrock method not implemented        ', & ! -2
    'Improper value for maximal no of steps            ', & ! -1
    '                                                  ', & !  0 (not used)
    'Success                                           ' /) !  1

CONTAINS

SUBROUTINE  redhc_made_soa_vbs_aq_INTEGRATE( TIN, TOUT, &
  FIX, VAR,  RCONST, ATOL, RTOL, IRR_WRK,  &
  ICNTRL_U, RCNTRL_U, ISTATUS_U, RSTATUS_U, IERR_U  )

   USE redhc_made_soa_vbs_aq_Parameters
!!   USE redhc_made_soa_vbs_aq_Global
   IMPLICIT NONE
   REAL(kind=dp), INTENT(INOUT), DIMENSION(NFIX) :: FIX
   REAL(kind=dp), INTENT(INOUT), DIMENSION(NVAR) :: VAR
   REAL(kind=dp), INTENT(INOUT) :: IRR_WRK(NREACT)
   REAL(kind=dp), INTENT(IN), DIMENSION(NSPEC) :: ATOL, RTOL
   REAL(kind=dp), INTENT(IN), DIMENSION(NREACT) :: RCONST
   REAL(kind=dp), INTENT(IN) :: TIN  ! Start Time
   REAL(kind=dp), INTENT(IN) :: TOUT ! End Time
   ! Optional input parameters and statistics
   INTEGER,  INTENT(IN),  OPTIONAL :: ICNTRL_U(20)
   REAL(kind=dp), INTENT(IN),  OPTIONAL :: RCNTRL_U(20)
   INTEGER,  INTENT(OUT), OPTIONAL :: ISTATUS_U(20)
   REAL(kind=dp), INTENT(OUT), OPTIONAL :: RSTATUS_U(20)
   INTEGER,  INTENT(OUT), OPTIONAL :: IERR_U

   REAL(kind=dp)  :: STEPMIN


   INTEGER :: N_stp, N_acc, N_rej, N_sng
   SAVE N_stp, N_acc, N_rej, N_sng
   INTEGER :: i, IERR
   REAL(kind=dp) :: RCNTRL(20), RSTATUS(20)
   INTEGER :: ICNTRL(20), ISTATUS(20)


   ICNTRL(:)  = 0
   RCNTRL(:)  = 0.0_dp
   ISTATUS(:) = 0
   RSTATUS(:) = 0.0_dp

   ! If optional parameters are given, and if they are >0, 
   ! then they overwrite default settings. 
   IF (PRESENT(ICNTRL_U)) THEN
     WHERE(ICNTRL_U(:) > 0) ICNTRL(:) = ICNTRL_U(:)
   END IF
   IF (PRESENT(RCNTRL_U)) THEN
     WHERE(RCNTRL_U(:) > 0) RCNTRL(:) = RCNTRL_U(:)
   END IF

   CALL redhc_made_soa_vbs_aq_Rosenbrock(VAR, FIX, RCONST, TIN,TOUT,   &
         ATOL,RTOL,               &
         RCNTRL,ICNTRL,RSTATUS,ISTATUS,IRR_WRK,IERR)

   STEPMIN = RCNTRL(ihexit)
   ! if optional parameters are given for output they to return information
   IF (PRESENT(ISTATUS_U)) ISTATUS_U(:) = ISTATUS(:)
   IF (PRESENT(RSTATUS_U)) RSTATUS_U(:) = RSTATUS(:)
   IF (PRESENT(IERR_U))    IERR_U       = IERR

END SUBROUTINE  redhc_made_soa_vbs_aq_INTEGRATE

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUBROUTINE  redhc_made_soa_vbs_aq_Rosenbrock(Y, FIX, RCONST, Tstart,Tend, &
           AbsTol,RelTol,            &
           RCNTRL,ICNTRL,RSTATUS,ISTATUS,IRR_WRK,IERR)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!    Solves the system y'=F(t,y) using a Rosenbrock method defined by:
!
!     G = 1/(H*gamma(1)) - Jac(t0,Y0)
!     T_i = t0 + Alpha(i)*H
!     Y_i = Y0 + \sum_{j=1}^{i-1} A(i,j)*K_j
!     G * K_i = Fun( T_i, Y_i ) + \sum_{j=1}^S C(i,j)/H * K_j +
!         gamma(i)*dF/dT(t0, Y0)
!     Y1 = Y0 + \sum_{j=1}^S M(j)*K_j
!
!    For details on Rosenbrock methods and their implementation consult:
!      E. Hairer and G. Wanner
!      "Solving ODEs II. Stiff and differential-algebraic problems".
!      Springer series in computational mathematics, Springer-Verlag, 1996.
!    The codes contained in the book inspired this implementation.
!
!    (C)  Adrian Sandu, August 2004
!    Virginia Polytechnic Institute and State University
!    Contact: sandu@cs.vt.edu
!    This implementation is part of KPP - the Kinetic PreProcessor
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!~~~>   INPUT ARGUMENTS:
!
!-     Y(NVAR)    = vector of initial conditions (at T=Tstart)
!-    [Tstart,Tend]  = time range of integration
!     (if Tstart>Tend the integration is performed backwards in time)
!-    RelTol, AbsTol = user precribed accuracy
!- SUBROUTINE  Fun( T, Y, Ydot ) = ODE function,
!                       returns Ydot = Y' = F(T,Y)
!- SUBROUTINE  Jac( T, Y, Jcb ) = Jacobian of the ODE function,
!                       returns Jcb = dFun/dY
!-    ICNTRL(1:20)    = integer inputs parameters
!-    RCNTRL(1:20)    = real inputs parameters
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!~~~>     OUTPUT ARGUMENTS:
!
!-    Y(NVAR)    -> vector of final states (at T->Tend)
!-    ISTATUS(1:20)   -> integer output parameters
!-    RSTATUS(1:20)   -> real output parameters
!-    IERR            -> job status upon return
!                        success (positive value) or
!                        failure (negative value)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!~~~>     INPUT PARAMETERS:
!
!    Note: For input parameters equal to zero the default values of the
!       corresponding variables are used.
!
!    ICNTRL(1) = 1: F = F(y)   Independent of T (AUTONOMOUS)
!              = 0: F = F(t,y) Depends on T (NON-AUTONOMOUS)
!
!    ICNTRL(2) = 0: AbsTol, RelTol are NVAR-dimensional vectors
!              = 1: AbsTol, RelTol are scalars
!
!    ICNTRL(3)  -> selection of a particular Rosenbrock method
!        = 0 :  default method is Rodas3
!        = 1 :  method is  Ros2
!        = 2 :  method is  Ros3
!        = 3 :  method is  Ros4
!        = 4 :  method is  Rodas3
!        = 5:   method is  Rodas4
!
!    ICNTRL(4)  -> maximum number of integration steps
!        For ICNTRL(4)=0) the default value of 100000 is used
!
!    RCNTRL(1)  -> Hmin, lower bound for the integration step size
!          It is strongly recommended to keep Hmin = ZERO
!    RCNTRL(2)  -> Hmax, upper bound for the integration step size
!    RCNTRL(3)  -> Hstart, starting value for the integration step size
!
!    RCNTRL(4)  -> FacMin, lower bound on step decrease factor (default=0.2)
!    RCNTRL(5)  -> FacMax, upper bound on step increase factor (default=6)
!    RCNTRL(6)  -> FacRej, step decrease factor after multiple rejections
!            (default=0.1)
!    RCNTRL(7)  -> FacSafe, by which the new step is slightly smaller
!         than the predicted value  (default=0.9)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!~~~>     OUTPUT PARAMETERS:
!
!    Note: each call to Rosenbrock adds the current no. of fcn calls
!      to previous value of ISTATUS(1), and similar for the other params.
!      Set ISTATUS(1:20) = 0 before call to avoid this accumulation.
!
!    ISTATUS(1) = No. of function calls
!    ISTATUS(2) = No. of jacobian calls
!    ISTATUS(3) = No. of steps
!    ISTATUS(4) = No. of accepted steps
!    ISTATUS(5) = No. of rejected steps (except at the beginning)
!    ISTATUS(6) = No. of LU decompositions
!    ISTATUS(7) = No. of forward/backward substitutions
!    ISTATUS(8) = No. of singular matrix decompositions
!
!    RSTATUS(1)  -> Texit, the time corresponding to the
!                   computed Y upon return
!    RSTATUS(2)  -> Hexit, last accepted step before exit
!    For multiple restarts, use Hexit as Hstart in the following run
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  USE redhc_made_soa_vbs_aq_Parameters
!!  USE redhc_made_soa_vbs_aq_LinearAlgebra
  IMPLICIT NONE

!~~~>  Arguments
   REAL(kind=dp), INTENT(INOUT) :: Y(NVAR)
   REAL(kind=dp), INTENT(INOUT) :: IRR_WRK(NREACT)
   REAL(kind=dp), INTENT(IN), DIMENSION(NFIX) :: FIX
   REAL(kind=dp), INTENT(IN), DIMENSION(NREACT) :: RCONST
   REAL(kind=dp), INTENT(IN)   :: Tstart,Tend
   REAL(kind=dp), INTENT(IN)   :: AbsTol(NVAR),RelTol(NVAR)
   INTEGER, INTENT(IN)    :: ICNTRL(20)
   REAL(kind=dp), INTENT(IN)   :: RCNTRL(20)
   INTEGER, INTENT(INOUT) :: ISTATUS(20)
   REAL(kind=dp), INTENT(INOUT) :: RSTATUS(20)
   INTEGER, INTENT(OUT)   :: IERR
!~~~>  The method parameters
   INTEGER, PARAMETER :: Smax = 6
   INTEGER  :: Method, ros_S
   REAL(kind=dp), DIMENSION(Smax) :: ros_M, ros_E, ros_Alpha, ros_Gamma
   REAL(kind=dp), DIMENSION(Smax*(Smax-1)/2) :: ros_A, ros_C
   REAL(kind=dp) :: ros_ELO
   LOGICAL, DIMENSION(Smax) :: ros_NewF
   CHARACTER(LEN=12) :: ros_Name

!~~~>  Statistics on the work performed by the Rosenbrock method
  INTEGER :: Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng


!~~~>  Local variables
   REAL(kind=dp) :: Roundoff, FacMin, FacMax, FacRej, FacSafe
   REAL(kind=dp) :: Hmin, Hmax, Hstart, Hexit
   REAL(kind=dp) :: Texit
   INTEGER :: i, UplimTol, Max_no_steps
   LOGICAL :: Autonomous, VectorTol
!~~~>   Parameters
   REAL(kind=dp), PARAMETER :: ZERO = 0.0_dp, ONE  = 1.0_dp
   REAL(kind=dp), PARAMETER :: DeltaMin = 1.0E-5_dp

!~~~>  Initialize statistics
   Nfun = ISTATUS(ifun)
   Njac = ISTATUS(ijac)
   Nstp = ISTATUS(istp)
   Nacc = ISTATUS(iacc)
   Nrej = ISTATUS(irej)
   Ndec = ISTATUS(idec)
   Nsol = ISTATUS(isol)
   Nsng = ISTATUS(isng)

!~~~>  Autonomous or time dependent ODE. Default is time dependent.
   Autonomous = .NOT.(ICNTRL(1) == 0)





!~~~>  For Scalar tolerances (ICNTRL(2).NE.0)  the code uses AbsTol(1) and RelTol(1)
!   For Vector tolerances (ICNTRL(2) == 0) the code uses AbsTol(1:NVAR) and RelTol(1:NVAR)
   IF (ICNTRL(2) == 0) THEN
      VectorTol = .TRUE.
         UplimTol  = NVAR
   ELSE
      VectorTol = .FALSE.
         UplimTol  = 1
   END IF

!~~~>  The particular Rosenbrock method chosen
   IF (ICNTRL(3) == 0) THEN
      Method = 4
   ELSEIF ( (ICNTRL(3) >= 1).AND.(ICNTRL(3) <= 5) ) THEN
      Method = ICNTRL(3)
   ELSE
      PRINT * , 'User-selected Rosenbrock method: ICNTRL(3)=', Method
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-2,Tstart,ZERO,IERR)
      RETURN
   END IF

!~~~>   The maximum number of steps admitted
   IF (ICNTRL(4) == 0) THEN
      Max_no_steps = 100000
   ELSEIF (ICNTRL(4) > 0) THEN
      Max_no_steps=ICNTRL(4)
   ELSE
      PRINT * ,'User-selected max no. of steps: ICNTRL(4)=',ICNTRL(4)
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-1,Tstart,ZERO,IERR)
      RETURN
   END IF

!~~~>  Unit roundoff (1+Roundoff>1)
   Roundoff = redhc_made_soa_vbs_aq_WLAMCH('E')

!~~~>  Lower bound on the step size: (positive value)
   IF (RCNTRL(1) == ZERO) THEN
      Hmin = ZERO
   ELSEIF (RCNTRL(1) > ZERO) THEN
      Hmin = RCNTRL(1)
   ELSE
      PRINT * , 'User-selected Hmin: RCNTRL(1)=', RCNTRL(1)
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-3,Tstart,ZERO,IERR)
      RETURN
   END IF
!~~~>  Upper bound on the step size: (positive value)
   IF (RCNTRL(2) == ZERO) THEN
      Hmax = ABS(Tend-Tstart)
   ELSEIF (RCNTRL(2) > ZERO) THEN
      Hmax = MIN(ABS(RCNTRL(2)),ABS(Tend-Tstart))
   ELSE
      PRINT * , 'User-selected Hmax: RCNTRL(2)=', RCNTRL(2)
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-3,Tstart,ZERO,IERR)
      RETURN
   END IF
!~~~>  Starting step size: (positive value)
   IF (RCNTRL(3) == ZERO) THEN
      Hstart = MAX(Hmin,DeltaMin)
   ELSEIF (RCNTRL(3) > ZERO) THEN
      Hstart = MIN(ABS(RCNTRL(3)),ABS(Tend-Tstart))
   ELSE
      PRINT * , 'User-selected Hstart: RCNTRL(3)=', RCNTRL(3)
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-3,Tstart,ZERO,IERR)
      RETURN
   END IF
!~~~>  Step size can be changed s.t.  FacMin < Hnew/Hexit < FacMax
   IF (RCNTRL(4) == ZERO) THEN
      FacMin = 0.2_dp
   ELSEIF (RCNTRL(4) > ZERO) THEN
      FacMin = RCNTRL(4)
   ELSE
      PRINT * , 'User-selected FacMin: RCNTRL(4)=', RCNTRL(4)
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-4,Tstart,ZERO,IERR)
      RETURN
   END IF
   IF (RCNTRL(5) == ZERO) THEN
      FacMax = 6.0_dp
   ELSEIF (RCNTRL(5) > ZERO) THEN
      FacMax = RCNTRL(5)
   ELSE
      PRINT * , 'User-selected FacMax: RCNTRL(5)=', RCNTRL(5)
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-4,Tstart,ZERO,IERR)
      RETURN
   END IF
!~~~>   FacRej: Factor to decrease step after 2 succesive rejections
   IF (RCNTRL(6) == ZERO) THEN
      FacRej = 0.1_dp
   ELSEIF (RCNTRL(6) > ZERO) THEN
      FacRej = RCNTRL(6)
   ELSE
      PRINT * , 'User-selected FacRej: RCNTRL(6)=', RCNTRL(6)
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-4,Tstart,ZERO,IERR)
      RETURN
   END IF
!~~~>   FacSafe: Safety Factor in the computation of new step size
   IF (RCNTRL(7) == ZERO) THEN
      FacSafe = 0.9_dp
   ELSEIF (RCNTRL(7) > ZERO) THEN
      FacSafe = RCNTRL(7)
   ELSE
      PRINT * , 'User-selected FacSafe: RCNTRL(7)=', RCNTRL(7)
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-4,Tstart,ZERO,IERR)
      RETURN
   END IF
!~~~>  Check if tolerances are reasonable
    DO i=1,UplimTol
      IF ( (AbsTol(i) <= ZERO) .OR. (RelTol(i) <= 10.0_dp*Roundoff) &
         .OR. (RelTol(i) >= 1.0_dp) ) THEN
        PRINT * , ' AbsTol(',i,') = ',AbsTol(i)
        PRINT * , ' RelTol(',i,') = ',RelTol(i)
        CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-5,Tstart,ZERO,IERR)
        RETURN
      END IF
    END DO


!~~~>   Initialize the particular Rosenbrock method
   SELECT CASE (Method)
     CASE (1)
       CALL redhc_made_soa_vbs_aq_Ros2(ros_S, ros_A, ros_C, ros_M, ros_E,   &
          ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
     CASE (2)
       CALL redhc_made_soa_vbs_aq_Ros3(ros_S, ros_A, ros_C, ros_M, ros_E,   &
          ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
     CASE (3)
       CALL redhc_made_soa_vbs_aq_Ros4(ros_S, ros_A, ros_C, ros_M, ros_E,   &
          ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
     CASE (4)
       CALL redhc_made_soa_vbs_aq_Rodas3(ros_S, ros_A, ros_C, ros_M, ros_E, &
          ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
     CASE (5)
       CALL redhc_made_soa_vbs_aq_Rodas4(ros_S, ros_A, ros_C, ros_M, ros_E, &
          ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
     CASE DEFAULT
       PRINT * , 'Unknown Rosenbrock method: ICNTRL(4)=', Method
       CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-2,Tstart,ZERO,IERR)
       RETURN
   END SELECT

!~~~>  CALL Rosenbrock method
   CALL redhc_made_soa_vbs_aq_ros_Integrator(Y,Tstart,Tend,Texit,      &
        AbsTol, RelTol,                          &
!  Rosenbrock method coefficients
        ros_S, ros_M, ros_E, ros_A, ros_C,       &
        ros_Alpha, ros_Gamma, ros_ELO, ros_NewF, &
!  Integration parameters
        Autonomous, VectorTol, Max_no_steps,     &
        Roundoff, Hmin, Hmax, Hstart, Hexit,     &
        FacMin, FacMax, FacRej, FacSafe,         &
!  Error indicator
        IRR_WRK,IERR,                            &
!  Statistics on the work performed by the Rosenbrock method
         Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng,&
!~~~> 
         RCONST, FIX &
)


!~~~>  Collect run statistics
   ISTATUS(ifun) = Nfun
   ISTATUS(ijac) = Njac
   ISTATUS(istp) = Nstp
   ISTATUS(iacc) = Nacc
   ISTATUS(irej) = Nrej
   ISTATUS(idec) = Ndec
   ISTATUS(isol) = Nsol
   ISTATUS(isng) = Nsng
!~~~> Last T and H
   RSTATUS(itexit) = Texit
   RSTATUS(ihexit) = Hexit

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CONTAINS !  SUBROUTINES internal to Rosenbrock
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 SUBROUTINE  redhc_made_soa_vbs_aq_ros_ErrorMsg(Code,T,H,IERR)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!    Handles all error messages
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   USE redhc_made_soa_vbs_aq_Precision

   REAL(kind=dp), INTENT(IN) :: T, H
   INTEGER, INTENT(IN)  :: Code
   INTEGER, INTENT(OUT) :: IERR

   IERR = Code
   PRINT * , &
     'Forced exit from Rosenbrock due to the following error:'
   IF ((Code>=-8).AND.(Code<=-1)) THEN
     PRINT *, IERR_NAMES(Code)
   ELSE
     PRINT *, 'Unknown Error code: ', Code
   ENDIF

   PRINT *, "T=", T, "and H=", H

 END SUBROUTINE  redhc_made_soa_vbs_aq_ros_ErrorMsg

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 SUBROUTINE  redhc_made_soa_vbs_aq_ros_Integrator (Y, Tstart, Tend, T,     &
        AbsTol, RelTol,                          &
!~~~> Rosenbrock method coefficients
        ros_S, ros_M, ros_E, ros_A, ros_C,       &
        ros_Alpha, ros_Gamma, ros_ELO, ros_NewF, &
!~~~> Integration parameters
        Autonomous, VectorTol, Max_no_steps,     &
        Roundoff, Hmin, Hmax, Hstart, Hexit,     &
        FacMin, FacMax, FacRej, FacSafe,         &
!~~~> Error indicator
        IRR_WRK,IERR,                            &
!~~~>   Statistics on the work performed by the Rosenbrock method
        Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng, &
!~~~> 
        RCONST, FIX )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!   Template for the implementation of a generic Rosenbrock method
!      defined by ros_S (no of stages)
!      and its coefficients ros_{A,C,M,E,Alpha,Gamma}
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  IMPLICIT NONE

!~~~> Input: the initial condition at Tstart; Output: the solution at T
   REAL(kind=dp), INTENT(INOUT) :: Y(NVAR)
!~~~> Output: the reaction rates
   REAL(kind=dp), INTENT(INOUT) :: IRR_WRK(NREACT)
!~~~> Input: integration interval
   REAL(kind=dp), INTENT(IN) :: Tstart,Tend
!~~~> Output: time at which the solution is returned (T=Tend if success)
   REAL(kind=dp), INTENT(OUT) ::  T
!~~~> Input: tolerances
   REAL(kind=dp), INTENT(IN) ::  AbsTol(NVAR), RelTol(NVAR)
!~~~> Input: The Rosenbrock method parameters
   INTEGER, INTENT(IN) ::  ros_S
   REAL(kind=dp), INTENT(IN) :: ros_M(ros_S), ros_E(ros_S),  &
       ros_Alpha(ros_S), ros_A(ros_S*(ros_S-1)/2), &
       ros_Gamma(ros_S), ros_C(ros_S*(ros_S-1)/2), ros_ELO
   LOGICAL, INTENT(IN) :: ros_NewF(ros_S)
!~~~> Input: integration parameters
   LOGICAL, INTENT(IN) :: Autonomous, VectorTol
   REAL(kind=dp), INTENT(IN) :: Hstart, Hmin, Hmax
   INTEGER, INTENT(IN) :: Max_no_steps
   REAL(kind=dp), INTENT(IN) :: Roundoff, FacMin, FacMax, FacRej, FacSafe
!~~~> Output: last accepted step
   REAL(kind=dp), INTENT(OUT) :: Hexit
!~~~> Output: Error indicator
   INTEGER, INTENT(OUT) :: IERR
!~~~> Input
   REAL(kind=dp), INTENT(IN), DIMENSION(NFIX) :: FIX
!~~~> Input
   REAL(kind=dp), INTENT(IN), DIMENSION(NREACT) :: RCONST

!~~~>  Statistics on the work performed by the Rosenbrock method
  INTEGER, INTENT(INOUT)  :: Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng

! ~~~~ Local variables
   REAL(kind=dp) :: Ynew(NVAR), Fcn0(NVAR), Fcn(NVAR)
   REAL(kind=dp) :: K(NVAR*ros_S), dFdT(NVAR)
#ifdef FULL_ALGEBRA    
   REAL(kind=dp) :: Jac0(NVAR,NVAR), Ghimj(NVAR,NVAR)
#else
   REAL(kind=dp) :: Jac0(LU_NONZERO), Ghimj(LU_NONZERO)
#endif
   REAL(kind=dp) :: H, Hnew, HC, HG, Fac, Tau
   REAL(kind=dp) :: Err, Yerr(NVAR)
   INTEGER :: Pivot(NVAR), Direction, ioffset, j, istage
   LOGICAL :: RejectLastH, RejectMoreH, Singular
!~~~>  Local parameters
   REAL(kind=dp), PARAMETER :: ZERO = 0.0_dp, ONE  = 1.0_dp
   REAL(kind=dp), PARAMETER :: DeltaMin = 1.0E-5_dp
!~~~>  Locally called functions
!    REAL(kind=dp) WLAMCH
!    EXTERNAL WLAMCH
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


!~~~>  Initial preparations
   T = Tstart
   Hexit = 0.0_dp
   H = MIN(Hstart,Hmax)
   IF (ABS(H) <= 10.0_dp*Roundoff) H = DeltaMin

   IF (Tend  >=  Tstart) THEN
     Direction = +1
   ELSE
     Direction = -1
   END IF

   RejectLastH=.FALSE.
   RejectMoreH=.FALSE.

!~~~> Time loop begins below

TimeLoop: DO WHILE ( (Direction > 0).AND.((T-Tend)+Roundoff <= ZERO) &
       .OR. (Direction < 0).AND.((Tend-T)+Roundoff <= ZERO) )

   IF ( Nstp > Max_no_steps ) THEN  ! Too many steps
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-6,T,H,IERR)
      RETURN
   END IF
   IF ( ((T+0.1_dp*H) == T).OR.(H <= Roundoff) ) THEN  ! Step size too small
      CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-7,T,H,IERR)
      RETURN
   END IF

!~~~>  Limit H if necessary to avoid going beyond Tend
   Hexit = H
   H = MIN(H,ABS(Tend-T))

!~~~>   Compute the function at current time
   CALL redhc_made_soa_vbs_aq_FunTemplate(T,Y,Fcn0, RCONST, FIX, Nfun)
   IF( T == Tstart ) THEN
     CALL redhc_made_soa_vbs_aq_IRRFun( Y, FIX, RCONST, IRR_WRK )
   ENDIF

!~~~>  Compute the function derivative with respect to T
   IF (.NOT.Autonomous) THEN
      CALL redhc_made_soa_vbs_aq_ros_FunTimeDeriv ( T, Roundoff, Y, &
                Fcn0, dFdT, RCONST, FIX, Nfun )
   END IF

!~~~>   Compute the Jacobian at current time
   CALL redhc_made_soa_vbs_aq_JacTemplate(T,Y,Jac0, FIX, Njac, RCONST)

!~~~>  Repeat step calculation until current step accepted
UntilAccepted: DO

   CALL redhc_made_soa_vbs_aq_ros_PrepareMatrix(H,Direction,ros_Gamma(1), &
          Jac0,Ghimj,Pivot,Singular, Ndec,  Nsng )
   IF (Singular) THEN ! More than 5 consecutive failed decompositions
       CALL redhc_made_soa_vbs_aq_ros_ErrorMsg(-8,T,H,IERR)
       RETURN
   END IF

!~~~>   Compute the stages
Stage: DO istage = 1, ros_S

      ! Current istage offset. Current istage vector is K(ioffset+1:ioffset+NVAR)
       ioffset = NVAR*(istage-1)

      ! For the 1st istage the function has been computed previously
       IF ( istage == 1 ) THEN
         CALL redhc_made_soa_vbs_aq_WCOPY(NVAR,Fcn0,1,Fcn,1)
      ! istage>1 and a new function evaluation is needed at the current istage
       ELSEIF ( ros_NewF(istage) ) THEN
         CALL redhc_made_soa_vbs_aq_WCOPY(NVAR,Y,1,Ynew,1)
         DO j = 1, istage-1
           CALL redhc_made_soa_vbs_aq_WAXPY(NVAR,ros_A((istage-1)*(istage-2)/2+j), &
            K(NVAR*(j-1)+1),1,Ynew,1)
         END DO
         Tau = T + ros_Alpha(istage)*Direction*H
         CALL redhc_made_soa_vbs_aq_FunTemplate(Tau,Ynew,Fcn, RCONST, FIX, Nfun)
       END IF ! if istage == 1 elseif ros_NewF(istage)
       CALL redhc_made_soa_vbs_aq_WCOPY(NVAR,Fcn,1,K(ioffset+1),1)
       DO j = 1, istage-1
         HC = ros_C((istage-1)*(istage-2)/2+j)/(Direction*H)
         CALL redhc_made_soa_vbs_aq_WAXPY(NVAR,HC,K(NVAR*(j-1)+1),1,K(ioffset+1),1)
       END DO
       IF ((.NOT. Autonomous).AND.(ros_Gamma(istage).NE.ZERO)) THEN
         HG = Direction*H*ros_Gamma(istage)
         CALL redhc_made_soa_vbs_aq_WAXPY(NVAR,HG,dFdT,1,K(ioffset+1),1)
       END IF
       CALL redhc_made_soa_vbs_aq_ros_Solve(Ghimj, Pivot, K(ioffset+1), Nsol)

   END DO Stage


!~~~>  Compute the new solution
   CALL redhc_made_soa_vbs_aq_WCOPY(NVAR,Y,1,Ynew,1)
   DO j=1,ros_S
         CALL redhc_made_soa_vbs_aq_WAXPY(NVAR,ros_M(j),K(NVAR*(j-1)+1),1,Ynew,1)
   END DO

!~~~>  Compute the error estimation
   CALL redhc_made_soa_vbs_aq_WSCAL(NVAR,ZERO,Yerr,1)
   DO j=1,ros_S
        CALL redhc_made_soa_vbs_aq_WAXPY(NVAR,ros_E(j),K(NVAR*(j-1)+1),1,Yerr,1)
   END DO
   Err = redhc_made_soa_vbs_aq_ros_ErrorNorm ( Y, Ynew, Yerr, AbsTol, RelTol, VectorTol )

!~~~> New step size is bounded by FacMin <= Hnew/H <= FacMax
   Fac  = MIN(FacMax,MAX(FacMin,FacSafe/Err**(ONE/ros_ELO)))
   Hnew = H*Fac

!~~~>  Check the error magnitude and adjust step size
   Nstp = Nstp+1
   IF ( (Err <= ONE).OR.(H <= Hmin) ) THEN  !~~~> Accept step
      Nacc = Nacc+1
      CALL redhc_made_soa_vbs_aq_WCOPY(NVAR,Ynew,1,Y,1)
      T = T + Direction*H
      Hnew = MAX(Hmin,MIN(Hnew,Hmax))
      IF (RejectLastH) THEN  ! No step size increase after a rejected step
         Hnew = MIN(Hnew,H)
      END IF
      RejectLastH = .FALSE.
      RejectMoreH = .FALSE.
      H = Hnew
      EXIT UntilAccepted ! EXIT THE LOOP: WHILE STEP NOT ACCEPTED
   ELSE           !~~~> Reject step
      IF (RejectMoreH) THEN
         Hnew = H*FacRej
      END IF
      RejectMoreH = RejectLastH
      RejectLastH = .TRUE.
      H = Hnew
      IF (Nacc >= 1) THEN
         Nrej = Nrej+1
      END IF
   END IF ! Err <= 1

   END DO UntilAccepted

   END DO TimeLoop

!~~~> Succesful exit
   IERR = 1  !~~~> The integration was successful

  END SUBROUTINE  redhc_made_soa_vbs_aq_ros_Integrator


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  REAL(kind=dp) FUNCTION  redhc_made_soa_vbs_aq_ros_ErrorNorm ( Y, Ynew, Yerr, &
               AbsTol, RelTol, VectorTol )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~> Computes the "scaled norm" of the error vector Yerr
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   IMPLICIT NONE

! Input arguments
   REAL(kind=dp), INTENT(IN) :: Y(NVAR), Ynew(NVAR), &
          Yerr(NVAR), AbsTol(NVAR), RelTol(NVAR)
   LOGICAL, INTENT(IN) ::  VectorTol
! Local variables
   REAL(kind=dp) :: Err, Scale, Ymax
   INTEGER  :: i
   REAL(kind=dp), PARAMETER :: ZERO = 0.0_dp

   Err = ZERO
   DO i=1,NVAR
     Ymax = MAX(ABS(Y(i)),ABS(Ynew(i)))
     IF (VectorTol) THEN
       Scale = AbsTol(i)+RelTol(i)*Ymax
     ELSE
       Scale = AbsTol(1)+RelTol(1)*Ymax
     END IF
     Err = Err+(Yerr(i)/Scale)**2
   END DO
   Err  = SQRT(Err/NVAR)

    redhc_made_soa_vbs_aq_ros_ErrorNorm = Err

  END FUNCTION  redhc_made_soa_vbs_aq_ros_ErrorNorm


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SUBROUTINE redhc_made_soa_vbs_aq_ros_FunTimeDeriv ( T, Roundoff, Y, &
                Fcn0, dFdT, RCONST, FIX, Nfun )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~> The time partial derivative of the function by finite differences
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   IMPLICIT NONE

!~~~> Input arguments
   REAL(kind=dp), INTENT(IN) :: T, Roundoff, Y(NVAR), Fcn0(NVAR)
   REAL(kind=dp), INTENT(IN) :: RCONST(NREACT), FIX(NFIX)
!~~~> Output arguments
   REAL(kind=dp), INTENT(OUT) :: dFdT(NVAR)
!~~~> InOut args
   INTEGER, INTENT(INOUT) ::Nfun
!~~~> Local variables
   REAL(kind=dp) :: Delta
   REAL(kind=dp), PARAMETER :: ONE = 1.0_dp, DeltaMin = 1.0E-6_dp

   Delta = SQRT(Roundoff)*MAX(DeltaMin,ABS(T))
   CALL redhc_made_soa_vbs_aq_FunTemplate(T+Delta,Y,dFdT, RCONST, FIX, Nfun)
   CALL redhc_made_soa_vbs_aq_WAXPY(NVAR,(-ONE),Fcn0,1,dFdT,1)
   CALL redhc_made_soa_vbs_aq_WSCAL(NVAR,(ONE/Delta),dFdT,1)

  END SUBROUTINE  redhc_made_soa_vbs_aq_ros_FunTimeDeriv


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SUBROUTINE  redhc_made_soa_vbs_aq_ros_PrepareMatrix ( H, Direction, gam, &
             Jac0, Ghimj, Pivot, Singular, Ndec,  Nsng  )
! --- --- --- --- --- --- --- --- --- --- --- --- ---
!  Prepares the LHS matrix for stage calculations
!  1.  Construct Ghimj = 1/(H*ham) - Jac0
!      "(Gamma H) Inverse Minus Jacobian"
!  2.  Repeat LU decomposition of Ghimj until successful.
!       -half the step size if LU decomposition fails and retry
!       -exit after 5 consecutive fails
! --- --- --- --- --- --- --- --- --- --- --- --- ---
   IMPLICIT NONE

!~~~> Input arguments
#ifdef FULL_ALGEBRA    
   REAL(kind=dp), INTENT(IN) ::  Jac0(NVAR,NVAR)
#else
   REAL(kind=dp), INTENT(IN) ::  Jac0(LU_NONZERO)
#endif   
   REAL(kind=dp), INTENT(IN) ::  gam
   INTEGER, INTENT(IN) ::  Direction
!~~~> Output arguments
#ifdef FULL_ALGEBRA    
   REAL(kind=dp), INTENT(OUT) :: Ghimj(NVAR,NVAR)
#else
   REAL(kind=dp), INTENT(OUT) :: Ghimj(LU_NONZERO)
#endif   
   LOGICAL, INTENT(OUT) ::  Singular
   INTEGER, INTENT(OUT) ::  Pivot(NVAR)
!~~~> Inout arguments
   REAL(kind=dp), INTENT(INOUT) :: H   ! step size is decreased when LU fails
   INTEGER, INTENT(INOUT) ::  Ndec, Nsng
!~~~> Local variables
   INTEGER  :: i, ising, Nconsecutive
   REAL(kind=dp) :: ghinv
   REAL(kind=dp), PARAMETER :: ONE  = 1.0_dp, HALF = 0.5_dp

   Nconsecutive = 0
   Singular = .TRUE.

   DO WHILE (Singular)

!~~~>    Construct Ghimj = 1/(H*gam) - Jac0
#ifdef FULL_ALGEBRA    
     CALL redhc_made_soa_vbs_aq_WCOPY(NVAR*NVAR,Jac0,1,Ghimj,1)
     CALL redhc_made_soa_vbs_aq_WSCAL(NVAR*NVAR,(-ONE),Ghimj,1)
     ghinv = ONE/(Direction*H*gam)
     DO i=1,NVAR
       Ghimj(i,i) = Ghimj(i,i)+ghinv
     END DO
#else
     CALL redhc_made_soa_vbs_aq_WCOPY(LU_NONZERO,Jac0,1,Ghimj,1)
     CALL redhc_made_soa_vbs_aq_WSCAL(LU_NONZERO,(-ONE),Ghimj,1)
     ghinv = ONE/(Direction*H*gam)
     DO i=1,NVAR
       Ghimj(LU_DIAG(i)) = Ghimj(LU_DIAG(i))+ghinv
     END DO
#endif   
!~~~>    Compute LU decomposition
     CALL redhc_made_soa_vbs_aq_ros_Decomp( Ghimj, Pivot, ising, Ndec )
     IF (ising == 0) THEN
!~~~>    If successful done
        Singular = .FALSE.
     ELSE ! ising .ne. 0
!~~~>    If unsuccessful half the step size; if 5 consecutive fails then return
        Nsng = Nsng+1
        Nconsecutive = Nconsecutive+1
        Singular = .TRUE.
        PRINT*,'Warning: LU Decomposition returned ising = ',ising
        IF (Nconsecutive <= 5) THEN ! Less than 5 consecutive failed decompositions
           H = H*HALF
        ELSE  ! More than 5 consecutive failed decompositions
           RETURN
        END IF  ! Nconsecutive
      END IF    ! ising

   END DO ! WHILE Singular

  END SUBROUTINE  redhc_made_soa_vbs_aq_ros_PrepareMatrix


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SUBROUTINE  redhc_made_soa_vbs_aq_ros_Decomp( A, Pivot, ising, Ndec )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!  Template for the LU decomposition
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   IMPLICIT NONE
!~~~> Inout variables
   REAL(kind=dp), INTENT(INOUT) :: A(LU_NONZERO)
!~~~> Output variables
   INTEGER, INTENT(OUT) :: Pivot(NVAR), ising
   INTEGER, INTENT(INOUT) :: Ndec 

#ifdef FULL_ALGEBRA    
   CALL  redhc_made_soa_vbs_aq_DGETRF( NVAR, NVAR, A, NVAR, Pivot, ising )
#else   
!!!  use direct adressing in decomp 
!!!    CALL redhc_made_soa_vbs_aq_KppDecomp ( A, ising )
CALL decomp_redhc_made_soa_vbs_aq ( A, ising )
   Pivot(1) = 1
#endif
   Ndec = Ndec + 1

  END SUBROUTINE  redhc_made_soa_vbs_aq_ros_Decomp


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SUBROUTINE  redhc_made_soa_vbs_aq_ros_Solve( A, Pivot, b, Nsol )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!  Template for the forward/backward substitution (using pre-computed LU decomposition)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   IMPLICIT NONE
!~~~> Input variables
   REAL(kind=dp), INTENT(IN) :: A(LU_NONZERO)
   INTEGER, INTENT(IN) :: Pivot(NVAR)
!~~~~>  InOut args
   INTEGER, INTENT(INOUT) :: nsol 
!~~~> InOut variables
   REAL(kind=dp), INTENT(INOUT) :: b(NVAR)


#ifdef FULL_ALGEBRA    
   CALL  redhc_made_soa_vbs_aq_DGETRS( 'N', NVAR , 1, A, NVAR, Pivot, b, NVAR, 0 )
#else   
   CALL redhc_made_soa_vbs_aq_KppSolve( A, b )
#endif

   Nsol = Nsol+1

  END SUBROUTINE  redhc_made_soa_vbs_aq_ros_Solve



!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SUBROUTINE  redhc_made_soa_vbs_aq_Ros2 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,&
            ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! --- AN L-STABLE METHOD, 2 stages, order 2
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  IMPLICIT NONE

   INTEGER, PARAMETER :: S=2
   INTEGER, INTENT(OUT) ::  ros_S
   REAL(kind=dp), DIMENSION(S), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
   REAL(kind=dp), DIMENSION(S*(S-1)/2), INTENT(OUT) :: ros_A, ros_C
   REAL(kind=dp), INTENT(OUT) :: ros_ELO
   LOGICAL, DIMENSION(S), INTENT(OUT) :: ros_NewF
   CHARACTER(LEN=12), INTENT(OUT) :: ros_Name
!cms   DOUBLE PRECISION g
    REAL(kind=dp) :: g

    g = 1.0_dp + 1.0_dp/SQRT(2.0_dp)

!~~~> Name of the method
    ros_Name = 'ROS-2'
!~~~> Number of stages
    ros_S = S

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:
!       A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!       C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

    ros_A(1) = (1.0_dp)/g
    ros_C(1) = (-2.0_dp)/g
!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
    ros_NewF(1) = .TRUE.
    ros_NewF(2) = .TRUE.
!~~~> M_i = Coefficients for new step solution
    ros_M(1)= (3.0_dp)/(2.0_dp*g)
    ros_M(2)= (1.0_dp)/(2.0_dp*g)
! E_i = Coefficients for error estimator
    ros_E(1) = 1.0_dp/(2.0_dp*g)
    ros_E(2) = 1.0_dp/(2.0_dp*g)
!~~~> ros_ELO = estimator of local order - the minimum between the
!    main and the embedded scheme orders plus one
    ros_ELO = 2.0_dp
!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
    ros_Alpha(1) = 0.0_dp
    ros_Alpha(2) = 1.0_dp
!~~~> Gamma_i = \sum_j  gamma_{i,j}
    ros_Gamma(1) = g
    ros_Gamma(2) =-g

 END SUBROUTINE  redhc_made_soa_vbs_aq_Ros2


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SUBROUTINE  redhc_made_soa_vbs_aq_Ros3 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,&
           ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! --- AN L-STABLE METHOD, 3 stages, order 3, 2 function evaluations
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  IMPLICIT NONE

   INTEGER, PARAMETER :: S=3
   INTEGER, INTENT(OUT) ::  ros_S
   REAL(kind=dp), DIMENSION(S), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
   REAL(kind=dp), DIMENSION(S*(S-1)/2), INTENT(OUT) :: ros_A, ros_C
   REAL(kind=dp), INTENT(OUT) :: ros_ELO
   LOGICAL, DIMENSION(S), INTENT(OUT) :: ros_NewF
   CHARACTER(LEN=12), INTENT(OUT) :: ros_Name

!~~~> Name of the method
   ros_Name = 'ROS-3'
!~~~> Number of stages
   ros_S = S

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:
!       A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!       C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

   ros_A(1)= 1.0_dp
   ros_A(2)= 1.0_dp
   ros_A(3)= 0.0_dp

   ros_C(1) = -0.10156171083877702091975600115545E+01_dp
   ros_C(2) =  0.40759956452537699824805835358067E+01_dp
   ros_C(3) =  0.92076794298330791242156818474003E+01_dp
!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
   ros_NewF(1) = .TRUE.
   ros_NewF(2) = .TRUE.
   ros_NewF(3) = .FALSE.
!~~~> M_i = Coefficients for new step solution
   ros_M(1) =  0.1E+01_dp
   ros_M(2) =  0.61697947043828245592553615689730E+01_dp
   ros_M(3) = -0.42772256543218573326238373806514E+00_dp
! E_i = Coefficients for error estimator
   ros_E(1) =  0.5E+00_dp
   ros_E(2) = -0.29079558716805469821718236208017E+01_dp
   ros_E(3) =  0.22354069897811569627360909276199E+00_dp
!~~~> ros_ELO = estimator of local order - the minimum between the
!    main and the embedded scheme orders plus 1
   ros_ELO = 3.0_dp
!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
   ros_Alpha(1)= 0.0E+00_dp
   ros_Alpha(2)= 0.43586652150845899941601945119356E+00_dp
   ros_Alpha(3)= 0.43586652150845899941601945119356E+00_dp
!~~~> Gamma_i = \sum_j  gamma_{i,j}
   ros_Gamma(1)= 0.43586652150845899941601945119356E+00_dp
   ros_Gamma(2)= 0.24291996454816804366592249683314E+00_dp
   ros_Gamma(3)= 0.21851380027664058511513169485832E+01_dp

  END SUBROUTINE  redhc_made_soa_vbs_aq_Ros3

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SUBROUTINE  redhc_made_soa_vbs_aq_Ros4 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,&
           ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!     L-STABLE ROSENBROCK METHOD OF ORDER 4, WITH 4 STAGES
!     L-STABLE EMBEDDED ROSENBROCK METHOD OF ORDER 3
!
!      E. HAIRER AND G. WANNER, SOLVING ORDINARY DIFFERENTIAL
!      EQUATIONS II. STIFF AND DIFFERENTIAL-ALGEBRAIC PROBLEMS.
!      SPRINGER SERIES IN COMPUTATIONAL MATHEMATICS,
!      SPRINGER-VERLAG (1990)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  IMPLICIT NONE

   INTEGER, PARAMETER :: S=4
   INTEGER, INTENT(OUT) ::  ros_S
   REAL(kind=dp), DIMENSION(4), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
   REAL(kind=dp), DIMENSION(6), INTENT(OUT) :: ros_A, ros_C
   REAL(kind=dp), INTENT(OUT) :: ros_ELO
   LOGICAL, DIMENSION(4), INTENT(OUT) :: ros_NewF
   CHARACTER(LEN=12), INTENT(OUT) :: ros_Name
!cms   DOUBLE PRECISION g
   REAL(kind=dp) :: g


!~~~> Name of the method
   ros_Name = 'ROS-4'
!~~~> Number of stages
   ros_S = S

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:
!       A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!       C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

   ros_A(1) = 0.2000000000000000E+01_dp
   ros_A(2) = 0.1867943637803922E+01_dp
   ros_A(3) = 0.2344449711399156E+00_dp
   ros_A(4) = ros_A(2)
   ros_A(5) = ros_A(3)
   ros_A(6) = 0.0_dp

   ros_C(1) =-0.7137615036412310E+01_dp
   ros_C(2) = 0.2580708087951457E+01_dp
   ros_C(3) = 0.6515950076447975E+00_dp
   ros_C(4) =-0.2137148994382534E+01_dp
   ros_C(5) =-0.3214669691237626E+00_dp
   ros_C(6) =-0.6949742501781779E+00_dp
!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
   ros_NewF(1)  = .TRUE.
   ros_NewF(2)  = .TRUE.
   ros_NewF(3)  = .TRUE.
   ros_NewF(4)  = .FALSE.
!~~~> M_i = Coefficients for new step solution
   ros_M(1) = 0.2255570073418735E+01_dp
   ros_M(2) = 0.2870493262186792E+00_dp
   ros_M(3) = 0.4353179431840180E+00_dp
   ros_M(4) = 0.1093502252409163E+01_dp
!~~~> E_i  = Coefficients for error estimator
   ros_E(1) =-0.2815431932141155E+00_dp
   ros_E(2) =-0.7276199124938920E-01_dp
   ros_E(3) =-0.1082196201495311E+00_dp
   ros_E(4) =-0.1093502252409163E+01_dp
!~~~> ros_ELO  = estimator of local order - the minimum between the
!    main and the embedded scheme orders plus 1
   ros_ELO  = 4.0_dp
!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
   ros_Alpha(1) = 0.0_dp
   ros_Alpha(2) = 0.1145640000000000E+01_dp
   ros_Alpha(3) = 0.6552168638155900E+00_dp
   ros_Alpha(4) = ros_Alpha(3)
!~~~> Gamma_i = \sum_j  gamma_{i,j}
   ros_Gamma(1) = 0.5728200000000000E+00_dp
   ros_Gamma(2) =-0.1769193891319233E+01_dp
   ros_Gamma(3) = 0.7592633437920482E+00_dp
   ros_Gamma(4) =-0.1049021087100450E+00_dp

  END SUBROUTINE  redhc_made_soa_vbs_aq_Ros4

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SUBROUTINE  redhc_made_soa_vbs_aq_Rodas3 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,&
            ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! --- A STIFFLY-STABLE METHOD, 4 stages, order 3
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  IMPLICIT NONE

   INTEGER, PARAMETER :: S=4
   INTEGER, INTENT(OUT) ::  ros_S
   REAL(kind=dp), DIMENSION(S), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
   REAL(kind=dp), DIMENSION(S*(S-1)/2), INTENT(OUT) :: ros_A, ros_C
   REAL(kind=dp), INTENT(OUT) :: ros_ELO
   LOGICAL, DIMENSION(S), INTENT(OUT) :: ros_NewF
   CHARACTER(LEN=12), INTENT(OUT) :: ros_Name
!cms   DOUBLE PRECISION g
   REAL(kind=dp) :: g

!~~~> Name of the method
   ros_Name = 'RODAS-3'
!~~~> Number of stages
   ros_S = S

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:
!       A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!       C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

   ros_A(1) = 0.0E+00_dp
   ros_A(2) = 2.0E+00_dp
   ros_A(3) = 0.0E+00_dp
   ros_A(4) = 2.0E+00_dp
   ros_A(5) = 0.0E+00_dp
   ros_A(6) = 1.0E+00_dp

   ros_C(1) = 4.0E+00_dp
   ros_C(2) = 1.0E+00_dp
   ros_C(3) =-1.0E+00_dp
   ros_C(4) = 1.0E+00_dp
   ros_C(5) =-1.0E+00_dp
   ros_C(6) =-(8.0E+00_dp/3.0E+00_dp)

!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
   ros_NewF(1)  = .TRUE.
   ros_NewF(2)  = .FALSE.
   ros_NewF(3)  = .TRUE.
   ros_NewF(4)  = .TRUE.
!~~~> M_i = Coefficients for new step solution
   ros_M(1) = 2.0E+00_dp
   ros_M(2) = 0.0E+00_dp
   ros_M(3) = 1.0E+00_dp
   ros_M(4) = 1.0E+00_dp
!~~~> E_i  = Coefficients for error estimator
   ros_E(1) = 0.0E+00_dp
   ros_E(2) = 0.0E+00_dp
   ros_E(3) = 0.0E+00_dp
   ros_E(4) = 1.0E+00_dp
!~~~> ros_ELO  = estimator of local order - the minimum between the
!    main and the embedded scheme orders plus 1
   ros_ELO  = 3.0E+00_dp
!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
   ros_Alpha(1) = 0.0E+00_dp
   ros_Alpha(2) = 0.0E+00_dp
   ros_Alpha(3) = 1.0E+00_dp
   ros_Alpha(4) = 1.0E+00_dp
!~~~> Gamma_i = \sum_j  gamma_{i,j}
   ros_Gamma(1) = 0.5E+00_dp
   ros_Gamma(2) = 1.5E+00_dp
   ros_Gamma(3) = 0.0E+00_dp
   ros_Gamma(4) = 0.0E+00_dp

  END SUBROUTINE  redhc_made_soa_vbs_aq_Rodas3

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SUBROUTINE  redhc_made_soa_vbs_aq_Rodas4 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha,&
             ros_Gamma,ros_NewF,ros_ELO,ros_Name)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!     STIFFLY-STABLE ROSENBROCK METHOD OF ORDER 4, WITH 6 STAGES
!
!      E. HAIRER AND G. WANNER, SOLVING ORDINARY DIFFERENTIAL
!      EQUATIONS II. STIFF AND DIFFERENTIAL-ALGEBRAIC PROBLEMS.
!      SPRINGER SERIES IN COMPUTATIONAL MATHEMATICS,
!      SPRINGER-VERLAG (1996)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  IMPLICIT NONE

   INTEGER, PARAMETER :: S=6
   INTEGER, INTENT(OUT) ::  ros_S
   REAL(kind=dp), DIMENSION(S), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
   REAL(kind=dp), DIMENSION(S*(S-1)/2), INTENT(OUT) :: ros_A, ros_C
   REAL(kind=dp), INTENT(OUT) :: ros_ELO
   LOGICAL, DIMENSION(S), INTENT(OUT) :: ros_NewF
   CHARACTER(LEN=12), INTENT(OUT) :: ros_Name
!cms   DOUBLE PRECISION g
    REAL(kind=dp) :: g

!~~~> Name of the method
    ros_Name = 'RODAS-4'
!~~~> Number of stages
    ros_S = 6

!~~~> Y_stage_i ~ Y( T + H*Alpha_i )
    ros_Alpha(1) = 0.000_dp
    ros_Alpha(2) = 0.386_dp
    ros_Alpha(3) = 0.210_dp
    ros_Alpha(4) = 0.630_dp
    ros_Alpha(5) = 1.000_dp
    ros_Alpha(6) = 1.000_dp

!~~~> Gamma_i = \sum_j  gamma_{i,j}
    ros_Gamma(1) = 0.2500000000000000E+00_dp
    ros_Gamma(2) =-0.1043000000000000E+00_dp
    ros_Gamma(3) = 0.1035000000000000E+00_dp
    ros_Gamma(4) =-0.3620000000000023E-01_dp
    ros_Gamma(5) = 0.0_dp
    ros_Gamma(6) = 0.0_dp

!~~~> The coefficient matrices A and C are strictly lower triangular.
!   The lower triangular (subdiagonal) elements are stored in row-wise order:
!   A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
!   The general mapping formula is:  A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
!                  C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

    ros_A(1) = 0.1544000000000000E+01_dp
    ros_A(2) = 0.9466785280815826E+00_dp
    ros_A(3) = 0.2557011698983284E+00_dp
    ros_A(4) = 0.3314825187068521E+01_dp
    ros_A(5) = 0.2896124015972201E+01_dp
    ros_A(6) = 0.9986419139977817E+00_dp
    ros_A(7) = 0.1221224509226641E+01_dp
    ros_A(8) = 0.6019134481288629E+01_dp
    ros_A(9) = 0.1253708332932087E+02_dp
    ros_A(10) =-0.6878860361058950E+00_dp
    ros_A(11) = ros_A(7)
    ros_A(12) = ros_A(8)
    ros_A(13) = ros_A(9)
    ros_A(14) = ros_A(10)
    ros_A(15) = 1.0E+00_dp

    ros_C(1) =-0.5668800000000000E+01_dp
    ros_C(2) =-0.2430093356833875E+01_dp
    ros_C(3) =-0.2063599157091915E+00_dp
    ros_C(4) =-0.1073529058151375E+00_dp
    ros_C(5) =-0.9594562251023355E+01_dp
    ros_C(6) =-0.2047028614809616E+02_dp
    ros_C(7) = 0.7496443313967647E+01_dp
    ros_C(8) =-0.1024680431464352E+02_dp
    ros_C(9) =-0.3399990352819905E+02_dp
    ros_C(10) = 0.1170890893206160E+02_dp
    ros_C(11) = 0.8083246795921522E+01_dp
    ros_C(12) =-0.7981132988064893E+01_dp
    ros_C(13) =-0.3152159432874371E+02_dp
    ros_C(14) = 0.1631930543123136E+02_dp
    ros_C(15) =-0.6058818238834054E+01_dp

!~~~> M_i = Coefficients for new step solution
    ros_M(1) = ros_A(7)
    ros_M(2) = ros_A(8)
    ros_M(3) = ros_A(9)
    ros_M(4) = ros_A(10)
    ros_M(5) = 1.0E+00_dp
    ros_M(6) = 1.0E+00_dp

!~~~> E_i  = Coefficients for error estimator
    ros_E(1) = 0.0E+00_dp
    ros_E(2) = 0.0E+00_dp
    ros_E(3) = 0.0E+00_dp
    ros_E(4) = 0.0E+00_dp
    ros_E(5) = 0.0E+00_dp
    ros_E(6) = 1.0E+00_dp

!~~~> Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
!   or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
    ros_NewF(1) = .TRUE.
    ros_NewF(2) = .TRUE.
    ros_NewF(3) = .TRUE.
    ros_NewF(4) = .TRUE.
    ros_NewF(5) = .TRUE.
    ros_NewF(6) = .TRUE.

!~~~> ros_ELO  = estimator of local order - the minimum between the
!        main and the embedded scheme orders plus 1
    ros_ELO = 4.0_dp

  END SUBROUTINE  redhc_made_soa_vbs_aq_Rodas4

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!   End of the set of internal Rosenbrock subroutines
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
END SUBROUTINE  redhc_made_soa_vbs_aq_Rosenbrock
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUBROUTINE  redhc_made_soa_vbs_aq_FunTemplate( T, Y, Ydot, RCONST, FIX, Nfun )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!  Template for the ODE function call.
!  Updates the rate coefficients (and possibly the fixed species) at each call
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   USE redhc_made_soa_vbs_aq_Parameters
!! USE redhc_made_soa_vbs_aq_Global
!! USE redhc_made_soa_vbs_aq_Function
!! USE redhc_made_soa_vbs_aq_Rates
!~~~> Input variables
   REAL(kind=dp) :: T, Y(NVAR)
   REAL(kind=dp) :: RCONST(NREACT)
   REAL(kind=dp) :: FIX(NFIX)
!~~~> Output variables
   REAL(kind=dp) :: Ydot(NVAR)
   INTEGER :: Nfun


!~~~> Local variables
!!   REAL(kind=dp) :: Told

!!   Told = TIME
!!   TIME = T
!!   CALL Update_SUN()
!!   CALL Update_RCONST()
   CALL redhc_made_soa_vbs_aq_Fun( Y, FIX, RCONST, Ydot )
!!   TIME = Told

   Nfun = Nfun+1

END SUBROUTINE  redhc_made_soa_vbs_aq_FunTemplate


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUBROUTINE  redhc_made_soa_vbs_aq_JacTemplate( T, Y, Jcb, FIX, Njac, RCONST )
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!  Template for the ODE Jacobian call.
!  Updates the rate coefficients (and possibly the fixed species) at each call
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 USE redhc_made_soa_vbs_aq_Parameters
 !!USE redhc_made_soa_vbs_aq_Global
 USE redhc_made_soa_vbs_aq_Jacobian
!! USE redhc_made_soa_vbs_aq_LinearAlgebra
!! USE redhc_made_soa_vbs_aq_Rates
!~~~> Input variables
    REAL(kind=dp) :: T, Y(NVAR)
    REAL(kind=dp) :: FIX(NFIX)
    REAL(kind=dp) :: RCONST(NREACT)

    INTEGER :: Njac

!~~~> Output variables
#ifdef FULL_ALGEBRA    
    REAL(kind=dp) :: JV(LU_NONZERO), Jcb(NVAR,NVAR)
#else
    REAL(kind=dp) :: Jcb(LU_NONZERO)
#endif   
!~~~> Local variables
    REAL(kind=dp) :: Told
#ifdef FULL_ALGEBRA    
    INTEGER :: i, j
#endif   

!!    Told = TIME
!!    TIME = T
!!    CALL Update_SUN()
!!    CALL Update_RCONST()
#ifdef FULL_ALGEBRA    
    CALL redhc_made_soa_vbs_aq_Jac_SP(Y, FIX, RCONST, JV)
    DO j=1,NVAR
      DO i=1,NVAR
         Jcb(i,j) = 0.0d0
      END DO
    END DO
    DO i=1,LU_NONZERO
       Jcb(LU_IROW(i),LU_ICOL(i)) = JV(i)
    END DO
#else
    CALL redhc_made_soa_vbs_aq_Jac_SP( Y, FIX, RCONST, Jcb )
#endif   
!!    TIME = Told

    Njac = Njac+1

END SUBROUTINE  redhc_made_soa_vbs_aq_JacTemplate

!!!END MODULE redhc_made_soa_vbs_aq_Integrator
! End of INTEGRATE function
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! 
! redhc_made_soa_vbs_aq_Fun - time derivatives of variables - Agregate form
!   Arguments :
!      V         - Concentrations of variable species (local)
!      F         - Concentrations of fixed species (local)
!      RCT       - Rate constants (local)
!      Vdot      - Time derivative of variable species concentrations
! 
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SUBROUTINE redhc_made_soa_vbs_aq_Fun ( V, F, RCT, Vdot )

! V - Concentrations of variable species (local)
  REAL(kind=dp) :: V(NVAR)
! F - Concentrations of fixed species (local)
  REAL(kind=dp) :: F(NFIX)
! RCT - Rate constants (local)
  REAL(kind=dp) :: RCT(NREACT)
! Vdot - Time derivative of variable species concentrations
  REAL(kind=dp) :: Vdot(NVAR)


! Local variables
! A - Rate for each equation
  REAL(kind=dp) :: A(NREACT)

! Computation of equation rates
  A(1) = RCT(1)*V(44)
  A(2) = RCT(2)*V(46)
  A(3) = RCT(3)*V(21)
  A(4) = RCT(4)*V(28)
  A(5) = RCT(5)*V(47)
  A(6) = RCT(6)*V(25)
  A(7) = RCT(7)*V(41)
  A(8) = RCT(8)*V(41)
  A(9) = RCT(9)*V(19)
  A(10) = RCT(10)*V(38)
  A(11) = RCT(11)*V(30)
  A(12) = RCT(12)*V(27)
  A(13) = RCT(13)*V(24)
  A(14) = RCT(14)*V(35)
  A(15) = RCT(15)*V(43)*V(44)
  A(16) = RCT(16)*V(44)*V(48)
  A(17) = RCT(17)*V(48)*V(48)*F(1)
  A(18) = RCT(18)*V(19)*V(43)
  A(19) = RCT(19)*V(43)*V(48)
  A(20) = RCT(20)*V(43)*V(43)
  A(21) = RCT(21)*V(43)*V(43)
  A(22) = RCT(22)*V(45)*V(48)
  A(23) = RCT(23)*V(44)*V(45)
  A(24) = RCT(24)*V(44)*V(46)
  A(25) = RCT(25)*V(47)*V(48)
  A(26) = RCT(26)*V(46)*V(47)
  A(27) = RCT(27)*V(21)
  A(28) = RCT(28)*V(43)*V(46)
  A(29) = RCT(29)*V(28)*V(43)
  A(30) = RCT(30)*V(45)*V(47)
  A(31) = RCT(31)*V(46)*V(48)
  A(32) = RCT(32)*V(25)*V(43)
  A(33) = RCT(33)*V(25)
  A(34) = RCT(34)*V(41)*V(47)
  A(35) = RCT(35)*V(41)*V(43)
  A(36) = RCT(36)*V(29)*V(43)
  A(37) = RCT(37)*V(43)
  A(38) = RCT(38)*V(38)*V(43)
  A(39) = RCT(39)*V(38)*V(47)
  A(40) = RCT(40)*V(42)*V(45)
  A(41) = RCT(41)*V(42)*V(46)
  A(42) = RCT(42)*V(27)
  A(43) = RCT(43)*V(42)*V(42)
  A(44) = RCT(44)*V(42)*V(48)
  A(45) = RCT(45)*V(33)*V(43)
  A(46) = RCT(46)*V(23)
  A(47) = RCT(47)*V(23)
  A(48) = RCT(48)*V(37)*V(43)
  A(49) = RCT(49)*V(37)*V(44)
  A(50) = RCT(50)*V(37)*V(47)
  A(51) = RCT(51)*V(26)*V(44)
  A(52) = RCT(52)*V(26)*V(43)
  A(53) = RCT(53)*V(30)*V(43)
  A(54) = RCT(54)*V(36)*V(43)
  A(55) = RCT(55)*V(36)*V(44)
  A(56) = RCT(56)*V(36)*V(47)
  A(57) = RCT(57)*V(24)*V(43)
  A(58) = RCT(58)*V(35)*V(43)
  A(59) = RCT(59)*V(39)*V(45)
  A(60) = RCT(60)*V(39)*V(39)
  A(61) = RCT(61)*V(40)*V(45)
  A(62) = RCT(62)*V(39)*V(48)
  A(63) = RCT(63)*V(40)*V(48)
  A(64) = RCT(64)*V(20)*V(33)
  A(65) = RCT(65)*V(17)*V(43)
  A(66) = RCT(66)*V(18)*V(43)
  A(67) = RCT(67)*V(22)*V(43)
  A(68) = RCT(68)*V(34)*V(44)
  A(69) = RCT(69)*V(34)*V(43)
  A(70) = RCT(70)*V(34)*V(47)
  A(71) = RCT(71)*V(32)*V(44)
  A(72) = RCT(72)*V(32)*V(43)
  A(73) = RCT(73)*V(32)*V(47)
  A(74) = RCT(74)*V(31)*V(44)
  A(75) = RCT(75)*V(31)*V(43)
  A(76) = RCT(76)*V(12)*V(43)
  A(77) = RCT(77)*V(13)*V(43)
  A(78) = RCT(78)*V(14)*V(43)
  A(79) = RCT(79)*V(15)*V(43)
  A(80) = RCT(80)*V(11)*V(43)
  A(81) = RCT(81)*V(10)*V(43)
  A(82) = RCT(82)*V(9)*V(43)
  A(83) = RCT(83)*V(8)*V(43)
  A(84) = RCT(84)*V(6)*V(43)
  A(85) = RCT(85)*V(5)*V(43)
  A(86) = RCT(86)*V(4)*V(43)
  A(87) = RCT(87)*V(1)*V(43)
  A(88) = RCT(88)*V(2)*V(43)
  A(89) = RCT(89)*V(31)*V(47)
  A(90) = RCT(90)*V(43)*F(2)
  A(91) = RCT(91)*V(27)*V(43)
  A(92) = RCT(92)*V(48)
  A(93) = RCT(93)*V(21)
  A(94) = RCT(94)*V(46)
  A(95) = RCT(95)*V(47)
  A(96) = RCT(96)*V(35)

! Aggregate function
  Vdot(1) = -A(87)
  Vdot(2) = -A(88)
  Vdot(3) = A(86)
  Vdot(4) = A(85)-A(86)
  Vdot(5) = A(84)-A(85)
  Vdot(6) = -A(84)
  Vdot(7) = 1.667*A(79)+A(83)
  Vdot(8) = 1.667*A(78)+A(82)-A(83)
  Vdot(9) = 1.667*A(77)+A(81)-A(82)
  Vdot(10) = 1.667*A(76)+A(80)-A(81)
  Vdot(11) = -A(80)
  Vdot(12) = -A(76)
  Vdot(13) = -A(77)
  Vdot(14) = -A(78)
  Vdot(15) = -A(79)
  Vdot(16) = A(65)
  Vdot(17) = -A(65)
  Vdot(18) = -A(66)
  Vdot(19) = -A(9)+A(17)-A(18)+A(21)+0.5*A(92)
  Vdot(20) = 0.11*A(45)+2.1*A(46)+A(48)+0.9*A(49)+A(50)-A(64)
  Vdot(21) = -A(3)+A(26)-A(27)-A(93)
  Vdot(22) = -A(67)
  Vdot(23) = 0.76*A(45)-A(46)-A(47)
  Vdot(24) = -A(13)+0.21*A(44)-A(57)+A(62)+A(63)
  Vdot(25) = -A(6)+A(31)-A(32)-A(33)
  Vdot(26) = -A(51)-A(52)
  Vdot(27) = -A(12)+A(41)-A(42)-A(91)
  Vdot(28) = -A(4)+A(28)-A(29)+A(34)+A(39)+2*A(93)+0.5*A(94)+A(95)+A(96)
  Vdot(29) = A(7)+A(8)+A(10)+A(11)+A(34)+A(35)-A(36)+0.37*A(49)+0.43*A(51)+0.36*A(55)+0.4*A(67)+0.001*A(68)+0.635*A(74)
  Vdot(30) = -A(11)-A(53)+0.03*A(54)+0.03*A(55)+0.08*A(56)+0.85*A(67)+0.027*A(73)
  Vdot(31) = -A(74)-A(75)-A(89)
  Vdot(32) = -A(71)-A(72)-A(73)
  Vdot(33) = -A(45)+0.63*A(54)+0.63*A(55)-A(64)+7*A(68)+1.66*A(69)+0.21*A(71)+0.324*A(72)+0.085*A(74)+0.185*A(75)
  Vdot(34) = -A(68)-A(69)-A(70)
  Vdot(35) = -A(14)+0.9*A(56)-A(58)+A(61)+0.53*A(70)+A(89)-A(96)
  Vdot(36) = -A(54)-A(55)-A(56)
  Vdot(37) = -A(48)-A(49)-A(50)+0.58*A(54)+0.55*A(55)+0.45*A(56)+0.522*A(73)
  Vdot(38) = -A(10)-A(38)-A(39)+0.11*A(45)+1.1*A(46)+A(48)+0.44*A(49)+A(50)+0.22*A(52)+0.12*A(56)+0.21*A(68)+0.47*A(69)&
               &+0.47*A(70)+0.85*A(71)+0.935*A(75)
  Vdot(39) = A(10)+A(37)+A(40)+2*A(43)+A(44)+0.87*A(45)+0.96*A(46)+A(48)+0.29*A(49)+0.91*A(50)+A(52)+A(53)+0.85*A(54)&
               &+0.18*A(55)+0.7*A(57)+A(58)-A(59)-2*A(60)-A(62)+0.6*A(67)+0.76*A(68)+1.25*A(69)+1.03*A(70)+0.19*A(72)+0.935&
               &*A(75)
  Vdot(40) = 0.13*A(45)+0.09*A(50)+0.15*A(54)-A(61)-A(63)+0.2*A(67)+0.18*A(68)+0.25*A(69)+0.25*A(70)+A(73)+0.065*A(75)
  Vdot(41) = -A(7)-A(8)+A(10)-A(34)-A(35)+A(37)+A(40)+2*A(43)+A(44)+A(48)+0.64*A(49)+A(50)+A(51)+1.56*A(52)+0.61*A(54)&
               &+0.9*A(55)+0.03*A(56)+0.24*A(68)+0.28*A(69)+0.51*A(71)+0.3*A(72)+0.311*A(75)+A(91)
  Vdot(42) = A(11)+A(12)+0.5*A(38)+A(39)-A(40)-A(41)+A(42)-2*A(43)-A(44)+A(53)+0.15*A(55)+0.1*A(67)+0.39*A(68)
  Vdot(43) = 2*A(1)+A(4)+0.33*A(6)+2*A(9)+A(13)-A(15)+A(16)-A(18)-A(19)-2*A(20)-2*A(21)+A(22)+A(25)-A(28)-A(29)-A(32)&
               &-A(35)-A(36)-A(37)-A(38)+0.79*A(44)-A(45)-A(48)+0.4*A(49)+0.12*A(51)-A(52)-A(53)-A(54)+0.28*A(55)-0.7*A(57)&
               &-A(58)-A(65)-A(66)-A(67)+0.57*A(68)-A(69)+0.63*A(71)-A(72)+0.369*A(74)-A(75)-A(90)-A(91)+0.5*A(94)
  Vdot(44) = -A(1)+A(2)+0.89*A(5)-A(15)-A(16)+A(20)-A(23)-A(24)-A(49)-A(51)-A(55)-A(68)-A(71)-A(74)
  Vdot(45) = A(2)+0.11*A(5)-A(22)-A(23)-A(30)-A(40)-A(59)-A(61)+0.5*A(94)
  Vdot(46) = -A(2)+A(3)+A(4)+0.89*A(5)+0.66*A(6)+A(12)+A(14)+A(22)+A(23)-A(24)+A(25)-A(26)+A(27)-A(28)+2*A(30)-A(31)&
               &+A(32)+A(33)+A(40)-A(41)+A(42)+A(50)+0.1*A(56)+A(58)+A(59)+0.47*A(70)-A(94)
  Vdot(47) = A(3)-A(5)+0.33*A(6)+A(24)-A(25)-A(26)+A(27)+A(29)-A(30)-A(34)-A(39)-A(50)-A(56)-A(70)-A(73)-A(89)+A(91)&
               &-A(95)
  Vdot(48) = 0.66*A(6)+2*A(7)+2*A(10)+A(11)+A(14)+A(15)-A(16)-2*A(17)+A(18)-A(19)-A(22)-A(25)-A(31)+A(33)+A(34)+A(35)&
               &+A(36)+A(37)+0.5*A(38)+A(40)+2*A(43)+0.11*A(45)+0.94*A(46)+A(47)+A(48)+0.25*A(49)+0.26*A(51)+A(52)+0.85&
               &*A(54)+0.3*A(55)+0.9*A(56)-A(62)-A(63)+0.6*A(67)+0.07*A(68)+0.75*A(69)+0.28*A(70)+0.084*A(74)+A(90)-A(92)
      
END SUBROUTINE redhc_made_soa_vbs_aq_Fun

! End of redhc_made_soa_vbs_aq_Fun function
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! 
! redhc_made_soa_vbs_aq_IRRFun - accumulated time derivatives of variables - Agregate form
!   Arguments :
!      V         - Concentrations of variable species (local)
!      F         - Concentrations of fixed species (local)
!      RCT       - Rate constants (local)
!      IRR       - Accumulated reaction rate
! 
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SUBROUTINE redhc_made_soa_vbs_aq_IRRFun ( V, F, RCT, IRR )

! V - Concentrations of variable species (local)
  REAL(kind=dp) :: V(NVAR)
! F - Concentrations of fixed species (local)
  REAL(kind=dp) :: F(NFIX)
! RCT - Rate constants (local)
  REAL(kind=dp) :: RCT(NREACT)
! IRR - Accumulated reaction rate
  REAL(kind=dp) :: IRR(NREACT)


! Computation of accumulated equation rates
  IRR(1) = RCT(1)*V(44)
  IRR(2) = RCT(2)*V(46)
  IRR(3) = RCT(3)*V(21)
  IRR(4) = RCT(4)*V(28)
  IRR(5) = RCT(5)*V(47)
  IRR(6) = RCT(6)*V(25)
  IRR(7) = RCT(7)*V(41)
  IRR(8) = RCT(8)*V(41)
  IRR(9) = RCT(9)*V(19)
  IRR(10) = RCT(10)*V(38)
  IRR(11) = RCT(11)*V(30)
  IRR(12) = RCT(12)*V(27)
  IRR(13) = RCT(13)*V(24)
  IRR(14) = RCT(14)*V(35)
  IRR(15) = RCT(15)*V(43)*V(44)
  IRR(16) = RCT(16)*V(44)*V(48)
  IRR(17) = RCT(17)*V(48)*V(48)*F(1)
  IRR(18) = RCT(18)*V(19)*V(43)
  IRR(19) = RCT(19)*V(43)*V(48)
  IRR(20) = RCT(20)*V(43)*V(43)
  IRR(21) = RCT(21)*V(43)*V(43)
  IRR(22) = RCT(22)*V(45)*V(48)
  IRR(23) = RCT(23)*V(44)*V(45)
  IRR(24) = RCT(24)*V(44)*V(46)
  IRR(25) = RCT(25)*V(47)*V(48)
  IRR(26) = RCT(26)*V(46)*V(47)
  IRR(27) = RCT(27)*V(21)
  IRR(28) = RCT(28)*V(43)*V(46)
  IRR(29) = RCT(29)*V(28)*V(43)
  IRR(30) = RCT(30)*V(45)*V(47)
  IRR(31) = RCT(31)*V(46)*V(48)
  IRR(32) = RCT(32)*V(25)*V(43)
  IRR(33) = RCT(33)*V(25)
  IRR(34) = RCT(34)*V(41)*V(47)
  IRR(35) = RCT(35)*V(41)*V(43)
  IRR(36) = RCT(36)*V(29)*V(43)
  IRR(37) = RCT(37)*V(43)
  IRR(38) = RCT(38)*V(38)*V(43)
  IRR(39) = RCT(39)*V(38)*V(47)
  IRR(40) = RCT(40)*V(42)*V(45)
  IRR(41) = RCT(41)*V(42)*V(46)
  IRR(42) = RCT(42)*V(27)
  IRR(43) = RCT(43)*V(42)*V(42)
  IRR(44) = RCT(44)*V(42)*V(48)
  IRR(45) = RCT(45)*V(33)*V(43)
  IRR(46) = RCT(46)*V(23)
  IRR(47) = RCT(47)*V(23)
  IRR(48) = RCT(48)*V(37)*V(43)
  IRR(49) = RCT(49)*V(37)*V(44)
  IRR(50) = RCT(50)*V(37)*V(47)
  IRR(51) = RCT(51)*V(26)*V(44)
  IRR(52) = RCT(52)*V(26)*V(43)
  IRR(53) = RCT(53)*V(30)*V(43)
  IRR(54) = RCT(54)*V(36)*V(43)
  IRR(55) = RCT(55)*V(36)*V(44)
  IRR(56) = RCT(56)*V(36)*V(47)
  IRR(57) = RCT(57)*V(24)*V(43)
  IRR(58) = RCT(58)*V(35)*V(43)
  IRR(59) = RCT(59)*V(39)*V(45)
  IRR(60) = RCT(60)*V(39)*V(39)
  IRR(61) = RCT(61)*V(40)*V(45)
  IRR(62) = RCT(62)*V(39)*V(48)
  IRR(63) = RCT(63)*V(40)*V(48)
  IRR(64) = RCT(64)*V(20)*V(33)
  IRR(65) = RCT(65)*V(17)*V(43)
  IRR(66) = RCT(66)*V(18)*V(43)
  IRR(67) = RCT(67)*V(22)*V(43)
  IRR(68) = RCT(68)*V(34)*V(44)
  IRR(69) = RCT(69)*V(34)*V(43)
  IRR(70) = RCT(70)*V(34)*V(47)
  IRR(71) = RCT(71)*V(32)*V(44)
  IRR(72) = RCT(72)*V(32)*V(43)
  IRR(73) = RCT(73)*V(32)*V(47)
  IRR(74) = RCT(74)*V(31)*V(44)
  IRR(75) = RCT(75)*V(31)*V(43)
  IRR(76) = RCT(76)*V(12)*V(43)
  IRR(77) = RCT(77)*V(13)*V(43)
  IRR(78) = RCT(78)*V(14)*V(43)
  IRR(79) = RCT(79)*V(15)*V(43)
  IRR(80) = RCT(80)*V(11)*V(43)
  IRR(81) = RCT(81)*V(10)*V(43)
  IRR(82) = RCT(82)*V(9)*V(43)
  IRR(83) = RCT(83)*V(8)*V(43)
  IRR(84) = RCT(84)*V(6)*V(43)
  IRR(85) = RCT(85)*V(5)*V(43)
  IRR(86) = RCT(86)*V(4)*V(43)
  IRR(87) = RCT(87)*V(1)*V(43)
  IRR(88) = RCT(88)*V(2)*V(43)
  IRR(89) = RCT(89)*V(31)*V(47)
  IRR(90) = RCT(90)*V(43)*F(2)
  IRR(91) = RCT(91)*V(27)*V(43)
  IRR(92) = RCT(92)*V(48)
  IRR(93) = RCT(93)*V(21)
  IRR(94) = RCT(94)*V(46)
  IRR(95) = RCT(95)*V(47)
  IRR(96) = RCT(96)*V(35)
      
END SUBROUTINE redhc_made_soa_vbs_aq_IRRFun

! End of redhc_made_soa_vbs_aq_IRRFun function
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! 
! redhc_made_soa_vbs_aq_Jac_SP - the Jacobian of Variables in sparse matrix representation
!   Arguments :
!      V         - Concentrations of variable species (local)
!      F         - Concentrations of fixed species (local)
!      RCT       - Rate constants (local)
!      JVS       - sparse Jacobian of variables
! 
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SUBROUTINE redhc_made_soa_vbs_aq_Jac_SP ( V, F, RCT, JVS )

! V - Concentrations of variable species (local)
  REAL(kind=dp) :: V(NVAR)
! F - Concentrations of fixed species (local)
  REAL(kind=dp) :: F(NFIX)
! RCT - Rate constants (local)
  REAL(kind=dp) :: RCT(NREACT)
! JVS - sparse Jacobian of variables
  REAL(kind=dp) :: JVS(LU_NONZERO)


! Local variables
! B - Temporary array
  REAL(kind=dp) :: B(163)

! B(1) = dA(1)/dV(44)
  B(1) = RCT(1)
! B(2) = dA(2)/dV(46)
  B(2) = RCT(2)
! B(3) = dA(3)/dV(21)
  B(3) = RCT(3)
! B(4) = dA(4)/dV(28)
  B(4) = RCT(4)
! B(5) = dA(5)/dV(47)
  B(5) = RCT(5)
! B(6) = dA(6)/dV(25)
  B(6) = RCT(6)
! B(7) = dA(7)/dV(41)
  B(7) = RCT(7)
! B(8) = dA(8)/dV(41)
  B(8) = RCT(8)
! B(9) = dA(9)/dV(19)
  B(9) = RCT(9)
! B(10) = dA(10)/dV(38)
  B(10) = RCT(10)
! B(11) = dA(11)/dV(30)
  B(11) = RCT(11)
! B(12) = dA(12)/dV(27)
  B(12) = RCT(12)
! B(13) = dA(13)/dV(24)
  B(13) = RCT(13)
! B(14) = dA(14)/dV(35)
  B(14) = RCT(14)
! B(15) = dA(15)/dV(43)
  B(15) = RCT(15)*V(44)
! B(16) = dA(15)/dV(44)
  B(16) = RCT(15)*V(43)
! B(17) = dA(16)/dV(44)
  B(17) = RCT(16)*V(48)
! B(18) = dA(16)/dV(48)
  B(18) = RCT(16)*V(44)
! B(19) = dA(17)/dV(48)
  B(19) = RCT(17)*2*V(48)*F(1)
! B(21) = dA(18)/dV(19)
  B(21) = RCT(18)*V(43)
! B(22) = dA(18)/dV(43)
  B(22) = RCT(18)*V(19)
! B(23) = dA(19)/dV(43)
  B(23) = RCT(19)*V(48)
! B(24) = dA(19)/dV(48)
  B(24) = RCT(19)*V(43)
! B(25) = dA(20)/dV(43)
  B(25) = RCT(20)*2*V(43)
! B(26) = dA(21)/dV(43)
  B(26) = RCT(21)*2*V(43)
! B(27) = dA(22)/dV(45)
  B(27) = RCT(22)*V(48)
! B(28) = dA(22)/dV(48)
  B(28) = RCT(22)*V(45)
! B(29) = dA(23)/dV(44)
  B(29) = RCT(23)*V(45)
! B(30) = dA(23)/dV(45)
  B(30) = RCT(23)*V(44)
! B(31) = dA(24)/dV(44)
  B(31) = RCT(24)*V(46)
! B(32) = dA(24)/dV(46)
  B(32) = RCT(24)*V(44)
! B(33) = dA(25)/dV(47)
  B(33) = RCT(25)*V(48)
! B(34) = dA(25)/dV(48)
  B(34) = RCT(25)*V(47)
! B(35) = dA(26)/dV(46)
  B(35) = RCT(26)*V(47)
! B(36) = dA(26)/dV(47)
  B(36) = RCT(26)*V(46)
! B(37) = dA(27)/dV(21)
  B(37) = RCT(27)
! B(38) = dA(28)/dV(43)
  B(38) = RCT(28)*V(46)
! B(39) = dA(28)/dV(46)
  B(39) = RCT(28)*V(43)
! B(40) = dA(29)/dV(28)
  B(40) = RCT(29)*V(43)
! B(41) = dA(29)/dV(43)
  B(41) = RCT(29)*V(28)
! B(42) = dA(30)/dV(45)
  B(42) = RCT(30)*V(47)
! B(43) = dA(30)/dV(47)
  B(43) = RCT(30)*V(45)
! B(44) = dA(31)/dV(46)
  B(44) = RCT(31)*V(48)
! B(45) = dA(31)/dV(48)
  B(45) = RCT(31)*V(46)
! B(46) = dA(32)/dV(25)
  B(46) = RCT(32)*V(43)
! B(47) = dA(32)/dV(43)
  B(47) = RCT(32)*V(25)
! B(48) = dA(33)/dV(25)
  B(48) = RCT(33)
! B(49) = dA(34)/dV(41)
  B(49) = RCT(34)*V(47)
! B(50) = dA(34)/dV(47)
  B(50) = RCT(34)*V(41)
! B(51) = dA(35)/dV(41)
  B(51) = RCT(35)*V(43)
! B(52) = dA(35)/dV(43)
  B(52) = RCT(35)*V(41)
! B(53) = dA(36)/dV(29)
  B(53) = RCT(36)*V(43)
! B(54) = dA(36)/dV(43)
  B(54) = RCT(36)*V(29)
! B(55) = dA(37)/dV(43)
  B(55) = RCT(37)
! B(56) = dA(38)/dV(38)
  B(56) = RCT(38)*V(43)
! B(57) = dA(38)/dV(43)
  B(57) = RCT(38)*V(38)
! B(58) = dA(39)/dV(38)
  B(58) = RCT(39)*V(47)
! B(59) = dA(39)/dV(47)
  B(59) = RCT(39)*V(38)
! B(60) = dA(40)/dV(42)
  B(60) = RCT(40)*V(45)
! B(61) = dA(40)/dV(45)
  B(61) = RCT(40)*V(42)
! B(62) = dA(41)/dV(42)
  B(62) = RCT(41)*V(46)
! B(63) = dA(41)/dV(46)
  B(63) = RCT(41)*V(42)
! B(64) = dA(42)/dV(27)
  B(64) = RCT(42)
! B(65) = dA(43)/dV(42)
  B(65) = RCT(43)*2*V(42)
! B(66) = dA(44)/dV(42)
  B(66) = RCT(44)*V(48)
! B(67) = dA(44)/dV(48)
  B(67) = RCT(44)*V(42)
! B(68) = dA(45)/dV(33)
  B(68) = RCT(45)*V(43)
! B(69) = dA(45)/dV(43)
  B(69) = RCT(45)*V(33)
! B(70) = dA(46)/dV(23)
  B(70) = RCT(46)
! B(71) = dA(47)/dV(23)
  B(71) = RCT(47)
! B(72) = dA(48)/dV(37)
  B(72) = RCT(48)*V(43)
! B(73) = dA(48)/dV(43)
  B(73) = RCT(48)*V(37)
! B(74) = dA(49)/dV(37)
  B(74) = RCT(49)*V(44)
! B(75) = dA(49)/dV(44)
  B(75) = RCT(49)*V(37)
! B(76) = dA(50)/dV(37)
  B(76) = RCT(50)*V(47)
! B(77) = dA(50)/dV(47)
  B(77) = RCT(50)*V(37)
! B(78) = dA(51)/dV(26)
  B(78) = RCT(51)*V(44)
! B(79) = dA(51)/dV(44)
  B(79) = RCT(51)*V(26)
! B(80) = dA(52)/dV(26)
  B(80) = RCT(52)*V(43)
! B(81) = dA(52)/dV(43)
  B(81) = RCT(52)*V(26)
! B(82) = dA(53)/dV(30)
  B(82) = RCT(53)*V(43)
! B(83) = dA(53)/dV(43)
  B(83) = RCT(53)*V(30)
! B(84) = dA(54)/dV(36)
  B(84) = RCT(54)*V(43)
! B(85) = dA(54)/dV(43)
  B(85) = RCT(54)*V(36)
! B(86) = dA(55)/dV(36)
  B(86) = RCT(55)*V(44)
! B(87) = dA(55)/dV(44)
  B(87) = RCT(55)*V(36)
! B(88) = dA(56)/dV(36)
  B(88) = RCT(56)*V(47)
! B(89) = dA(56)/dV(47)
  B(89) = RCT(56)*V(36)
! B(90) = dA(57)/dV(24)
  B(90) = RCT(57)*V(43)
! B(91) = dA(57)/dV(43)
  B(91) = RCT(57)*V(24)
! B(92) = dA(58)/dV(35)
  B(92) = RCT(58)*V(43)
! B(93) = dA(58)/dV(43)
  B(93) = RCT(58)*V(35)
! B(94) = dA(59)/dV(39)
  B(94) = RCT(59)*V(45)
! B(95) = dA(59)/dV(45)
  B(95) = RCT(59)*V(39)
! B(96) = dA(60)/dV(39)
  B(96) = RCT(60)*2*V(39)
! B(97) = dA(61)/dV(40)
  B(97) = RCT(61)*V(45)
! B(98) = dA(61)/dV(45)
  B(98) = RCT(61)*V(40)
! B(99) = dA(62)/dV(39)
  B(99) = RCT(62)*V(48)
! B(100) = dA(62)/dV(48)
  B(100) = RCT(62)*V(39)
! B(101) = dA(63)/dV(40)
  B(101) = RCT(63)*V(48)
! B(102) = dA(63)/dV(48)
  B(102) = RCT(63)*V(40)
! B(103) = dA(64)/dV(20)
  B(103) = RCT(64)*V(33)
! B(104) = dA(64)/dV(33)
  B(104) = RCT(64)*V(20)
! B(105) = dA(65)/dV(17)
  B(105) = RCT(65)*V(43)
! B(106) = dA(65)/dV(43)
  B(106) = RCT(65)*V(17)
! B(107) = dA(66)/dV(18)
  B(107) = RCT(66)*V(43)
! B(108) = dA(66)/dV(43)
  B(108) = RCT(66)*V(18)
! B(109) = dA(67)/dV(22)
  B(109) = RCT(67)*V(43)
! B(110) = dA(67)/dV(43)
  B(110) = RCT(67)*V(22)
! B(111) = dA(68)/dV(34)
  B(111) = RCT(68)*V(44)
! B(112) = dA(68)/dV(44)
  B(112) = RCT(68)*V(34)
! B(113) = dA(69)/dV(34)
  B(113) = RCT(69)*V(43)
! B(114) = dA(69)/dV(43)
  B(114) = RCT(69)*V(34)
! B(115) = dA(70)/dV(34)
  B(115) = RCT(70)*V(47)
! B(116) = dA(70)/dV(47)
  B(116) = RCT(70)*V(34)
! B(117) = dA(71)/dV(32)
  B(117) = RCT(71)*V(44)
! B(118) = dA(71)/dV(44)
  B(118) = RCT(71)*V(32)
! B(119) = dA(72)/dV(32)
  B(119) = RCT(72)*V(43)
! B(120) = dA(72)/dV(43)
  B(120) = RCT(72)*V(32)
! B(121) = dA(73)/dV(32)
  B(121) = RCT(73)*V(47)
! B(122) = dA(73)/dV(47)
  B(122) = RCT(73)*V(32)
! B(123) = dA(74)/dV(31)
  B(123) = RCT(74)*V(44)
! B(124) = dA(74)/dV(44)
  B(124) = RCT(74)*V(31)
! B(125) = dA(75)/dV(31)
  B(125) = RCT(75)*V(43)
! B(126) = dA(75)/dV(43)
  B(126) = RCT(75)*V(31)
! B(127) = dA(76)/dV(12)
  B(127) = RCT(76)*V(43)
! B(128) = dA(76)/dV(43)
  B(128) = RCT(76)*V(12)
! B(129) = dA(77)/dV(13)
  B(129) = RCT(77)*V(43)
! B(130) = dA(77)/dV(43)
  B(130) = RCT(77)*V(13)
! B(131) = dA(78)/dV(14)
  B(131) = RCT(78)*V(43)
! B(132) = dA(78)/dV(43)
  B(132) = RCT(78)*V(14)
! B(133) = dA(79)/dV(15)
  B(133) = RCT(79)*V(43)
! B(134) = dA(79)/dV(43)
  B(134) = RCT(79)*V(15)
! B(135) = dA(80)/dV(11)
  B(135) = RCT(80)*V(43)
! B(136) = dA(80)/dV(43)
  B(136) = RCT(80)*V(11)
! B(137) = dA(81)/dV(10)
  B(137) = RCT(81)*V(43)
! B(138) = dA(81)/dV(43)
  B(138) = RCT(81)*V(10)
! B(139) = dA(82)/dV(9)
  B(139) = RCT(82)*V(43)
! B(140) = dA(82)/dV(43)
  B(140) = RCT(82)*V(9)
! B(141) = dA(83)/dV(8)
  B(141) = RCT(83)*V(43)
! B(142) = dA(83)/dV(43)
  B(142) = RCT(83)*V(8)
! B(143) = dA(84)/dV(6)
  B(143) = RCT(84)*V(43)
! B(144) = dA(84)/dV(43)
  B(144) = RCT(84)*V(6)
! B(145) = dA(85)/dV(5)
  B(145) = RCT(85)*V(43)
! B(146) = dA(85)/dV(43)
  B(146) = RCT(85)*V(5)
! B(147) = dA(86)/dV(4)
  B(147) = RCT(86)*V(43)
! B(148) = dA(86)/dV(43)
  B(148) = RCT(86)*V(4)
! B(149) = dA(87)/dV(1)
  B(149) = RCT(87)*V(43)
! B(150) = dA(87)/dV(43)
  B(150) = RCT(87)*V(1)
! B(151) = dA(88)/dV(2)
  B(151) = RCT(88)*V(43)
! B(152) = dA(88)/dV(43)
  B(152) = RCT(88)*V(2)
! B(153) = dA(89)/dV(31)
  B(153) = RCT(89)*V(47)
! B(154) = dA(89)/dV(47)
  B(154) = RCT(89)*V(31)
! B(155) = dA(90)/dV(43)
  B(155) = RCT(90)*F(2)
! B(157) = dA(91)/dV(27)
  B(157) = RCT(91)*V(43)
! B(158) = dA(91)/dV(43)
  B(158) = RCT(91)*V(27)
! B(159) = dA(92)/dV(48)
  B(159) = RCT(92)
! B(160) = dA(93)/dV(21)
  B(160) = RCT(93)
! B(161) = dA(94)/dV(46)
  B(161) = RCT(94)
! B(162) = dA(95)/dV(47)
  B(162) = RCT(95)
! B(163) = dA(96)/dV(35)
  B(163) = RCT(96)

! Construct the Jacobian terms from B's
! JVS(1) = Jac_FULL(1,1)
  JVS(1) = -B(149)
! JVS(2) = Jac_FULL(1,43)
  JVS(2) = -B(150)
! JVS(3) = Jac_FULL(2,2)
  JVS(3) = -B(151)
! JVS(4) = Jac_FULL(2,43)
  JVS(4) = -B(152)
! JVS(5) = Jac_FULL(3,3)
  JVS(5) = 0
! JVS(6) = Jac_FULL(3,4)
  JVS(6) = B(147)
! JVS(7) = Jac_FULL(3,43)
  JVS(7) = B(148)
! JVS(8) = Jac_FULL(4,4)
  JVS(8) = -B(147)
! JVS(9) = Jac_FULL(4,5)
  JVS(9) = B(145)
! JVS(10) = Jac_FULL(4,43)
  JVS(10) = B(146)-B(148)
! JVS(11) = Jac_FULL(5,5)
  JVS(11) = -B(145)
! JVS(12) = Jac_FULL(5,6)
  JVS(12) = B(143)
! JVS(13) = Jac_FULL(5,43)
  JVS(13) = B(144)-B(146)
! JVS(14) = Jac_FULL(6,6)
  JVS(14) = -B(143)
! JVS(15) = Jac_FULL(6,43)
  JVS(15) = -B(144)
! JVS(16) = Jac_FULL(7,7)
  JVS(16) = 0
! JVS(17) = Jac_FULL(7,8)
  JVS(17) = B(141)
! JVS(18) = Jac_FULL(7,15)
  JVS(18) = 1.667*B(133)
! JVS(19) = Jac_FULL(7,43)
  JVS(19) = 1.667*B(134)+B(142)
! JVS(20) = Jac_FULL(8,8)
  JVS(20) = -B(141)
! JVS(21) = Jac_FULL(8,9)
  JVS(21) = B(139)
! JVS(22) = Jac_FULL(8,14)
  JVS(22) = 1.667*B(131)
! JVS(23) = Jac_FULL(8,43)
  JVS(23) = 1.667*B(132)+B(140)-B(142)
! JVS(24) = Jac_FULL(9,9)
  JVS(24) = -B(139)
! JVS(25) = Jac_FULL(9,10)
  JVS(25) = B(137)
! JVS(26) = Jac_FULL(9,13)
  JVS(26) = 1.667*B(129)
! JVS(27) = Jac_FULL(9,43)
  JVS(27) = 1.667*B(130)+B(138)-B(140)
! JVS(28) = Jac_FULL(10,10)
  JVS(28) = -B(137)
! JVS(29) = Jac_FULL(10,11)
  JVS(29) = B(135)
! JVS(30) = Jac_FULL(10,12)
  JVS(30) = 1.667*B(127)
! JVS(31) = Jac_FULL(10,43)
  JVS(31) = 1.667*B(128)+B(136)-B(138)
! JVS(32) = Jac_FULL(11,11)
  JVS(32) = -B(135)
! JVS(33) = Jac_FULL(11,43)
  JVS(33) = -B(136)
! JVS(34) = Jac_FULL(12,12)
  JVS(34) = -B(127)
! JVS(35) = Jac_FULL(12,43)
  JVS(35) = -B(128)
! JVS(36) = Jac_FULL(13,13)
  JVS(36) = -B(129)
! JVS(37) = Jac_FULL(13,43)
  JVS(37) = -B(130)
! JVS(38) = Jac_FULL(14,14)
  JVS(38) = -B(131)
! JVS(39) = Jac_FULL(14,43)
  JVS(39) = -B(132)
! JVS(40) = Jac_FULL(15,15)
  JVS(40) = -B(133)
! JVS(41) = Jac_FULL(15,43)
  JVS(41) = -B(134)
! JVS(42) = Jac_FULL(16,16)
  JVS(42) = 0
! JVS(43) = Jac_FULL(16,17)
  JVS(43) = B(105)
! JVS(44) = Jac_FULL(16,43)
  JVS(44) = B(106)
! JVS(45) = Jac_FULL(17,17)
  JVS(45) = -B(105)
! JVS(46) = Jac_FULL(17,43)
  JVS(46) = -B(106)
! JVS(47) = Jac_FULL(18,18)
  JVS(47) = -B(107)
! JVS(48) = Jac_FULL(18,43)
  JVS(48) = -B(108)
! JVS(49) = Jac_FULL(19,19)
  JVS(49) = -B(9)-B(21)
! JVS(50) = Jac_FULL(19,43)
  JVS(50) = -B(22)+B(26)
! JVS(51) = Jac_FULL(19,48)
  JVS(51) = B(19)+0.5*B(159)
! JVS(52) = Jac_FULL(20,20)
  JVS(52) = -B(103)
! JVS(53) = Jac_FULL(20,23)
  JVS(53) = 2.1*B(70)
! JVS(54) = Jac_FULL(20,33)
  JVS(54) = 0.11*B(68)-B(104)
! JVS(55) = Jac_FULL(20,37)
  JVS(55) = B(72)+0.9*B(74)+B(76)
! JVS(56) = Jac_FULL(20,43)
  JVS(56) = 0.11*B(69)+B(73)
! JVS(57) = Jac_FULL(20,44)
  JVS(57) = 0.9*B(75)
! JVS(58) = Jac_FULL(20,47)
  JVS(58) = B(77)
! JVS(59) = Jac_FULL(21,21)
  JVS(59) = -B(3)-B(37)-B(160)
! JVS(60) = Jac_FULL(21,46)
  JVS(60) = B(35)
! JVS(61) = Jac_FULL(21,47)
  JVS(61) = B(36)
! JVS(62) = Jac_FULL(22,22)
  JVS(62) = -B(109)
! JVS(63) = Jac_FULL(22,43)
  JVS(63) = -B(110)
! JVS(64) = Jac_FULL(23,23)
  JVS(64) = -B(70)-B(71)
! JVS(65) = Jac_FULL(23,33)
  JVS(65) = 0.76*B(68)
! JVS(66) = Jac_FULL(23,43)
  JVS(66) = 0.76*B(69)
! JVS(67) = Jac_FULL(24,24)
  JVS(67) = -B(13)-B(90)
! JVS(68) = Jac_FULL(24,39)
  JVS(68) = B(99)
! JVS(69) = Jac_FULL(24,40)
  JVS(69) = B(101)
! JVS(70) = Jac_FULL(24,42)
  JVS(70) = 0.21*B(66)
! JVS(71) = Jac_FULL(24,43)
  JVS(71) = -B(91)
! JVS(72) = Jac_FULL(24,48)
  JVS(72) = 0.21*B(67)+B(100)+B(102)
! JVS(73) = Jac_FULL(25,25)
  JVS(73) = -B(6)-B(46)-B(48)
! JVS(74) = Jac_FULL(25,43)
  JVS(74) = -B(47)
! JVS(75) = Jac_FULL(25,46)
  JVS(75) = B(44)
! JVS(76) = Jac_FULL(25,48)
  JVS(76) = B(45)
! JVS(77) = Jac_FULL(26,26)
  JVS(77) = -B(78)-B(80)
! JVS(78) = Jac_FULL(26,43)
  JVS(78) = -B(81)
! JVS(79) = Jac_FULL(26,44)
  JVS(79) = -B(79)
! JVS(80) = Jac_FULL(27,27)
  JVS(80) = -B(12)-B(64)-B(157)
! JVS(81) = Jac_FULL(27,42)
  JVS(81) = B(62)
! JVS(82) = Jac_FULL(27,43)
  JVS(82) = -B(158)
! JVS(83) = Jac_FULL(27,46)
  JVS(83) = B(63)
! JVS(84) = Jac_FULL(28,21)
  JVS(84) = 2*B(160)
! JVS(85) = Jac_FULL(28,28)
  JVS(85) = -B(4)-B(40)
! JVS(86) = Jac_FULL(28,35)
  JVS(86) = B(163)
! JVS(87) = Jac_FULL(28,38)
  JVS(87) = B(58)
! JVS(88) = Jac_FULL(28,41)
  JVS(88) = B(49)
! JVS(89) = Jac_FULL(28,43)
  JVS(89) = B(38)-B(41)
! JVS(90) = Jac_FULL(28,46)
  JVS(90) = B(39)+0.5*B(161)
! JVS(91) = Jac_FULL(28,47)
  JVS(91) = B(50)+B(59)+B(162)
! JVS(92) = Jac_FULL(29,22)
  JVS(92) = 0.4*B(109)
! JVS(93) = Jac_FULL(29,26)
  JVS(93) = 0.43*B(78)
! JVS(94) = Jac_FULL(29,29)
  JVS(94) = -B(53)
! JVS(95) = Jac_FULL(29,30)
  JVS(95) = B(11)
! JVS(96) = Jac_FULL(29,31)
  JVS(96) = 0.635*B(123)
! JVS(97) = Jac_FULL(29,34)
  JVS(97) = 0.001*B(111)
! JVS(98) = Jac_FULL(29,36)
  JVS(98) = 0.36*B(86)
! JVS(99) = Jac_FULL(29,37)
  JVS(99) = 0.37*B(74)
! JVS(100) = Jac_FULL(29,38)
  JVS(100) = B(10)
! JVS(101) = Jac_FULL(29,41)
  JVS(101) = B(7)+B(8)+B(49)+B(51)
! JVS(102) = Jac_FULL(29,43)
  JVS(102) = B(52)-B(54)+0.4*B(110)
! JVS(103) = Jac_FULL(29,44)
  JVS(103) = 0.37*B(75)+0.43*B(79)+0.36*B(87)+0.001*B(112)+0.635*B(124)
! JVS(104) = Jac_FULL(29,47)
  JVS(104) = B(50)
! JVS(105) = Jac_FULL(30,22)
  JVS(105) = 0.85*B(109)
! JVS(106) = Jac_FULL(30,30)
  JVS(106) = -B(11)-B(82)
! JVS(107) = Jac_FULL(30,32)
  JVS(107) = 0.027*B(121)
! JVS(108) = Jac_FULL(30,36)
  JVS(108) = 0.03*B(84)+0.03*B(86)+0.08*B(88)
! JVS(109) = Jac_FULL(30,43)
  JVS(109) = -B(83)+0.03*B(85)+0.85*B(110)
! JVS(110) = Jac_FULL(30,44)
  JVS(110) = 0.03*B(87)
! JVS(111) = Jac_FULL(30,47)
  JVS(111) = 0.08*B(89)+0.027*B(122)
! JVS(112) = Jac_FULL(31,31)
  JVS(112) = -B(123)-B(125)-B(153)
! JVS(113) = Jac_FULL(31,43)
  JVS(113) = -B(126)
! JVS(114) = Jac_FULL(31,44)
  JVS(114) = -B(124)
! JVS(115) = Jac_FULL(31,47)
  JVS(115) = -B(154)
! JVS(116) = Jac_FULL(32,32)
  JVS(116) = -B(117)-B(119)-B(121)
! JVS(117) = Jac_FULL(32,43)
  JVS(117) = -B(120)
! JVS(118) = Jac_FULL(32,44)
  JVS(118) = -B(118)
! JVS(119) = Jac_FULL(32,47)
  JVS(119) = -B(122)
! JVS(120) = Jac_FULL(33,20)
  JVS(120) = -B(103)
! JVS(121) = Jac_FULL(33,23)
  JVS(121) = 0
! JVS(122) = Jac_FULL(33,31)
  JVS(122) = 0.085*B(123)+0.185*B(125)
! JVS(123) = Jac_FULL(33,32)
  JVS(123) = 0.21*B(117)+0.324*B(119)
! JVS(124) = Jac_FULL(33,33)
  JVS(124) = -B(68)-B(104)
! JVS(125) = Jac_FULL(33,34)
  JVS(125) = 7*B(111)+1.66*B(113)
! JVS(126) = Jac_FULL(33,36)
  JVS(126) = 0.63*B(84)+0.63*B(86)
! JVS(127) = Jac_FULL(33,37)
  JVS(127) = 0
! JVS(128) = Jac_FULL(33,43)
  JVS(128) = -B(69)+0.63*B(85)+1.66*B(114)+0.324*B(120)+0.185*B(126)
! JVS(129) = Jac_FULL(33,44)
  JVS(129) = 0.63*B(87)+7*B(112)+0.21*B(118)+0.085*B(124)
! JVS(130) = Jac_FULL(33,47)
  JVS(130) = 0
! JVS(131) = Jac_FULL(34,34)
  JVS(131) = -B(111)-B(113)-B(115)
! JVS(132) = Jac_FULL(34,43)
  JVS(132) = -B(114)
! JVS(133) = Jac_FULL(34,44)
  JVS(133) = -B(112)
! JVS(134) = Jac_FULL(34,47)
  JVS(134) = -B(116)
! JVS(135) = Jac_FULL(35,31)
  JVS(135) = B(153)
! JVS(136) = Jac_FULL(35,34)
  JVS(136) = 0.53*B(115)
! JVS(137) = Jac_FULL(35,35)
  JVS(137) = -B(14)-B(92)-B(163)
! JVS(138) = Jac_FULL(35,36)
  JVS(138) = 0.9*B(88)
! JVS(139) = Jac_FULL(35,40)
  JVS(139) = B(97)
! JVS(140) = Jac_FULL(35,43)
  JVS(140) = -B(93)
! JVS(141) = Jac_FULL(35,44)
  JVS(141) = 0
! JVS(142) = Jac_FULL(35,45)
  JVS(142) = B(98)
! JVS(143) = Jac_FULL(35,47)
  JVS(143) = 0.9*B(89)+0.53*B(116)+B(154)
! JVS(144) = Jac_FULL(36,36)
  JVS(144) = -B(84)-B(86)-B(88)
! JVS(145) = Jac_FULL(36,43)
  JVS(145) = -B(85)
! JVS(146) = Jac_FULL(36,44)
  JVS(146) = -B(87)
! JVS(147) = Jac_FULL(36,47)
  JVS(147) = -B(89)
! JVS(148) = Jac_FULL(37,32)
  JVS(148) = 0.522*B(121)
! JVS(149) = Jac_FULL(37,36)
  JVS(149) = 0.58*B(84)+0.55*B(86)+0.45*B(88)
! JVS(150) = Jac_FULL(37,37)
  JVS(150) = -B(72)-B(74)-B(76)
! JVS(151) = Jac_FULL(37,43)
  JVS(151) = -B(73)+0.58*B(85)
! JVS(152) = Jac_FULL(37,44)
  JVS(152) = -B(75)+0.55*B(87)
! JVS(153) = Jac_FULL(37,47)
  JVS(153) = -B(77)+0.45*B(89)+0.522*B(122)
! JVS(154) = Jac_FULL(38,23)
  JVS(154) = 1.1*B(70)
! JVS(155) = Jac_FULL(38,26)
  JVS(155) = 0.22*B(80)
! JVS(156) = Jac_FULL(38,31)
  JVS(156) = 0.935*B(125)
! JVS(157) = Jac_FULL(38,32)
  JVS(157) = 0.85*B(117)
! JVS(158) = Jac_FULL(38,33)
  JVS(158) = 0.11*B(68)
! JVS(159) = Jac_FULL(38,34)
  JVS(159) = 0.21*B(111)+0.47*B(113)+0.47*B(115)
! JVS(160) = Jac_FULL(38,36)
  JVS(160) = 0.12*B(88)
! JVS(161) = Jac_FULL(38,37)
  JVS(161) = B(72)+0.44*B(74)+B(76)
! JVS(162) = Jac_FULL(38,38)
  JVS(162) = -B(10)-B(56)-B(58)
! JVS(163) = Jac_FULL(38,43)
  JVS(163) = -B(57)+0.11*B(69)+B(73)+0.22*B(81)+0.47*B(114)+0.935*B(126)
! JVS(164) = Jac_FULL(38,44)
  JVS(164) = 0.44*B(75)+0.21*B(112)+0.85*B(118)
! JVS(165) = Jac_FULL(38,47)
  JVS(165) = -B(59)+B(77)+0.12*B(89)+0.47*B(116)
! JVS(166) = Jac_FULL(39,22)
  JVS(166) = 0.6*B(109)
! JVS(167) = Jac_FULL(39,23)
  JVS(167) = 0.96*B(70)
! JVS(168) = Jac_FULL(39,24)
  JVS(168) = 0.7*B(90)
! JVS(169) = Jac_FULL(39,26)
  JVS(169) = B(80)
! JVS(170) = Jac_FULL(39,30)
  JVS(170) = B(82)
! JVS(171) = Jac_FULL(39,31)
  JVS(171) = 0.935*B(125)
! JVS(172) = Jac_FULL(39,32)
  JVS(172) = 0.19*B(119)
! JVS(173) = Jac_FULL(39,33)
  JVS(173) = 0.87*B(68)
! JVS(174) = Jac_FULL(39,34)
  JVS(174) = 0.76*B(111)+1.25*B(113)+1.03*B(115)
! JVS(175) = Jac_FULL(39,35)
  JVS(175) = B(92)
! JVS(176) = Jac_FULL(39,36)
  JVS(176) = 0.85*B(84)+0.18*B(86)
! JVS(177) = Jac_FULL(39,37)
  JVS(177) = B(72)+0.29*B(74)+0.91*B(76)
! JVS(178) = Jac_FULL(39,38)
  JVS(178) = B(10)
! JVS(179) = Jac_FULL(39,39)
  JVS(179) = -B(94)-2*B(96)-B(99)
! JVS(180) = Jac_FULL(39,40)
  JVS(180) = 0
! JVS(181) = Jac_FULL(39,42)
  JVS(181) = B(60)+2*B(65)+B(66)
! JVS(182) = Jac_FULL(39,43)
  JVS(182) = B(55)+0.87*B(69)+B(73)+B(81)+B(83)+0.85*B(85)+0.7*B(91)+B(93)+0.6*B(110)+1.25*B(114)+0.19*B(120)+0.935&
               &*B(126)
! JVS(183) = Jac_FULL(39,44)
  JVS(183) = 0.29*B(75)+0.18*B(87)+0.76*B(112)
! JVS(184) = Jac_FULL(39,45)
  JVS(184) = B(61)-B(95)
! JVS(185) = Jac_FULL(39,47)
  JVS(185) = 0.91*B(77)+1.03*B(116)
! JVS(186) = Jac_FULL(39,48)
  JVS(186) = B(67)-B(100)
! JVS(187) = Jac_FULL(40,22)
  JVS(187) = 0.2*B(109)
! JVS(188) = Jac_FULL(40,31)
  JVS(188) = 0.065*B(125)
! JVS(189) = Jac_FULL(40,32)
  JVS(189) = B(121)
! JVS(190) = Jac_FULL(40,33)
  JVS(190) = 0.13*B(68)
! JVS(191) = Jac_FULL(40,34)
  JVS(191) = 0.18*B(111)+0.25*B(113)+0.25*B(115)
! JVS(192) = Jac_FULL(40,36)
  JVS(192) = 0.15*B(84)
! JVS(193) = Jac_FULL(40,37)
  JVS(193) = 0.09*B(76)
! JVS(194) = Jac_FULL(40,40)
  JVS(194) = -B(97)-B(101)
! JVS(195) = Jac_FULL(40,43)
  JVS(195) = 0.13*B(69)+0.15*B(85)+0.2*B(110)+0.25*B(114)+0.065*B(126)
! JVS(196) = Jac_FULL(40,44)
  JVS(196) = 0.18*B(112)
! JVS(197) = Jac_FULL(40,45)
  JVS(197) = -B(98)
! JVS(198) = Jac_FULL(40,47)
  JVS(198) = 0.09*B(77)+0.25*B(116)+B(122)
! JVS(199) = Jac_FULL(40,48)
  JVS(199) = -B(102)
! JVS(200) = Jac_FULL(41,26)
  JVS(200) = B(78)+1.56*B(80)
! JVS(201) = Jac_FULL(41,27)
  JVS(201) = B(157)
! JVS(202) = Jac_FULL(41,31)
  JVS(202) = 0.311*B(125)
! JVS(203) = Jac_FULL(41,32)
  JVS(203) = 0.51*B(117)+0.3*B(119)
! JVS(204) = Jac_FULL(41,34)
  JVS(204) = 0.24*B(111)+0.28*B(113)
! JVS(205) = Jac_FULL(41,36)
  JVS(205) = 0.61*B(84)+0.9*B(86)+0.03*B(88)
! JVS(206) = Jac_FULL(41,37)
  JVS(206) = B(72)+0.64*B(74)+B(76)
! JVS(207) = Jac_FULL(41,38)
  JVS(207) = B(10)
! JVS(208) = Jac_FULL(41,41)
  JVS(208) = -B(7)-B(8)-B(49)-B(51)
! JVS(209) = Jac_FULL(41,42)
  JVS(209) = B(60)+2*B(65)+B(66)
! JVS(210) = Jac_FULL(41,43)
  JVS(210) = -B(52)+B(55)+B(73)+1.56*B(81)+0.61*B(85)+0.28*B(114)+0.3*B(120)+0.311*B(126)+B(158)
! JVS(211) = Jac_FULL(41,44)
  JVS(211) = 0.64*B(75)+B(79)+0.9*B(87)+0.24*B(112)+0.51*B(118)
! JVS(212) = Jac_FULL(41,45)
  JVS(212) = B(61)
! JVS(213) = Jac_FULL(41,46)
  JVS(213) = 0
! JVS(214) = Jac_FULL(41,47)
  JVS(214) = -B(50)+B(77)+0.03*B(89)
! JVS(215) = Jac_FULL(41,48)
  JVS(215) = B(67)
! JVS(216) = Jac_FULL(42,22)
  JVS(216) = 0.1*B(109)
! JVS(217) = Jac_FULL(42,27)
  JVS(217) = B(12)+B(64)
! JVS(218) = Jac_FULL(42,30)
  JVS(218) = B(11)+B(82)
! JVS(219) = Jac_FULL(42,32)
  JVS(219) = 0
! JVS(220) = Jac_FULL(42,34)
  JVS(220) = 0.39*B(111)
! JVS(221) = Jac_FULL(42,36)
  JVS(221) = 0.15*B(86)
! JVS(222) = Jac_FULL(42,38)
  JVS(222) = 0.5*B(56)+B(58)
! JVS(223) = Jac_FULL(42,42)
  JVS(223) = -B(60)-B(62)-2*B(65)-B(66)
! JVS(224) = Jac_FULL(42,43)
  JVS(224) = 0.5*B(57)+B(83)+0.1*B(110)
! JVS(225) = Jac_FULL(42,44)
  JVS(225) = 0.15*B(87)+0.39*B(112)
! JVS(226) = Jac_FULL(42,45)
  JVS(226) = -B(61)
! JVS(227) = Jac_FULL(42,46)
  JVS(227) = -B(63)
! JVS(228) = Jac_FULL(42,47)
  JVS(228) = B(59)
! JVS(229) = Jac_FULL(42,48)
  JVS(229) = -B(67)
! JVS(230) = Jac_FULL(43,17)
  JVS(230) = -B(105)
! JVS(231) = Jac_FULL(43,18)
  JVS(231) = -B(107)
! JVS(232) = Jac_FULL(43,19)
  JVS(232) = 2*B(9)-B(21)
! JVS(233) = Jac_FULL(43,22)
  JVS(233) = -B(109)
! JVS(234) = Jac_FULL(43,24)
  JVS(234) = B(13)-0.7*B(90)
! JVS(235) = Jac_FULL(43,25)
  JVS(235) = 0.33*B(6)-B(46)
! JVS(236) = Jac_FULL(43,26)
  JVS(236) = 0.12*B(78)-B(80)
! JVS(237) = Jac_FULL(43,27)
  JVS(237) = -B(157)
! JVS(238) = Jac_FULL(43,28)
  JVS(238) = B(4)-B(40)
! JVS(239) = Jac_FULL(43,29)
  JVS(239) = -B(53)
! JVS(240) = Jac_FULL(43,30)
  JVS(240) = -B(82)
! JVS(241) = Jac_FULL(43,31)
  JVS(241) = 0.369*B(123)-B(125)
! JVS(242) = Jac_FULL(43,32)
  JVS(242) = 0.63*B(117)-B(119)
! JVS(243) = Jac_FULL(43,33)
  JVS(243) = -B(68)
! JVS(244) = Jac_FULL(43,34)
  JVS(244) = 0.57*B(111)-B(113)
! JVS(245) = Jac_FULL(43,35)
  JVS(245) = -B(92)
! JVS(246) = Jac_FULL(43,36)
  JVS(246) = -B(84)+0.28*B(86)
! JVS(247) = Jac_FULL(43,37)
  JVS(247) = -B(72)+0.4*B(74)
! JVS(248) = Jac_FULL(43,38)
  JVS(248) = -B(56)
! JVS(249) = Jac_FULL(43,39)
  JVS(249) = 0
! JVS(250) = Jac_FULL(43,40)
  JVS(250) = 0
! JVS(251) = Jac_FULL(43,41)
  JVS(251) = -B(51)
! JVS(252) = Jac_FULL(43,42)
  JVS(252) = 0.79*B(66)
! JVS(253) = Jac_FULL(43,43)
  JVS(253) = -B(15)-B(22)-B(23)-2*B(25)-2*B(26)-B(38)-B(41)-B(47)-B(52)-B(54)-B(55)-B(57)-B(69)-B(73)-B(81)-B(83)-B(85)&
               &-0.7*B(91)-B(93)-B(106)-B(108)-B(110)-B(114)-B(120)-B(126)-B(155)-B(158)
! JVS(254) = Jac_FULL(43,44)
  JVS(254) = 2*B(1)-B(16)+B(17)+0.4*B(75)+0.12*B(79)+0.28*B(87)+0.57*B(112)+0.63*B(118)+0.369*B(124)
! JVS(255) = Jac_FULL(43,45)
  JVS(255) = B(27)
! JVS(256) = Jac_FULL(43,46)
  JVS(256) = -B(39)+0.5*B(161)
! JVS(257) = Jac_FULL(43,47)
  JVS(257) = B(33)
! JVS(258) = Jac_FULL(43,48)
  JVS(258) = B(18)-B(24)+B(28)+B(34)+0.79*B(67)
! JVS(259) = Jac_FULL(44,26)
  JVS(259) = -B(78)
! JVS(260) = Jac_FULL(44,31)
  JVS(260) = -B(123)
! JVS(261) = Jac_FULL(44,32)
  JVS(261) = -B(117)
! JVS(262) = Jac_FULL(44,34)
  JVS(262) = -B(111)
! JVS(263) = Jac_FULL(44,36)
  JVS(263) = -B(86)
! JVS(264) = Jac_FULL(44,37)
  JVS(264) = -B(74)
! JVS(265) = Jac_FULL(44,43)
  JVS(265) = -B(15)+B(25)
! JVS(266) = Jac_FULL(44,44)
  JVS(266) = -B(1)-B(16)-B(17)-B(29)-B(31)-B(75)-B(79)-B(87)-B(112)-B(118)-B(124)
! JVS(267) = Jac_FULL(44,45)
  JVS(267) = -B(30)
! JVS(268) = Jac_FULL(44,46)
  JVS(268) = B(2)-B(32)
! JVS(269) = Jac_FULL(44,47)
  JVS(269) = 0.89*B(5)
! JVS(270) = Jac_FULL(44,48)
  JVS(270) = -B(18)
! JVS(271) = Jac_FULL(45,39)
  JVS(271) = -B(94)
! JVS(272) = Jac_FULL(45,40)
  JVS(272) = -B(97)
! JVS(273) = Jac_FULL(45,42)
  JVS(273) = -B(60)
! JVS(274) = Jac_FULL(45,43)
  JVS(274) = 0
! JVS(275) = Jac_FULL(45,44)
  JVS(275) = -B(29)
! JVS(276) = Jac_FULL(45,45)
  JVS(276) = -B(27)-B(30)-B(42)-B(61)-B(95)-B(98)
! JVS(277) = Jac_FULL(45,46)
  JVS(277) = B(2)+0.5*B(161)
! JVS(278) = Jac_FULL(45,47)
  JVS(278) = 0.11*B(5)-B(43)
! JVS(279) = Jac_FULL(45,48)
  JVS(279) = -B(28)
! JVS(280) = Jac_FULL(46,21)
  JVS(280) = B(3)+B(37)
! JVS(281) = Jac_FULL(46,25)
  JVS(281) = 0.66*B(6)+B(46)+B(48)
! JVS(282) = Jac_FULL(46,27)
  JVS(282) = B(12)+B(64)
! JVS(283) = Jac_FULL(46,28)
  JVS(283) = B(4)
! JVS(284) = Jac_FULL(46,34)
  JVS(284) = 0.47*B(115)
! JVS(285) = Jac_FULL(46,35)
  JVS(285) = B(14)+B(92)
! JVS(286) = Jac_FULL(46,36)
  JVS(286) = 0.1*B(88)
! JVS(287) = Jac_FULL(46,37)
  JVS(287) = B(76)
! JVS(288) = Jac_FULL(46,38)
  JVS(288) = 0
! JVS(289) = Jac_FULL(46,39)
  JVS(289) = B(94)
! JVS(290) = Jac_FULL(46,40)
  JVS(290) = 0
! JVS(291) = Jac_FULL(46,41)
  JVS(291) = 0
! JVS(292) = Jac_FULL(46,42)
  JVS(292) = B(60)-B(62)
! JVS(293) = Jac_FULL(46,43)
  JVS(293) = -B(38)+B(47)+B(93)
! JVS(294) = Jac_FULL(46,44)
  JVS(294) = B(29)-B(31)
! JVS(295) = Jac_FULL(46,45)
  JVS(295) = B(27)+B(30)+2*B(42)+B(61)+B(95)
! JVS(296) = Jac_FULL(46,46)
  JVS(296) = -B(2)-B(32)-B(35)-B(39)-B(44)-B(63)-B(161)
! JVS(297) = Jac_FULL(46,47)
  JVS(297) = 0.89*B(5)+B(33)-B(36)+2*B(43)+B(77)+0.1*B(89)+0.47*B(116)
! JVS(298) = Jac_FULL(46,48)
  JVS(298) = B(28)+B(34)-B(45)
! JVS(299) = Jac_FULL(47,21)
  JVS(299) = B(3)+B(37)
! JVS(300) = Jac_FULL(47,25)
  JVS(300) = 0.33*B(6)
! JVS(301) = Jac_FULL(47,27)
  JVS(301) = B(157)
! JVS(302) = Jac_FULL(47,28)
  JVS(302) = B(40)
! JVS(303) = Jac_FULL(47,31)
  JVS(303) = -B(153)
! JVS(304) = Jac_FULL(47,32)
  JVS(304) = -B(121)
! JVS(305) = Jac_FULL(47,34)
  JVS(305) = -B(115)
! JVS(306) = Jac_FULL(47,35)
  JVS(306) = 0
! JVS(307) = Jac_FULL(47,36)
  JVS(307) = -B(88)
! JVS(308) = Jac_FULL(47,37)
  JVS(308) = -B(76)
! JVS(309) = Jac_FULL(47,38)
  JVS(309) = -B(58)
! JVS(310) = Jac_FULL(47,40)
  JVS(310) = 0
! JVS(311) = Jac_FULL(47,41)
  JVS(311) = -B(49)
! JVS(312) = Jac_FULL(47,42)
  JVS(312) = 0
! JVS(313) = Jac_FULL(47,43)
  JVS(313) = B(41)+B(158)
! JVS(314) = Jac_FULL(47,44)
  JVS(314) = B(31)
! JVS(315) = Jac_FULL(47,45)
  JVS(315) = -B(42)
! JVS(316) = Jac_FULL(47,46)
  JVS(316) = B(32)-B(35)
! JVS(317) = Jac_FULL(47,47)
  JVS(317) = -B(5)-B(33)-B(36)-B(43)-B(50)-B(59)-B(77)-B(89)-B(116)-B(122)-B(154)-B(162)
! JVS(318) = Jac_FULL(47,48)
  JVS(318) = -B(34)
! JVS(319) = Jac_FULL(48,19)
  JVS(319) = B(21)
! JVS(320) = Jac_FULL(48,22)
  JVS(320) = 0.6*B(109)
! JVS(321) = Jac_FULL(48,23)
  JVS(321) = 0.94*B(70)+B(71)
! JVS(322) = Jac_FULL(48,25)
  JVS(322) = 0.66*B(6)+B(48)
! JVS(323) = Jac_FULL(48,26)
  JVS(323) = 0.26*B(78)+B(80)
! JVS(324) = Jac_FULL(48,29)
  JVS(324) = B(53)
! JVS(325) = Jac_FULL(48,30)
  JVS(325) = B(11)
! JVS(326) = Jac_FULL(48,31)
  JVS(326) = 0.084*B(123)
! JVS(327) = Jac_FULL(48,32)
  JVS(327) = 0
! JVS(328) = Jac_FULL(48,33)
  JVS(328) = 0.11*B(68)
! JVS(329) = Jac_FULL(48,34)
  JVS(329) = 0.07*B(111)+0.75*B(113)+0.28*B(115)
! JVS(330) = Jac_FULL(48,35)
  JVS(330) = B(14)
! JVS(331) = Jac_FULL(48,36)
  JVS(331) = 0.85*B(84)+0.3*B(86)+0.9*B(88)
! JVS(332) = Jac_FULL(48,37)
  JVS(332) = B(72)+0.25*B(74)
! JVS(333) = Jac_FULL(48,38)
  JVS(333) = 2*B(10)+0.5*B(56)
! JVS(334) = Jac_FULL(48,39)
  JVS(334) = -B(99)
! JVS(335) = Jac_FULL(48,40)
  JVS(335) = -B(101)
! JVS(336) = Jac_FULL(48,41)
  JVS(336) = 2*B(7)+B(49)+B(51)
! JVS(337) = Jac_FULL(48,42)
  JVS(337) = B(60)+2*B(65)
! JVS(338) = Jac_FULL(48,43)
  JVS(338) = B(15)+B(22)-B(23)+B(52)+B(54)+B(55)+0.5*B(57)+0.11*B(69)+B(73)+B(81)+0.85*B(85)+0.6*B(110)+0.75*B(114)&
               &+B(155)
! JVS(339) = Jac_FULL(48,44)
  JVS(339) = B(16)-B(17)+0.25*B(75)+0.26*B(79)+0.3*B(87)+0.07*B(112)+0.084*B(124)
! JVS(340) = Jac_FULL(48,45)
  JVS(340) = -B(27)+B(61)
! JVS(341) = Jac_FULL(48,46)
  JVS(341) = -B(44)
! JVS(342) = Jac_FULL(48,47)
  JVS(342) = -B(33)+B(50)+0.9*B(89)+0.28*B(116)
! JVS(343) = Jac_FULL(48,48)
  JVS(343) = -B(18)-2*B(19)-B(24)-B(28)-B(34)-B(45)-B(100)-B(102)-B(159)
      
END SUBROUTINE redhc_made_soa_vbs_aq_Jac_SP

! End of redhc_made_soa_vbs_aq_Jac_SP function
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! 
! SPARSE_UTIL - SPARSE utility functions
!   Arguments :
! 
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUBROUTINE redhc_made_soa_vbs_aq_KppDecomp( JVS, IER )
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!        Sparse LU factorization
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!  USE redhc_made_soa_vbs_aq_Parameters
!  USE redhc_made_soa_vbs_aq_JacobianSP

      INTEGER  :: IER
      REAL(kind=dp) :: JVS(343), W(48), a
      INTEGER  :: k, kk, j, jj

      a = 0. ! mz_rs_20050606
      IER = 0
      DO k=1,NVAR
        ! mz_rs_20050606: don't check if real value == 0
        ! IF ( JVS( LU_DIAG(k) ) .EQ. 0. ) THEN
        IF ( ABS(JVS(LU_DIAG(k))) < TINY(a) ) THEN
            IER = k
            RETURN
        END IF
        DO kk = LU_CROW(k), LU_CROW(k+1)-1
              W( LU_ICOL(kk) ) = JVS(kk)
        END DO
        DO kk = LU_CROW(k), LU_DIAG(k)-1
            j = LU_ICOL(kk)
            a = -W(j) / JVS( LU_DIAG(j) )
            W(j) = -a
            DO jj = LU_DIAG(j)+1, LU_CROW(j+1)-1
               W( LU_ICOL(jj) ) = W( LU_ICOL(jj) ) + a*JVS(jj)
            END DO
         END DO
         DO kk = LU_CROW(k), LU_CROW(k+1)-1
            JVS(kk) = W( LU_ICOL(kk) )
         END DO
      END DO
      
END SUBROUTINE redhc_made_soa_vbs_aq_KppDecomp


! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUBROUTINE redhc_made_soa_vbs_aq_KppDecompCmplx( JVS, IER )
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!        Sparse LU factorization, complex
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!  USE redhc_made_soa_vbs_aq_Parameters
!  USE redhc_made_soa_vbs_aq_JacobianSP

      INTEGER  :: IER
      DOUBLE COMPLEX :: JVS(343), W(48), a
      INTEGER  :: k, kk, j, jj

      IER = 0
      DO k=1,NVAR
        IF ( JVS( LU_DIAG(k) ) .EQ. 0. ) THEN
            IER = k
            RETURN
        END IF
        DO kk = LU_CROW(k), LU_CROW(k+1)-1
              W( LU_ICOL(kk) ) = JVS(kk)
        END DO
        DO kk = LU_CROW(k), LU_DIAG(k)-1
            j = LU_ICOL(kk)
            a = -W(j) / JVS( LU_DIAG(j) )
            W(j) = -a
            DO jj = LU_DIAG(j)+1, LU_CROW(j+1)-1
               W( LU_ICOL(jj) ) = W( LU_ICOL(jj) ) + a*JVS(jj)
            END DO
         END DO
         DO kk = LU_CROW(k), LU_CROW(k+1)-1
            JVS(kk) = W( LU_ICOL(kk) )
         END DO
      END DO
      
END SUBROUTINE redhc_made_soa_vbs_aq_KppDecompCmplx

! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUBROUTINE redhc_made_soa_vbs_aq_KppSolveIndirect( JVS, X )
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!        Sparse solve subroutine using indirect addressing
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!  USE redhc_made_soa_vbs_aq_Parameters
!  USE redhc_made_soa_vbs_aq_JacobianSP

      INTEGER i, j
      REAL(kind=dp) JVS(343), X(48), sum

      DO i=1,NVAR
         DO j = LU_CROW(i), LU_DIAG(i)-1 
             X(i) = X(i) - JVS(j)*X(LU_ICOL(j));
         END DO  
      END DO

      DO i=NVAR,1,-1
        sum = X(i);
        DO j = LU_DIAG(i)+1, LU_CROW(i+1)-1
          sum = sum - JVS(j)*X(LU_ICOL(j));
        END DO
        X(i) = sum/JVS(LU_DIAG(i));
      END DO
      
END SUBROUTINE redhc_made_soa_vbs_aq_KppSolveIndirect

! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUBROUTINE redhc_made_soa_vbs_aq_KppSolveCmplx( JVS, X )
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!        Complex sparse solve subroutine using indirect addressing
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!  USE redhc_made_soa_vbs_aq_Parameters
!  USE redhc_made_soa_vbs_aq_JacobianSP

      INTEGER i, j
      DOUBLE COMPLEX JVS(343), X(48), sum

      DO i=1,NVAR
         DO j = LU_CROW(i), LU_DIAG(i)-1 
             X(i) = X(i) - JVS(j)*X(LU_ICOL(j));
         END DO  
      END DO

      DO i=NVAR,1,-1
        sum = X(i);
        DO j = LU_DIAG(i)+1, LU_CROW(i+1)-1
          sum = sum - JVS(j)*X(LU_ICOL(j));
        END DO
        X(i) = sum/JVS(LU_DIAG(i));
      END DO
      
END SUBROUTINE redhc_made_soa_vbs_aq_KppSolveCmplx
! End of SPARSE_UTIL function
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! 
! redhc_made_soa_vbs_aq_KppSolve - sparse back substitution
!   Arguments :
!      JVS       - sparse Jacobian of variables
!      X         - Vector for variables
! 
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SUBROUTINE redhc_made_soa_vbs_aq_KppSolve ( JVS, X )

! JVS - sparse Jacobian of variables
  REAL(kind=dp) :: JVS(LU_NONZERO)
! X - Vector for variables
  REAL(kind=dp) :: X(NVAR)

  X(28) = X(28)-JVS(84)*X(21)
  X(29) = X(29)-JVS(92)*X(22)-JVS(93)*X(26)
  X(30) = X(30)-JVS(105)*X(22)
  X(33) = X(33)-JVS(120)*X(20)-JVS(121)*X(23)-JVS(122)*X(31)-JVS(123)*X(32)
  X(35) = X(35)-JVS(135)*X(31)-JVS(136)*X(34)
  X(37) = X(37)-JVS(148)*X(32)-JVS(149)*X(36)
  X(38) = X(38)-JVS(154)*X(23)-JVS(155)*X(26)-JVS(156)*X(31)-JVS(157)*X(32)-JVS(158)*X(33)-JVS(159)*X(34)-JVS(160)*X(36)&
            &-JVS(161)*X(37)
  X(39) = X(39)-JVS(166)*X(22)-JVS(167)*X(23)-JVS(168)*X(24)-JVS(169)*X(26)-JVS(170)*X(30)-JVS(171)*X(31)-JVS(172)*X(32)&
            &-JVS(173)*X(33)-JVS(174)*X(34)-JVS(175)*X(35)-JVS(176)*X(36)-JVS(177)*X(37)-JVS(178)*X(38)
  X(40) = X(40)-JVS(187)*X(22)-JVS(188)*X(31)-JVS(189)*X(32)-JVS(190)*X(33)-JVS(191)*X(34)-JVS(192)*X(36)-JVS(193)*X(37)
  X(41) = X(41)-JVS(200)*X(26)-JVS(201)*X(27)-JVS(202)*X(31)-JVS(203)*X(32)-JVS(204)*X(34)-JVS(205)*X(36)-JVS(206)*X(37)&
            &-JVS(207)*X(38)
  X(42) = X(42)-JVS(216)*X(22)-JVS(217)*X(27)-JVS(218)*X(30)-JVS(219)*X(32)-JVS(220)*X(34)-JVS(221)*X(36)-JVS(222)*X(38)
  X(43) = X(43)-JVS(230)*X(17)-JVS(231)*X(18)-JVS(232)*X(19)-JVS(233)*X(22)-JVS(234)*X(24)-JVS(235)*X(25)-JVS(236)*X(26)&
            &-JVS(237)*X(27)-JVS(238)*X(28)-JVS(239)*X(29)-JVS(240)*X(30)-JVS(241)*X(31)-JVS(242)*X(32)-JVS(243)*X(33)&
            &-JVS(244)*X(34)-JVS(245)*X(35)-JVS(246)*X(36)-JVS(247)*X(37)-JVS(248)*X(38)-JVS(249)*X(39)-JVS(250)*X(40)&
            &-JVS(251)*X(41)-JVS(252)*X(42)
  X(44) = X(44)-JVS(259)*X(26)-JVS(260)*X(31)-JVS(261)*X(32)-JVS(262)*X(34)-JVS(263)*X(36)-JVS(264)*X(37)-JVS(265)*X(43)
  X(45) = X(45)-JVS(271)*X(39)-JVS(272)*X(40)-JVS(273)*X(42)-JVS(274)*X(43)-JVS(275)*X(44)
  X(46) = X(46)-JVS(280)*X(21)-JVS(281)*X(25)-JVS(282)*X(27)-JVS(283)*X(28)-JVS(284)*X(34)-JVS(285)*X(35)-JVS(286)*X(36)&
            &-JVS(287)*X(37)-JVS(288)*X(38)-JVS(289)*X(39)-JVS(290)*X(40)-JVS(291)*X(41)-JVS(292)*X(42)-JVS(293)*X(43)&
            &-JVS(294)*X(44)-JVS(295)*X(45)
  X(47) = X(47)-JVS(299)*X(21)-JVS(300)*X(25)-JVS(301)*X(27)-JVS(302)*X(28)-JVS(303)*X(31)-JVS(304)*X(32)-JVS(305)*X(34)&
            &-JVS(306)*X(35)-JVS(307)*X(36)-JVS(308)*X(37)-JVS(309)*X(38)-JVS(310)*X(40)-JVS(311)*X(41)-JVS(312)*X(42)&
            &-JVS(313)*X(43)-JVS(314)*X(44)-JVS(315)*X(45)-JVS(316)*X(46)
  X(48) = X(48)-JVS(319)*X(19)-JVS(320)*X(22)-JVS(321)*X(23)-JVS(322)*X(25)-JVS(323)*X(26)-JVS(324)*X(29)-JVS(325)*X(30)&
            &-JVS(326)*X(31)-JVS(327)*X(32)-JVS(328)*X(33)-JVS(329)*X(34)-JVS(330)*X(35)-JVS(331)*X(36)-JVS(332)*X(37)&
            &-JVS(333)*X(38)-JVS(334)*X(39)-JVS(335)*X(40)-JVS(336)*X(41)-JVS(337)*X(42)-JVS(338)*X(43)-JVS(339)*X(44)&
            &-JVS(340)*X(45)-JVS(341)*X(46)-JVS(342)*X(47)
  X(48) = X(48)/JVS(343)
  X(47) = (X(47)-JVS(318)*X(48))/(JVS(317))
  X(46) = (X(46)-JVS(297)*X(47)-JVS(298)*X(48))/(JVS(296))
  X(45) = (X(45)-JVS(277)*X(46)-JVS(278)*X(47)-JVS(279)*X(48))/(JVS(276))
  X(44) = (X(44)-JVS(267)*X(45)-JVS(268)*X(46)-JVS(269)*X(47)-JVS(270)*X(48))/(JVS(266))
  X(43) = (X(43)-JVS(254)*X(44)-JVS(255)*X(45)-JVS(256)*X(46)-JVS(257)*X(47)-JVS(258)*X(48))/(JVS(253))
  X(42) = (X(42)-JVS(224)*X(43)-JVS(225)*X(44)-JVS(226)*X(45)-JVS(227)*X(46)-JVS(228)*X(47)-JVS(229)*X(48))/(JVS(223))
  X(41) = (X(41)-JVS(209)*X(42)-JVS(210)*X(43)-JVS(211)*X(44)-JVS(212)*X(45)-JVS(213)*X(46)-JVS(214)*X(47)-JVS(215)&
            &*X(48))/(JVS(208))
  X(40) = (X(40)-JVS(195)*X(43)-JVS(196)*X(44)-JVS(197)*X(45)-JVS(198)*X(47)-JVS(199)*X(48))/(JVS(194))
  X(39) = (X(39)-JVS(180)*X(40)-JVS(181)*X(42)-JVS(182)*X(43)-JVS(183)*X(44)-JVS(184)*X(45)-JVS(185)*X(47)-JVS(186)&
            &*X(48))/(JVS(179))
  X(38) = (X(38)-JVS(163)*X(43)-JVS(164)*X(44)-JVS(165)*X(47))/(JVS(162))
  X(37) = (X(37)-JVS(151)*X(43)-JVS(152)*X(44)-JVS(153)*X(47))/(JVS(150))
  X(36) = (X(36)-JVS(145)*X(43)-JVS(146)*X(44)-JVS(147)*X(47))/(JVS(144))
  X(35) = (X(35)-JVS(138)*X(36)-JVS(139)*X(40)-JVS(140)*X(43)-JVS(141)*X(44)-JVS(142)*X(45)-JVS(143)*X(47))/(JVS(137))
  X(34) = (X(34)-JVS(132)*X(43)-JVS(133)*X(44)-JVS(134)*X(47))/(JVS(131))
  X(33) = (X(33)-JVS(125)*X(34)-JVS(126)*X(36)-JVS(127)*X(37)-JVS(128)*X(43)-JVS(129)*X(44)-JVS(130)*X(47))/(JVS(124))
  X(32) = (X(32)-JVS(117)*X(43)-JVS(118)*X(44)-JVS(119)*X(47))/(JVS(116))
  X(31) = (X(31)-JVS(113)*X(43)-JVS(114)*X(44)-JVS(115)*X(47))/(JVS(112))
  X(30) = (X(30)-JVS(107)*X(32)-JVS(108)*X(36)-JVS(109)*X(43)-JVS(110)*X(44)-JVS(111)*X(47))/(JVS(106))
  X(29) = (X(29)-JVS(95)*X(30)-JVS(96)*X(31)-JVS(97)*X(34)-JVS(98)*X(36)-JVS(99)*X(37)-JVS(100)*X(38)-JVS(101)*X(41)&
            &-JVS(102)*X(43)-JVS(103)*X(44)-JVS(104)*X(47))/(JVS(94))
  X(28) = (X(28)-JVS(86)*X(35)-JVS(87)*X(38)-JVS(88)*X(41)-JVS(89)*X(43)-JVS(90)*X(46)-JVS(91)*X(47))/(JVS(85))
  X(27) = (X(27)-JVS(81)*X(42)-JVS(82)*X(43)-JVS(83)*X(46))/(JVS(80))
  X(26) = (X(26)-JVS(78)*X(43)-JVS(79)*X(44))/(JVS(77))
  X(25) = (X(25)-JVS(74)*X(43)-JVS(75)*X(46)-JVS(76)*X(48))/(JVS(73))
  X(24) = (X(24)-JVS(68)*X(39)-JVS(69)*X(40)-JVS(70)*X(42)-JVS(71)*X(43)-JVS(72)*X(48))/(JVS(67))
  X(23) = (X(23)-JVS(65)*X(33)-JVS(66)*X(43))/(JVS(64))
  X(22) = (X(22)-JVS(63)*X(43))/(JVS(62))
  X(21) = (X(21)-JVS(60)*X(46)-JVS(61)*X(47))/(JVS(59))
  X(20) = (X(20)-JVS(53)*X(23)-JVS(54)*X(33)-JVS(55)*X(37)-JVS(56)*X(43)-JVS(57)*X(44)-JVS(58)*X(47))/(JVS(52))
  X(19) = (X(19)-JVS(50)*X(43)-JVS(51)*X(48))/(JVS(49))
  X(18) = (X(18)-JVS(48)*X(43))/(JVS(47))
  X(17) = (X(17)-JVS(46)*X(43))/(JVS(45))
  X(16) = (X(16)-JVS(43)*X(17)-JVS(44)*X(43))/(JVS(42))
  X(15) = (X(15)-JVS(41)*X(43))/(JVS(40))
  X(14) = (X(14)-JVS(39)*X(43))/(JVS(38))
  X(13) = (X(13)-JVS(37)*X(43))/(JVS(36))
  X(12) = (X(12)-JVS(35)*X(43))/(JVS(34))
  X(11) = (X(11)-JVS(33)*X(43))/(JVS(32))
  X(10) = (X(10)-JVS(29)*X(11)-JVS(30)*X(12)-JVS(31)*X(43))/(JVS(28))
  X(9) = (X(9)-JVS(25)*X(10)-JVS(26)*X(13)-JVS(27)*X(43))/(JVS(24))
  X(8) = (X(8)-JVS(21)*X(9)-JVS(22)*X(14)-JVS(23)*X(43))/(JVS(20))
  X(7) = (X(7)-JVS(17)*X(8)-JVS(18)*X(15)-JVS(19)*X(43))/(JVS(16))
  X(6) = (X(6)-JVS(15)*X(43))/(JVS(14))
  X(5) = (X(5)-JVS(12)*X(6)-JVS(13)*X(43))/(JVS(11))
  X(4) = (X(4)-JVS(9)*X(5)-JVS(10)*X(43))/(JVS(8))
  X(3) = (X(3)-JVS(6)*X(4)-JVS(7)*X(43))/(JVS(5))
  X(2) = (X(2)-JVS(4)*X(43))/(JVS(3))
  X(1) = (X(1)-JVS(2)*X(43))/(JVS(1))
      
END SUBROUTINE redhc_made_soa_vbs_aq_KppSolve

! End of redhc_made_soa_vbs_aq_KppSolve function
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! 
! BLAS_UTIL - BLAS-LIKE utility functions
!   Arguments :
! 
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!--------------------------------------------------------------
!
! BLAS/LAPACK-like subroutines used by the integration algorithms
! It is recommended to replace them by calls to the optimized
!      BLAS/LAPACK library for your machine
!
!  (C) Adrian Sandu, Aug. 2004
!      Virginia Polytechnic Institute and State University
!--------------------------------------------------------------


!--------------------------------------------------------------
      SUBROUTINE redhc_made_soa_vbs_aq_WCOPY(N,X,incX,Y,incY)
!--------------------------------------------------------------
!     copies a vector, x, to a vector, y:  y <- x
!     only for incX=incY=1
!     after BLAS
!     replace this by the function from the optimized BLAS implementation:
!         CALL  SCOPY(N,X,1,Y,1)   or   CALL  DCOPY(N,X,1,Y,1)
!--------------------------------------------------------------
!     USE redhc_made_soa_vbs_aq_Precision
      
      INTEGER i,incX,incY,M,MP1,N
      REAL(kind=dp) X(N),Y(N)

      IF (N.LE.0) RETURN

      M = MOD(N,8)
      IF( M .NE. 0 ) THEN
        DO i = 1,M
          Y(i) = X(i)
        END DO
        IF( N .LT. 8 ) RETURN
      END IF    
      MP1 = M+1
      DO i = MP1,N,8
        Y(i) = X(i)
        Y(i + 1) = X(i + 1)
        Y(i + 2) = X(i + 2)
        Y(i + 3) = X(i + 3)
        Y(i + 4) = X(i + 4)
        Y(i + 5) = X(i + 5)
        Y(i + 6) = X(i + 6)
        Y(i + 7) = X(i + 7)
      END DO

      END SUBROUTINE redhc_made_soa_vbs_aq_WCOPY


!--------------------------------------------------------------
      SUBROUTINE redhc_made_soa_vbs_aq_WAXPY(N,Alpha,X,incX,Y,incY)
!--------------------------------------------------------------
!     constant times a vector plus a vector: y <- y + Alpha*x
!     only for incX=incY=1
!     after BLAS
!     replace this by the function from the optimized BLAS implementation:
!         CALL SAXPY(N,Alpha,X,1,Y,1) or  CALL DAXPY(N,Alpha,X,1,Y,1)
!--------------------------------------------------------------
!      USE redhc_made_soa_vbs_aq_Precision

      INTEGER i,incX,incY,M,MP1,N
      REAL(kind=dp) X(N),Y(N),Alpha
      REAL(kind=dp) ZERO
      PARAMETER( ZERO = 0.0_dp )

      IF (Alpha .EQ. ZERO) RETURN
      IF (N .LE. 0) RETURN

      M = MOD(N,4)
      IF( M .NE. 0 ) THEN
        DO i = 1,M
          Y(i) = Y(i) + Alpha*X(i)
        END DO
        IF( N .LT. 4 ) RETURN
      END IF
      MP1 = M + 1
      DO i = MP1,N,4
        Y(i) = Y(i) + Alpha*X(i)
        Y(i + 1) = Y(i + 1) + Alpha*X(i + 1)
        Y(i + 2) = Y(i + 2) + Alpha*X(i + 2)
        Y(i + 3) = Y(i + 3) + Alpha*X(i + 3)
      END DO
      
      END SUBROUTINE redhc_made_soa_vbs_aq_WAXPY



!--------------------------------------------------------------
      SUBROUTINE redhc_made_soa_vbs_aq_WSCAL(N,Alpha,X,incX)
!--------------------------------------------------------------
!     constant times a vector: x(1:N) <- Alpha*x(1:N) 
!     only for incX=incY=1
!     after BLAS
!     replace this by the function from the optimized BLAS implementation:
!         CALL SSCAL(N,Alpha,X,1) or  CALL DSCAL(N,Alpha,X,1)
!--------------------------------------------------------------
!      USE redhc_made_soa_vbs_aq_Precision

      INTEGER i,incX,M,MP1,N
      REAL(kind=dp) X(N),Alpha
      REAL(kind=dp) ZERO, ONE
      PARAMETER( ZERO = 0.0_dp ) 
      PARAMETER( ONE  = 1.0_dp )

      IF (Alpha .EQ. ONE) RETURN
      IF (N .LE. 0) RETURN

      M = MOD(N,5)
      IF( M .NE. 0 ) THEN
        IF (Alpha .EQ. (-ONE)) THEN
          DO i = 1,M
            X(i) = -X(i)
          END DO
        ELSEIF (Alpha .EQ. ZERO) THEN
          DO i = 1,M
            X(i) = ZERO
          END DO
        ELSE
          DO i = 1,M
            X(i) = Alpha*X(i)
          END DO
        END IF
        IF( N .LT. 5 ) RETURN
      END IF
      MP1 = M + 1
      IF (Alpha .EQ. (-ONE)) THEN
        DO i = MP1,N,5
          X(i)     = -X(i)
          X(i + 1) = -X(i + 1)
          X(i + 2) = -X(i + 2)
          X(i + 3) = -X(i + 3)
          X(i + 4) = -X(i + 4)
        END DO
      ELSEIF (Alpha .EQ. ZERO) THEN
        DO i = MP1,N,5
          X(i)     = ZERO
          X(i + 1) = ZERO
          X(i + 2) = ZERO
          X(i + 3) = ZERO
          X(i + 4) = ZERO
        END DO
      ELSE
        DO i = MP1,N,5
          X(i)     = Alpha*X(i)
          X(i + 1) = Alpha*X(i + 1)
          X(i + 2) = Alpha*X(i + 2)
          X(i + 3) = Alpha*X(i + 3)
          X(i + 4) = Alpha*X(i + 4)
        END DO
      END IF

      END SUBROUTINE redhc_made_soa_vbs_aq_WSCAL

!--------------------------------------------------------------
      REAL(kind=dp) FUNCTION redhc_made_soa_vbs_aq_WLAMCH( C )
!--------------------------------------------------------------
!     returns epsilon machine
!     after LAPACK
!     replace this by the function from the optimized LAPACK implementation:
!          CALL SLAMCH('E') or CALL DLAMCH('E')
!--------------------------------------------------------------
!      USE redhc_made_soa_vbs_aq_Precision

      CHARACTER C
      INTEGER   i
      REAL(kind=dp)  ONE, HALF, Eps, Sum
      PARAMETER (ONE  = 1.0_dp)
      PARAMETER (HALF = 0.5_dp)
      LOGICAL   First
      SAVE     First, Eps
      DATA     First /.TRUE./
      
      IF (First) THEN
        First = .FALSE.
        Eps = HALF**(16)
        DO i = 17, 80
          Eps = Eps*HALF
          CALL redhc_made_soa_vbs_aq_WLAMCH_ADD(ONE,Eps,Sum)
          IF (Sum.LE.ONE) GOTO 10
        END DO
        PRINT*,'ERROR IN WLAMCH. EPS < ',Eps
        RETURN
10      Eps = Eps*2
        i = i-1      
      END IF

      redhc_made_soa_vbs_aq_WLAMCH = Eps

      END FUNCTION redhc_made_soa_vbs_aq_WLAMCH
     
      SUBROUTINE redhc_made_soa_vbs_aq_WLAMCH_ADD( A, B, Sum )
!      USE redhc_made_soa_vbs_aq_Precision
      
      REAL(kind=dp) A, B, Sum
      Sum = A + B

      END SUBROUTINE redhc_made_soa_vbs_aq_WLAMCH_ADD
!--------------------------------------------------------------


!--------------------------------------------------------------
      SUBROUTINE redhc_made_soa_vbs_aq_SET2ZERO(N,Y)
!--------------------------------------------------------------
!     copies zeros into the vector y:  y <- 0
!     after BLAS
!--------------------------------------------------------------
      
      INTEGER ::  i,M,MP1,N
      REAL(kind=dp) ::  Y(N)
      REAL(kind=dp), PARAMETER :: ZERO = 0.0d0

      IF (N.LE.0) RETURN

      M = MOD(N,8)
      IF( M .NE. 0 ) THEN
        DO i = 1,M
          Y(i) = ZERO
        END DO
        IF( N .LT. 8 ) RETURN
      END IF    
      MP1 = M+1
      DO i = MP1,N,8
        Y(i)     = ZERO
        Y(i + 1) = ZERO
        Y(i + 2) = ZERO
        Y(i + 3) = ZERO
        Y(i + 4) = ZERO
        Y(i + 5) = ZERO
        Y(i + 6) = ZERO
        Y(i + 7) = ZERO
      END DO

      END SUBROUTINE redhc_made_soa_vbs_aq_SET2ZERO


!--------------------------------------------------------------
      REAL(kind=dp) FUNCTION redhc_made_soa_vbs_aq_WDOT (N, DX, incX, DY, incY) 
!--------------------------------------------------------------
!     dot produce: wdot = x(1:N)*y(1:N) 
!     only for incX=incY=1
!     after BLAS
!     replace this by the function from the optimized BLAS implementation:
!         CALL SDOT(N,X,1,Y,1) or  CALL DDOT(N,X,1,Y,1)
!--------------------------------------------------------------
!      USE messy_mecca_kpp_Precision
!--------------------------------------------------------------
      IMPLICIT NONE
      INTEGER :: N, incX, incY
      REAL(kind=dp) :: DX(N), DY(N) 

      INTEGER :: i, IX, IY, M, MP1, NS
                                 
      redhc_made_soa_vbs_aq_WDOT = 0.0D0 
      IF (N .LE. 0) RETURN 
      IF (incX .EQ. incY) IF (incX-1) 5,20,60 
!                                                                       
!     Code for unequal or nonpositive increments.                       
!                                                                       
    5 IX = 1 
      IY = 1 
      IF (incX .LT. 0) IX = (-N+1)*incX + 1 
      IF (incY .LT. 0) IY = (-N+1)*incY + 1 
      DO i = 1,N 
        redhc_made_soa_vbs_aq_WDOT = redhc_made_soa_vbs_aq_WDOT + DX(IX)*DY(IY) 
        IX = IX + incX 
        IY = IY + incY 
      END DO 
      RETURN 
!                                                                       
!     Code for both increments equal to 1.                              
!                                                                       
!     Clean-up loop so remaining vector length is a multiple of 5.      
!                                                                       
   20 M = MOD(N,5) 
      IF (M .EQ. 0) GO TO 40 
      DO i = 1,M 
         redhc_made_soa_vbs_aq_WDOT = redhc_made_soa_vbs_aq_WDOT + DX(i)*DY(i) 
      END DO 
      IF (N .LT. 5) RETURN 
   40 MP1 = M + 1 
      DO i = MP1,N,5 
          redhc_made_soa_vbs_aq_WDOT = redhc_made_soa_vbs_aq_WDOT + DX(i)*DY(i) + DX(i+1)*DY(i+1) +&
                   DX(i+2)*DY(i+2) +  &
                   DX(i+3)*DY(i+3) + DX(i+4)*DY(i+4)                   
      END DO 
      RETURN 
!                                                                       
!     Code for equal, positive, non-unit increments.                    
!                                                                       
   60 NS = N*incX 
      DO i = 1,NS,incX 
        redhc_made_soa_vbs_aq_WDOT = redhc_made_soa_vbs_aq_WDOT + DX(i)*DY(i) 
      END DO 

      END FUNCTION redhc_made_soa_vbs_aq_WDOT                                          
! End of BLAS_UTIL function
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   SUBROUTINE decomp_redhc_made_soa_vbs_aq( JVS, IER )
   
     IMPLICIT NONE
   
      INTEGER  :: IER
      REAL(kind=dp) :: JVS(LU_NONZERO), W(NVAR), a
   
   
  a = 0._dp
  ier = 0 
   
  IF ( ABS(  JVS( 1 )) < TINY(a) ) THEN
         IER = 1                                       
         RETURN
  END IF
   W( 1 ) = JVS( 1 )
   W( 43 ) = JVS( 2 )
  JVS( 1) = W( 1 )
  JVS( 2) = W( 43 )
  IF ( ABS(  JVS( 3 )) < TINY(a) ) THEN
         IER = 2                                       
         RETURN
  END IF
   W( 2 ) = JVS( 3 )
   W( 43 ) = JVS( 4 )
  JVS( 3) = W( 2 )
  JVS( 4) = W( 43 )
  IF ( ABS(  JVS( 5 )) < TINY(a) ) THEN
         IER = 3                                       
         RETURN
  END IF
   W( 3 ) = JVS( 5 )
   W( 4 ) = JVS( 6 )
   W( 43 ) = JVS( 7 )
  JVS( 5) = W( 3 )
  JVS( 6) = W( 4 )
  JVS( 7) = W( 43 )
  IF ( ABS(  JVS( 8 )) < TINY(a) ) THEN
         IER = 4                                       
         RETURN
  END IF
   W( 4 ) = JVS( 8 )
   W( 5 ) = JVS( 9 )
   W( 43 ) = JVS( 10 )
  JVS( 8) = W( 4 )
  JVS( 9) = W( 5 )
  JVS( 10) = W( 43 )
  IF ( ABS(  JVS( 11 )) < TINY(a) ) THEN
         IER = 5                                       
         RETURN
  END IF
   W( 5 ) = JVS( 11 )
   W( 6 ) = JVS( 12 )
   W( 43 ) = JVS( 13 )
  JVS( 11) = W( 5 )
  JVS( 12) = W( 6 )
  JVS( 13) = W( 43 )
  IF ( ABS(  JVS( 14 )) < TINY(a) ) THEN
         IER = 6                                       
         RETURN
  END IF
   W( 6 ) = JVS( 14 )
   W( 43 ) = JVS( 15 )
  JVS( 14) = W( 6 )
  JVS( 15) = W( 43 )
  IF ( ABS(  JVS( 16 )) < TINY(a) ) THEN
         IER = 7                                       
         RETURN
  END IF
   W( 7 ) = JVS( 16 )
   W( 8 ) = JVS( 17 )
   W( 15 ) = JVS( 18 )
   W( 43 ) = JVS( 19 )
  JVS( 16) = W( 7 )
  JVS( 17) = W( 8 )
  JVS( 18) = W( 15 )
  JVS( 19) = W( 43 )
  IF ( ABS(  JVS( 20 )) < TINY(a) ) THEN
         IER = 8                                       
         RETURN
  END IF
   W( 8 ) = JVS( 20 )
   W( 9 ) = JVS( 21 )
   W( 14 ) = JVS( 22 )
   W( 43 ) = JVS( 23 )
  JVS( 20) = W( 8 )
  JVS( 21) = W( 9 )
  JVS( 22) = W( 14 )
  JVS( 23) = W( 43 )
  IF ( ABS(  JVS( 24 )) < TINY(a) ) THEN
         IER = 9                                       
         RETURN
  END IF
   W( 9 ) = JVS( 24 )
   W( 10 ) = JVS( 25 )
   W( 13 ) = JVS( 26 )
   W( 43 ) = JVS( 27 )
  JVS( 24) = W( 9 )
  JVS( 25) = W( 10 )
  JVS( 26) = W( 13 )
  JVS( 27) = W( 43 )
  IF ( ABS(  JVS( 28 )) < TINY(a) ) THEN
         IER = 10                                      
         RETURN
  END IF
   W( 10 ) = JVS( 28 )
   W( 11 ) = JVS( 29 )
   W( 12 ) = JVS( 30 )
   W( 43 ) = JVS( 31 )
  JVS( 28) = W( 10 )
  JVS( 29) = W( 11 )
  JVS( 30) = W( 12 )
  JVS( 31) = W( 43 )
  IF ( ABS(  JVS( 32 )) < TINY(a) ) THEN
         IER = 11                                      
         RETURN
  END IF
   W( 11 ) = JVS( 32 )
   W( 43 ) = JVS( 33 )
  JVS( 32) = W( 11 )
  JVS( 33) = W( 43 )
  IF ( ABS(  JVS( 34 )) < TINY(a) ) THEN
         IER = 12                                      
         RETURN
  END IF
   W( 12 ) = JVS( 34 )
   W( 43 ) = JVS( 35 )
  JVS( 34) = W( 12 )
  JVS( 35) = W( 43 )
  IF ( ABS(  JVS( 36 )) < TINY(a) ) THEN
         IER = 13                                      
         RETURN
  END IF
   W( 13 ) = JVS( 36 )
   W( 43 ) = JVS( 37 )
  JVS( 36) = W( 13 )
  JVS( 37) = W( 43 )
  IF ( ABS(  JVS( 38 )) < TINY(a) ) THEN
         IER = 14                                      
         RETURN
  END IF
   W( 14 ) = JVS( 38 )
   W( 43 ) = JVS( 39 )
  JVS( 38) = W( 14 )
  JVS( 39) = W( 43 )
  IF ( ABS(  JVS( 40 )) < TINY(a) ) THEN
         IER = 15                                      
         RETURN
  END IF
   W( 15 ) = JVS( 40 )
   W( 43 ) = JVS( 41 )
  JVS( 40) = W( 15 )
  JVS( 41) = W( 43 )
  IF ( ABS(  JVS( 42 )) < TINY(a) ) THEN
         IER = 16                                      
         RETURN
  END IF
   W( 16 ) = JVS( 42 )
   W( 17 ) = JVS( 43 )
   W( 43 ) = JVS( 44 )
  JVS( 42) = W( 16 )
  JVS( 43) = W( 17 )
  JVS( 44) = W( 43 )
  IF ( ABS(  JVS( 45 )) < TINY(a) ) THEN
         IER = 17                                      
         RETURN
  END IF
   W( 17 ) = JVS( 45 )
   W( 43 ) = JVS( 46 )
  JVS( 45) = W( 17 )
  JVS( 46) = W( 43 )
  IF ( ABS(  JVS( 47 )) < TINY(a) ) THEN
         IER = 18                                      
         RETURN
  END IF
   W( 18 ) = JVS( 47 )
   W( 43 ) = JVS( 48 )
  JVS( 47) = W( 18 )
  JVS( 48) = W( 43 )
  IF ( ABS(  JVS( 49 )) < TINY(a) ) THEN
         IER = 19                                      
         RETURN
  END IF
   W( 19 ) = JVS( 49 )
   W( 43 ) = JVS( 50 )
   W( 48 ) = JVS( 51 )
  JVS( 49) = W( 19 )
  JVS( 50) = W( 43 )
  JVS( 51) = W( 48 )
  IF ( ABS(  JVS( 52 )) < TINY(a) ) THEN
         IER = 20                                      
         RETURN
  END IF
   W( 20 ) = JVS( 52 )
   W( 23 ) = JVS( 53 )
   W( 33 ) = JVS( 54 )
   W( 37 ) = JVS( 55 )
   W( 43 ) = JVS( 56 )
   W( 44 ) = JVS( 57 )
   W( 47 ) = JVS( 58 )
  JVS( 52) = W( 20 )
  JVS( 53) = W( 23 )
  JVS( 54) = W( 33 )
  JVS( 55) = W( 37 )
  JVS( 56) = W( 43 )
  JVS( 57) = W( 44 )
  JVS( 58) = W( 47 )
  IF ( ABS(  JVS( 59 )) < TINY(a) ) THEN
         IER = 21                                      
         RETURN
  END IF
   W( 21 ) = JVS( 59 )
   W( 46 ) = JVS( 60 )
   W( 47 ) = JVS( 61 )
  JVS( 59) = W( 21 )
  JVS( 60) = W( 46 )
  JVS( 61) = W( 47 )
  IF ( ABS(  JVS( 62 )) < TINY(a) ) THEN
         IER = 22                                      
         RETURN
  END IF
   W( 22 ) = JVS( 62 )
   W( 43 ) = JVS( 63 )
  JVS( 62) = W( 22 )
  JVS( 63) = W( 43 )
  IF ( ABS(  JVS( 64 )) < TINY(a) ) THEN
         IER = 23                                      
         RETURN
  END IF
   W( 23 ) = JVS( 64 )
   W( 33 ) = JVS( 65 )
   W( 43 ) = JVS( 66 )
  JVS( 64) = W( 23 )
  JVS( 65) = W( 33 )
  JVS( 66) = W( 43 )
  IF ( ABS(  JVS( 67 )) < TINY(a) ) THEN
         IER = 24                                      
         RETURN
  END IF
   W( 24 ) = JVS( 67 )
   W( 39 ) = JVS( 68 )
   W( 40 ) = JVS( 69 )
   W( 42 ) = JVS( 70 )
   W( 43 ) = JVS( 71 )
   W( 48 ) = JVS( 72 )
  JVS( 67) = W( 24 )
  JVS( 68) = W( 39 )
  JVS( 69) = W( 40 )
  JVS( 70) = W( 42 )
  JVS( 71) = W( 43 )
  JVS( 72) = W( 48 )
  IF ( ABS(  JVS( 73 )) < TINY(a) ) THEN
         IER = 25                                      
         RETURN
  END IF
   W( 25 ) = JVS( 73 )
   W( 43 ) = JVS( 74 )
   W( 46 ) = JVS( 75 )
   W( 48 ) = JVS( 76 )
  JVS( 73) = W( 25 )
  JVS( 74) = W( 43 )
  JVS( 75) = W( 46 )
  JVS( 76) = W( 48 )
  IF ( ABS(  JVS( 77 )) < TINY(a) ) THEN
         IER = 26                                      
         RETURN
  END IF
   W( 26 ) = JVS( 77 )
   W( 43 ) = JVS( 78 )
   W( 44 ) = JVS( 79 )
  JVS( 77) = W( 26 )
  JVS( 78) = W( 43 )
  JVS( 79) = W( 44 )
  IF ( ABS(  JVS( 80 )) < TINY(a) ) THEN
         IER = 27                                      
         RETURN
  END IF
   W( 27 ) = JVS( 80 )
   W( 42 ) = JVS( 81 )
   W( 43 ) = JVS( 82 )
   W( 46 ) = JVS( 83 )
  JVS( 80) = W( 27 )
  JVS( 81) = W( 42 )
  JVS( 82) = W( 43 )
  JVS( 83) = W( 46 )
  IF ( ABS(  JVS( 85 )) < TINY(a) ) THEN
         IER = 28                                      
         RETURN
  END IF
   W( 21 ) = JVS( 84 )
   W( 28 ) = JVS( 85 )
   W( 35 ) = JVS( 86 )
   W( 38 ) = JVS( 87 )
   W( 41 ) = JVS( 88 )
   W( 43 ) = JVS( 89 )
   W( 46 ) = JVS( 90 )
   W( 47 ) = JVS( 91 )
  a = -W( 21 ) / JVS(           59  )
  W( 21 ) = -a
  W( 46 ) = W( 46 ) + a*JVS( 60 )
  W( 47 ) = W( 47 ) + a*JVS( 61 )
  JVS( 84) = W( 21 )
  JVS( 85) = W( 28 )
  JVS( 86) = W( 35 )
  JVS( 87) = W( 38 )
  JVS( 88) = W( 41 )
  JVS( 89) = W( 43 )
  JVS( 90) = W( 46 )
  JVS( 91) = W( 47 )
  IF ( ABS(  JVS( 94 )) < TINY(a) ) THEN
         IER = 29                                      
         RETURN
  END IF
   W( 22 ) = JVS( 92 )
   W( 26 ) = JVS( 93 )
   W( 29 ) = JVS( 94 )
   W( 30 ) = JVS( 95 )
   W( 31 ) = JVS( 96 )
   W( 34 ) = JVS( 97 )
   W( 36 ) = JVS( 98 )
   W( 37 ) = JVS( 99 )
   W( 38 ) = JVS( 100 )
   W( 41 ) = JVS( 101 )
   W( 43 ) = JVS( 102 )
   W( 44 ) = JVS( 103 )
   W( 47 ) = JVS( 104 )
  a = -W( 22 ) / JVS(           62  )
  W( 22 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 63 )
  a = -W( 26 ) / JVS(           77  )
  W( 26 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 78 )
  W( 44 ) = W( 44 ) + a*JVS( 79 )
  JVS( 92) = W( 22 )
  JVS( 93) = W( 26 )
  JVS( 94) = W( 29 )
  JVS( 95) = W( 30 )
  JVS( 96) = W( 31 )
  JVS( 97) = W( 34 )
  JVS( 98) = W( 36 )
  JVS( 99) = W( 37 )
  JVS( 100) = W( 38 )
  JVS( 101) = W( 41 )
  JVS( 102) = W( 43 )
  JVS( 103) = W( 44 )
  JVS( 104) = W( 47 )
  IF ( ABS(  JVS( 106 )) < TINY(a) ) THEN
         IER = 30                                      
         RETURN
  END IF
   W( 22 ) = JVS( 105 )
   W( 30 ) = JVS( 106 )
   W( 32 ) = JVS( 107 )
   W( 36 ) = JVS( 108 )
   W( 43 ) = JVS( 109 )
   W( 44 ) = JVS( 110 )
   W( 47 ) = JVS( 111 )
  a = -W( 22 ) / JVS(           62  )
  W( 22 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 63 )
  JVS( 105) = W( 22 )
  JVS( 106) = W( 30 )
  JVS( 107) = W( 32 )
  JVS( 108) = W( 36 )
  JVS( 109) = W( 43 )
  JVS( 110) = W( 44 )
  JVS( 111) = W( 47 )
  IF ( ABS(  JVS( 112 )) < TINY(a) ) THEN
         IER = 31                                      
         RETURN
  END IF
   W( 31 ) = JVS( 112 )
   W( 43 ) = JVS( 113 )
   W( 44 ) = JVS( 114 )
   W( 47 ) = JVS( 115 )
  JVS( 112) = W( 31 )
  JVS( 113) = W( 43 )
  JVS( 114) = W( 44 )
  JVS( 115) = W( 47 )
  IF ( ABS(  JVS( 116 )) < TINY(a) ) THEN
         IER = 32                                      
         RETURN
  END IF
   W( 32 ) = JVS( 116 )
   W( 43 ) = JVS( 117 )
   W( 44 ) = JVS( 118 )
   W( 47 ) = JVS( 119 )
  JVS( 116) = W( 32 )
  JVS( 117) = W( 43 )
  JVS( 118) = W( 44 )
  JVS( 119) = W( 47 )
  IF ( ABS(  JVS( 124 )) < TINY(a) ) THEN
         IER = 33                                      
         RETURN
  END IF
   W( 20 ) = JVS( 120 )
   W( 23 ) = JVS( 121 )
   W( 31 ) = JVS( 122 )
   W( 32 ) = JVS( 123 )
   W( 33 ) = JVS( 124 )
   W( 34 ) = JVS( 125 )
   W( 36 ) = JVS( 126 )
   W( 37 ) = JVS( 127 )
   W( 43 ) = JVS( 128 )
   W( 44 ) = JVS( 129 )
   W( 47 ) = JVS( 130 )
  a = -W( 20 ) / JVS(           52  )
  W( 20 ) = -a
  W( 23 ) = W( 23 ) + a*JVS( 53 )
  W( 33 ) = W( 33 ) + a*JVS( 54 )
  W( 37 ) = W( 37 ) + a*JVS( 55 )
  W( 43 ) = W( 43 ) + a*JVS( 56 )
  W( 44 ) = W( 44 ) + a*JVS( 57 )
  W( 47 ) = W( 47 ) + a*JVS( 58 )
  a = -W( 23 ) / JVS(           64  )
  W( 23 ) = -a
  W( 33 ) = W( 33 ) + a*JVS( 65 )
  W( 43 ) = W( 43 ) + a*JVS( 66 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  JVS( 120) = W( 20 )
  JVS( 121) = W( 23 )
  JVS( 122) = W( 31 )
  JVS( 123) = W( 32 )
  JVS( 124) = W( 33 )
  JVS( 125) = W( 34 )
  JVS( 126) = W( 36 )
  JVS( 127) = W( 37 )
  JVS( 128) = W( 43 )
  JVS( 129) = W( 44 )
  JVS( 130) = W( 47 )
  IF ( ABS(  JVS( 131 )) < TINY(a) ) THEN
         IER = 34                                      
         RETURN
  END IF
   W( 34 ) = JVS( 131 )
   W( 43 ) = JVS( 132 )
   W( 44 ) = JVS( 133 )
   W( 47 ) = JVS( 134 )
  JVS( 131) = W( 34 )
  JVS( 132) = W( 43 )
  JVS( 133) = W( 44 )
  JVS( 134) = W( 47 )
  IF ( ABS(  JVS( 137 )) < TINY(a) ) THEN
         IER = 35                                      
         RETURN
  END IF
   W( 31 ) = JVS( 135 )
   W( 34 ) = JVS( 136 )
   W( 35 ) = JVS( 137 )
   W( 36 ) = JVS( 138 )
   W( 40 ) = JVS( 139 )
   W( 43 ) = JVS( 140 )
   W( 44 ) = JVS( 141 )
   W( 45 ) = JVS( 142 )
   W( 47 ) = JVS( 143 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  JVS( 135) = W( 31 )
  JVS( 136) = W( 34 )
  JVS( 137) = W( 35 )
  JVS( 138) = W( 36 )
  JVS( 139) = W( 40 )
  JVS( 140) = W( 43 )
  JVS( 141) = W( 44 )
  JVS( 142) = W( 45 )
  JVS( 143) = W( 47 )
  IF ( ABS(  JVS( 144 )) < TINY(a) ) THEN
         IER = 36                                      
         RETURN
  END IF
   W( 36 ) = JVS( 144 )
   W( 43 ) = JVS( 145 )
   W( 44 ) = JVS( 146 )
   W( 47 ) = JVS( 147 )
  JVS( 144) = W( 36 )
  JVS( 145) = W( 43 )
  JVS( 146) = W( 44 )
  JVS( 147) = W( 47 )
  IF ( ABS(  JVS( 150 )) < TINY(a) ) THEN
         IER = 37                                      
         RETURN
  END IF
   W( 32 ) = JVS( 148 )
   W( 36 ) = JVS( 149 )
   W( 37 ) = JVS( 150 )
   W( 43 ) = JVS( 151 )
   W( 44 ) = JVS( 152 )
   W( 47 ) = JVS( 153 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  JVS( 148) = W( 32 )
  JVS( 149) = W( 36 )
  JVS( 150) = W( 37 )
  JVS( 151) = W( 43 )
  JVS( 152) = W( 44 )
  JVS( 153) = W( 47 )
  IF ( ABS(  JVS( 162 )) < TINY(a) ) THEN
         IER = 38                                      
         RETURN
  END IF
   W( 23 ) = JVS( 154 )
   W( 26 ) = JVS( 155 )
   W( 31 ) = JVS( 156 )
   W( 32 ) = JVS( 157 )
   W( 33 ) = JVS( 158 )
   W( 34 ) = JVS( 159 )
   W( 36 ) = JVS( 160 )
   W( 37 ) = JVS( 161 )
   W( 38 ) = JVS( 162 )
   W( 43 ) = JVS( 163 )
   W( 44 ) = JVS( 164 )
   W( 47 ) = JVS( 165 )
  a = -W( 23 ) / JVS(           64  )
  W( 23 ) = -a
  W( 33 ) = W( 33 ) + a*JVS( 65 )
  W( 43 ) = W( 43 ) + a*JVS( 66 )
  a = -W( 26 ) / JVS(           77  )
  W( 26 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 78 )
  W( 44 ) = W( 44 ) + a*JVS( 79 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 33 ) / JVS(          124  )
  W( 33 ) = -a
  W( 34 ) = W( 34 ) + a*JVS( 125 )
  W( 36 ) = W( 36 ) + a*JVS( 126 )
  W( 37 ) = W( 37 ) + a*JVS( 127 )
  W( 43 ) = W( 43 ) + a*JVS( 128 )
  W( 44 ) = W( 44 ) + a*JVS( 129 )
  W( 47 ) = W( 47 ) + a*JVS( 130 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 37 ) / JVS(          150  )
  W( 37 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 151 )
  W( 44 ) = W( 44 ) + a*JVS( 152 )
  W( 47 ) = W( 47 ) + a*JVS( 153 )
  JVS( 154) = W( 23 )
  JVS( 155) = W( 26 )
  JVS( 156) = W( 31 )
  JVS( 157) = W( 32 )
  JVS( 158) = W( 33 )
  JVS( 159) = W( 34 )
  JVS( 160) = W( 36 )
  JVS( 161) = W( 37 )
  JVS( 162) = W( 38 )
  JVS( 163) = W( 43 )
  JVS( 164) = W( 44 )
  JVS( 165) = W( 47 )
  IF ( ABS(  JVS( 179 )) < TINY(a) ) THEN
         IER = 39                                      
         RETURN
  END IF
   W( 22 ) = JVS( 166 )
   W( 23 ) = JVS( 167 )
   W( 24 ) = JVS( 168 )
   W( 26 ) = JVS( 169 )
   W( 30 ) = JVS( 170 )
   W( 31 ) = JVS( 171 )
   W( 32 ) = JVS( 172 )
   W( 33 ) = JVS( 173 )
   W( 34 ) = JVS( 174 )
   W( 35 ) = JVS( 175 )
   W( 36 ) = JVS( 176 )
   W( 37 ) = JVS( 177 )
   W( 38 ) = JVS( 178 )
   W( 39 ) = JVS( 179 )
   W( 40 ) = JVS( 180 )
   W( 42 ) = JVS( 181 )
   W( 43 ) = JVS( 182 )
   W( 44 ) = JVS( 183 )
   W( 45 ) = JVS( 184 )
   W( 47 ) = JVS( 185 )
   W( 48 ) = JVS( 186 )
  a = -W( 22 ) / JVS(           62  )
  W( 22 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 63 )
  a = -W( 23 ) / JVS(           64  )
  W( 23 ) = -a
  W( 33 ) = W( 33 ) + a*JVS( 65 )
  W( 43 ) = W( 43 ) + a*JVS( 66 )
  a = -W( 24 ) / JVS(           67  )
  W( 24 ) = -a
  W( 39 ) = W( 39 ) + a*JVS( 68 )
  W( 40 ) = W( 40 ) + a*JVS( 69 )
  W( 42 ) = W( 42 ) + a*JVS( 70 )
  W( 43 ) = W( 43 ) + a*JVS( 71 )
  W( 48 ) = W( 48 ) + a*JVS( 72 )
  a = -W( 26 ) / JVS(           77  )
  W( 26 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 78 )
  W( 44 ) = W( 44 ) + a*JVS( 79 )
  a = -W( 30 ) / JVS(          106  )
  W( 30 ) = -a
  W( 32 ) = W( 32 ) + a*JVS( 107 )
  W( 36 ) = W( 36 ) + a*JVS( 108 )
  W( 43 ) = W( 43 ) + a*JVS( 109 )
  W( 44 ) = W( 44 ) + a*JVS( 110 )
  W( 47 ) = W( 47 ) + a*JVS( 111 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 33 ) / JVS(          124  )
  W( 33 ) = -a
  W( 34 ) = W( 34 ) + a*JVS( 125 )
  W( 36 ) = W( 36 ) + a*JVS( 126 )
  W( 37 ) = W( 37 ) + a*JVS( 127 )
  W( 43 ) = W( 43 ) + a*JVS( 128 )
  W( 44 ) = W( 44 ) + a*JVS( 129 )
  W( 47 ) = W( 47 ) + a*JVS( 130 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 35 ) / JVS(          137  )
  W( 35 ) = -a
  W( 36 ) = W( 36 ) + a*JVS( 138 )
  W( 40 ) = W( 40 ) + a*JVS( 139 )
  W( 43 ) = W( 43 ) + a*JVS( 140 )
  W( 44 ) = W( 44 ) + a*JVS( 141 )
  W( 45 ) = W( 45 ) + a*JVS( 142 )
  W( 47 ) = W( 47 ) + a*JVS( 143 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 37 ) / JVS(          150  )
  W( 37 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 151 )
  W( 44 ) = W( 44 ) + a*JVS( 152 )
  W( 47 ) = W( 47 ) + a*JVS( 153 )
  a = -W( 38 ) / JVS(          162  )
  W( 38 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 163 )
  W( 44 ) = W( 44 ) + a*JVS( 164 )
  W( 47 ) = W( 47 ) + a*JVS( 165 )
  JVS( 166) = W( 22 )
  JVS( 167) = W( 23 )
  JVS( 168) = W( 24 )
  JVS( 169) = W( 26 )
  JVS( 170) = W( 30 )
  JVS( 171) = W( 31 )
  JVS( 172) = W( 32 )
  JVS( 173) = W( 33 )
  JVS( 174) = W( 34 )
  JVS( 175) = W( 35 )
  JVS( 176) = W( 36 )
  JVS( 177) = W( 37 )
  JVS( 178) = W( 38 )
  JVS( 179) = W( 39 )
  JVS( 180) = W( 40 )
  JVS( 181) = W( 42 )
  JVS( 182) = W( 43 )
  JVS( 183) = W( 44 )
  JVS( 184) = W( 45 )
  JVS( 185) = W( 47 )
  JVS( 186) = W( 48 )
  IF ( ABS(  JVS( 194 )) < TINY(a) ) THEN
         IER = 40                                      
         RETURN
  END IF
   W( 22 ) = JVS( 187 )
   W( 31 ) = JVS( 188 )
   W( 32 ) = JVS( 189 )
   W( 33 ) = JVS( 190 )
   W( 34 ) = JVS( 191 )
   W( 36 ) = JVS( 192 )
   W( 37 ) = JVS( 193 )
   W( 40 ) = JVS( 194 )
   W( 43 ) = JVS( 195 )
   W( 44 ) = JVS( 196 )
   W( 45 ) = JVS( 197 )
   W( 47 ) = JVS( 198 )
   W( 48 ) = JVS( 199 )
  a = -W( 22 ) / JVS(           62  )
  W( 22 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 63 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 33 ) / JVS(          124  )
  W( 33 ) = -a
  W( 34 ) = W( 34 ) + a*JVS( 125 )
  W( 36 ) = W( 36 ) + a*JVS( 126 )
  W( 37 ) = W( 37 ) + a*JVS( 127 )
  W( 43 ) = W( 43 ) + a*JVS( 128 )
  W( 44 ) = W( 44 ) + a*JVS( 129 )
  W( 47 ) = W( 47 ) + a*JVS( 130 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 37 ) / JVS(          150  )
  W( 37 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 151 )
  W( 44 ) = W( 44 ) + a*JVS( 152 )
  W( 47 ) = W( 47 ) + a*JVS( 153 )
  JVS( 187) = W( 22 )
  JVS( 188) = W( 31 )
  JVS( 189) = W( 32 )
  JVS( 190) = W( 33 )
  JVS( 191) = W( 34 )
  JVS( 192) = W( 36 )
  JVS( 193) = W( 37 )
  JVS( 194) = W( 40 )
  JVS( 195) = W( 43 )
  JVS( 196) = W( 44 )
  JVS( 197) = W( 45 )
  JVS( 198) = W( 47 )
  JVS( 199) = W( 48 )
  IF ( ABS(  JVS( 208 )) < TINY(a) ) THEN
         IER = 41                                      
         RETURN
  END IF
   W( 26 ) = JVS( 200 )
   W( 27 ) = JVS( 201 )
   W( 31 ) = JVS( 202 )
   W( 32 ) = JVS( 203 )
   W( 34 ) = JVS( 204 )
   W( 36 ) = JVS( 205 )
   W( 37 ) = JVS( 206 )
   W( 38 ) = JVS( 207 )
   W( 41 ) = JVS( 208 )
   W( 42 ) = JVS( 209 )
   W( 43 ) = JVS( 210 )
   W( 44 ) = JVS( 211 )
   W( 45 ) = JVS( 212 )
   W( 46 ) = JVS( 213 )
   W( 47 ) = JVS( 214 )
   W( 48 ) = JVS( 215 )
  a = -W( 26 ) / JVS(           77  )
  W( 26 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 78 )
  W( 44 ) = W( 44 ) + a*JVS( 79 )
  a = -W( 27 ) / JVS(           80  )
  W( 27 ) = -a
  W( 42 ) = W( 42 ) + a*JVS( 81 )
  W( 43 ) = W( 43 ) + a*JVS( 82 )
  W( 46 ) = W( 46 ) + a*JVS( 83 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 37 ) / JVS(          150  )
  W( 37 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 151 )
  W( 44 ) = W( 44 ) + a*JVS( 152 )
  W( 47 ) = W( 47 ) + a*JVS( 153 )
  a = -W( 38 ) / JVS(          162  )
  W( 38 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 163 )
  W( 44 ) = W( 44 ) + a*JVS( 164 )
  W( 47 ) = W( 47 ) + a*JVS( 165 )
  JVS( 200) = W( 26 )
  JVS( 201) = W( 27 )
  JVS( 202) = W( 31 )
  JVS( 203) = W( 32 )
  JVS( 204) = W( 34 )
  JVS( 205) = W( 36 )
  JVS( 206) = W( 37 )
  JVS( 207) = W( 38 )
  JVS( 208) = W( 41 )
  JVS( 209) = W( 42 )
  JVS( 210) = W( 43 )
  JVS( 211) = W( 44 )
  JVS( 212) = W( 45 )
  JVS( 213) = W( 46 )
  JVS( 214) = W( 47 )
  JVS( 215) = W( 48 )
  IF ( ABS(  JVS( 223 )) < TINY(a) ) THEN
         IER = 42                                      
         RETURN
  END IF
   W( 22 ) = JVS( 216 )
   W( 27 ) = JVS( 217 )
   W( 30 ) = JVS( 218 )
   W( 32 ) = JVS( 219 )
   W( 34 ) = JVS( 220 )
   W( 36 ) = JVS( 221 )
   W( 38 ) = JVS( 222 )
   W( 42 ) = JVS( 223 )
   W( 43 ) = JVS( 224 )
   W( 44 ) = JVS( 225 )
   W( 45 ) = JVS( 226 )
   W( 46 ) = JVS( 227 )
   W( 47 ) = JVS( 228 )
   W( 48 ) = JVS( 229 )
  a = -W( 22 ) / JVS(           62  )
  W( 22 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 63 )
  a = -W( 27 ) / JVS(           80  )
  W( 27 ) = -a
  W( 42 ) = W( 42 ) + a*JVS( 81 )
  W( 43 ) = W( 43 ) + a*JVS( 82 )
  W( 46 ) = W( 46 ) + a*JVS( 83 )
  a = -W( 30 ) / JVS(          106  )
  W( 30 ) = -a
  W( 32 ) = W( 32 ) + a*JVS( 107 )
  W( 36 ) = W( 36 ) + a*JVS( 108 )
  W( 43 ) = W( 43 ) + a*JVS( 109 )
  W( 44 ) = W( 44 ) + a*JVS( 110 )
  W( 47 ) = W( 47 ) + a*JVS( 111 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 38 ) / JVS(          162  )
  W( 38 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 163 )
  W( 44 ) = W( 44 ) + a*JVS( 164 )
  W( 47 ) = W( 47 ) + a*JVS( 165 )
  JVS( 216) = W( 22 )
  JVS( 217) = W( 27 )
  JVS( 218) = W( 30 )
  JVS( 219) = W( 32 )
  JVS( 220) = W( 34 )
  JVS( 221) = W( 36 )
  JVS( 222) = W( 38 )
  JVS( 223) = W( 42 )
  JVS( 224) = W( 43 )
  JVS( 225) = W( 44 )
  JVS( 226) = W( 45 )
  JVS( 227) = W( 46 )
  JVS( 228) = W( 47 )
  JVS( 229) = W( 48 )
  IF ( ABS(  JVS( 253 )) < TINY(a) ) THEN
         IER = 43                                      
         RETURN
  END IF
   W( 17 ) = JVS( 230 )
   W( 18 ) = JVS( 231 )
   W( 19 ) = JVS( 232 )
   W( 22 ) = JVS( 233 )
   W( 24 ) = JVS( 234 )
   W( 25 ) = JVS( 235 )
   W( 26 ) = JVS( 236 )
   W( 27 ) = JVS( 237 )
   W( 28 ) = JVS( 238 )
   W( 29 ) = JVS( 239 )
   W( 30 ) = JVS( 240 )
   W( 31 ) = JVS( 241 )
   W( 32 ) = JVS( 242 )
   W( 33 ) = JVS( 243 )
   W( 34 ) = JVS( 244 )
   W( 35 ) = JVS( 245 )
   W( 36 ) = JVS( 246 )
   W( 37 ) = JVS( 247 )
   W( 38 ) = JVS( 248 )
   W( 39 ) = JVS( 249 )
   W( 40 ) = JVS( 250 )
   W( 41 ) = JVS( 251 )
   W( 42 ) = JVS( 252 )
   W( 43 ) = JVS( 253 )
   W( 44 ) = JVS( 254 )
   W( 45 ) = JVS( 255 )
   W( 46 ) = JVS( 256 )
   W( 47 ) = JVS( 257 )
   W( 48 ) = JVS( 258 )
  a = -W( 17 ) / JVS(           45  )
  W( 17 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 46 )
  a = -W( 18 ) / JVS(           47  )
  W( 18 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 48 )
  a = -W( 19 ) / JVS(           49  )
  W( 19 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 50 )
  W( 48 ) = W( 48 ) + a*JVS( 51 )
  a = -W( 22 ) / JVS(           62  )
  W( 22 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 63 )
  a = -W( 24 ) / JVS(           67  )
  W( 24 ) = -a
  W( 39 ) = W( 39 ) + a*JVS( 68 )
  W( 40 ) = W( 40 ) + a*JVS( 69 )
  W( 42 ) = W( 42 ) + a*JVS( 70 )
  W( 43 ) = W( 43 ) + a*JVS( 71 )
  W( 48 ) = W( 48 ) + a*JVS( 72 )
  a = -W( 25 ) / JVS(           73  )
  W( 25 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 74 )
  W( 46 ) = W( 46 ) + a*JVS( 75 )
  W( 48 ) = W( 48 ) + a*JVS( 76 )
  a = -W( 26 ) / JVS(           77  )
  W( 26 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 78 )
  W( 44 ) = W( 44 ) + a*JVS( 79 )
  a = -W( 27 ) / JVS(           80  )
  W( 27 ) = -a
  W( 42 ) = W( 42 ) + a*JVS( 81 )
  W( 43 ) = W( 43 ) + a*JVS( 82 )
  W( 46 ) = W( 46 ) + a*JVS( 83 )
  a = -W( 28 ) / JVS(           85  )
  W( 28 ) = -a
  W( 35 ) = W( 35 ) + a*JVS( 86 )
  W( 38 ) = W( 38 ) + a*JVS( 87 )
  W( 41 ) = W( 41 ) + a*JVS( 88 )
  W( 43 ) = W( 43 ) + a*JVS( 89 )
  W( 46 ) = W( 46 ) + a*JVS( 90 )
  W( 47 ) = W( 47 ) + a*JVS( 91 )
  a = -W( 29 ) / JVS(           94  )
  W( 29 ) = -a
  W( 30 ) = W( 30 ) + a*JVS( 95 )
  W( 31 ) = W( 31 ) + a*JVS( 96 )
  W( 34 ) = W( 34 ) + a*JVS( 97 )
  W( 36 ) = W( 36 ) + a*JVS( 98 )
  W( 37 ) = W( 37 ) + a*JVS( 99 )
  W( 38 ) = W( 38 ) + a*JVS( 100 )
  W( 41 ) = W( 41 ) + a*JVS( 101 )
  W( 43 ) = W( 43 ) + a*JVS( 102 )
  W( 44 ) = W( 44 ) + a*JVS( 103 )
  W( 47 ) = W( 47 ) + a*JVS( 104 )
  a = -W( 30 ) / JVS(          106  )
  W( 30 ) = -a
  W( 32 ) = W( 32 ) + a*JVS( 107 )
  W( 36 ) = W( 36 ) + a*JVS( 108 )
  W( 43 ) = W( 43 ) + a*JVS( 109 )
  W( 44 ) = W( 44 ) + a*JVS( 110 )
  W( 47 ) = W( 47 ) + a*JVS( 111 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 33 ) / JVS(          124  )
  W( 33 ) = -a
  W( 34 ) = W( 34 ) + a*JVS( 125 )
  W( 36 ) = W( 36 ) + a*JVS( 126 )
  W( 37 ) = W( 37 ) + a*JVS( 127 )
  W( 43 ) = W( 43 ) + a*JVS( 128 )
  W( 44 ) = W( 44 ) + a*JVS( 129 )
  W( 47 ) = W( 47 ) + a*JVS( 130 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 35 ) / JVS(          137  )
  W( 35 ) = -a
  W( 36 ) = W( 36 ) + a*JVS( 138 )
  W( 40 ) = W( 40 ) + a*JVS( 139 )
  W( 43 ) = W( 43 ) + a*JVS( 140 )
  W( 44 ) = W( 44 ) + a*JVS( 141 )
  W( 45 ) = W( 45 ) + a*JVS( 142 )
  W( 47 ) = W( 47 ) + a*JVS( 143 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 37 ) / JVS(          150  )
  W( 37 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 151 )
  W( 44 ) = W( 44 ) + a*JVS( 152 )
  W( 47 ) = W( 47 ) + a*JVS( 153 )
  a = -W( 38 ) / JVS(          162  )
  W( 38 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 163 )
  W( 44 ) = W( 44 ) + a*JVS( 164 )
  W( 47 ) = W( 47 ) + a*JVS( 165 )
  a = -W( 39 ) / JVS(          179  )
  W( 39 ) = -a
  W( 40 ) = W( 40 ) + a*JVS( 180 )
  W( 42 ) = W( 42 ) + a*JVS( 181 )
  W( 43 ) = W( 43 ) + a*JVS( 182 )
  W( 44 ) = W( 44 ) + a*JVS( 183 )
  W( 45 ) = W( 45 ) + a*JVS( 184 )
  W( 47 ) = W( 47 ) + a*JVS( 185 )
  W( 48 ) = W( 48 ) + a*JVS( 186 )
  a = -W( 40 ) / JVS(          194  )
  W( 40 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 195 )
  W( 44 ) = W( 44 ) + a*JVS( 196 )
  W( 45 ) = W( 45 ) + a*JVS( 197 )
  W( 47 ) = W( 47 ) + a*JVS( 198 )
  W( 48 ) = W( 48 ) + a*JVS( 199 )
  a = -W( 41 ) / JVS(          208  )
  W( 41 ) = -a
  W( 42 ) = W( 42 ) + a*JVS( 209 )
  W( 43 ) = W( 43 ) + a*JVS( 210 )
  W( 44 ) = W( 44 ) + a*JVS( 211 )
  W( 45 ) = W( 45 ) + a*JVS( 212 )
  W( 46 ) = W( 46 ) + a*JVS( 213 )
  W( 47 ) = W( 47 ) + a*JVS( 214 )
  W( 48 ) = W( 48 ) + a*JVS( 215 )
  a = -W( 42 ) / JVS(          223  )
  W( 42 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 224 )
  W( 44 ) = W( 44 ) + a*JVS( 225 )
  W( 45 ) = W( 45 ) + a*JVS( 226 )
  W( 46 ) = W( 46 ) + a*JVS( 227 )
  W( 47 ) = W( 47 ) + a*JVS( 228 )
  W( 48 ) = W( 48 ) + a*JVS( 229 )
  JVS( 230) = W( 17 )
  JVS( 231) = W( 18 )
  JVS( 232) = W( 19 )
  JVS( 233) = W( 22 )
  JVS( 234) = W( 24 )
  JVS( 235) = W( 25 )
  JVS( 236) = W( 26 )
  JVS( 237) = W( 27 )
  JVS( 238) = W( 28 )
  JVS( 239) = W( 29 )
  JVS( 240) = W( 30 )
  JVS( 241) = W( 31 )
  JVS( 242) = W( 32 )
  JVS( 243) = W( 33 )
  JVS( 244) = W( 34 )
  JVS( 245) = W( 35 )
  JVS( 246) = W( 36 )
  JVS( 247) = W( 37 )
  JVS( 248) = W( 38 )
  JVS( 249) = W( 39 )
  JVS( 250) = W( 40 )
  JVS( 251) = W( 41 )
  JVS( 252) = W( 42 )
  JVS( 253) = W( 43 )
  JVS( 254) = W( 44 )
  JVS( 255) = W( 45 )
  JVS( 256) = W( 46 )
  JVS( 257) = W( 47 )
  JVS( 258) = W( 48 )
  IF ( ABS(  JVS( 266 )) < TINY(a) ) THEN
         IER = 44                                      
         RETURN
  END IF
   W( 26 ) = JVS( 259 )
   W( 31 ) = JVS( 260 )
   W( 32 ) = JVS( 261 )
   W( 34 ) = JVS( 262 )
   W( 36 ) = JVS( 263 )
   W( 37 ) = JVS( 264 )
   W( 43 ) = JVS( 265 )
   W( 44 ) = JVS( 266 )
   W( 45 ) = JVS( 267 )
   W( 46 ) = JVS( 268 )
   W( 47 ) = JVS( 269 )
   W( 48 ) = JVS( 270 )
  a = -W( 26 ) / JVS(           77  )
  W( 26 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 78 )
  W( 44 ) = W( 44 ) + a*JVS( 79 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 37 ) / JVS(          150  )
  W( 37 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 151 )
  W( 44 ) = W( 44 ) + a*JVS( 152 )
  W( 47 ) = W( 47 ) + a*JVS( 153 )
  a = -W( 43 ) / JVS(          253  )
  W( 43 ) = -a
  W( 44 ) = W( 44 ) + a*JVS( 254 )
  W( 45 ) = W( 45 ) + a*JVS( 255 )
  W( 46 ) = W( 46 ) + a*JVS( 256 )
  W( 47 ) = W( 47 ) + a*JVS( 257 )
  W( 48 ) = W( 48 ) + a*JVS( 258 )
  JVS( 259) = W( 26 )
  JVS( 260) = W( 31 )
  JVS( 261) = W( 32 )
  JVS( 262) = W( 34 )
  JVS( 263) = W( 36 )
  JVS( 264) = W( 37 )
  JVS( 265) = W( 43 )
  JVS( 266) = W( 44 )
  JVS( 267) = W( 45 )
  JVS( 268) = W( 46 )
  JVS( 269) = W( 47 )
  JVS( 270) = W( 48 )
  IF ( ABS(  JVS( 276 )) < TINY(a) ) THEN
         IER = 45                                      
         RETURN
  END IF
   W( 39 ) = JVS( 271 )
   W( 40 ) = JVS( 272 )
   W( 42 ) = JVS( 273 )
   W( 43 ) = JVS( 274 )
   W( 44 ) = JVS( 275 )
   W( 45 ) = JVS( 276 )
   W( 46 ) = JVS( 277 )
   W( 47 ) = JVS( 278 )
   W( 48 ) = JVS( 279 )
  a = -W( 39 ) / JVS(          179  )
  W( 39 ) = -a
  W( 40 ) = W( 40 ) + a*JVS( 180 )
  W( 42 ) = W( 42 ) + a*JVS( 181 )
  W( 43 ) = W( 43 ) + a*JVS( 182 )
  W( 44 ) = W( 44 ) + a*JVS( 183 )
  W( 45 ) = W( 45 ) + a*JVS( 184 )
  W( 47 ) = W( 47 ) + a*JVS( 185 )
  W( 48 ) = W( 48 ) + a*JVS( 186 )
  a = -W( 40 ) / JVS(          194  )
  W( 40 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 195 )
  W( 44 ) = W( 44 ) + a*JVS( 196 )
  W( 45 ) = W( 45 ) + a*JVS( 197 )
  W( 47 ) = W( 47 ) + a*JVS( 198 )
  W( 48 ) = W( 48 ) + a*JVS( 199 )
  a = -W( 42 ) / JVS(          223  )
  W( 42 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 224 )
  W( 44 ) = W( 44 ) + a*JVS( 225 )
  W( 45 ) = W( 45 ) + a*JVS( 226 )
  W( 46 ) = W( 46 ) + a*JVS( 227 )
  W( 47 ) = W( 47 ) + a*JVS( 228 )
  W( 48 ) = W( 48 ) + a*JVS( 229 )
  a = -W( 43 ) / JVS(          253  )
  W( 43 ) = -a
  W( 44 ) = W( 44 ) + a*JVS( 254 )
  W( 45 ) = W( 45 ) + a*JVS( 255 )
  W( 46 ) = W( 46 ) + a*JVS( 256 )
  W( 47 ) = W( 47 ) + a*JVS( 257 )
  W( 48 ) = W( 48 ) + a*JVS( 258 )
  a = -W( 44 ) / JVS(          266  )
  W( 44 ) = -a
  W( 45 ) = W( 45 ) + a*JVS( 267 )
  W( 46 ) = W( 46 ) + a*JVS( 268 )
  W( 47 ) = W( 47 ) + a*JVS( 269 )
  W( 48 ) = W( 48 ) + a*JVS( 270 )
  JVS( 271) = W( 39 )
  JVS( 272) = W( 40 )
  JVS( 273) = W( 42 )
  JVS( 274) = W( 43 )
  JVS( 275) = W( 44 )
  JVS( 276) = W( 45 )
  JVS( 277) = W( 46 )
  JVS( 278) = W( 47 )
  JVS( 279) = W( 48 )
  IF ( ABS(  JVS( 296 )) < TINY(a) ) THEN
         IER = 46                                      
         RETURN
  END IF
   W( 21 ) = JVS( 280 )
   W( 25 ) = JVS( 281 )
   W( 27 ) = JVS( 282 )
   W( 28 ) = JVS( 283 )
   W( 34 ) = JVS( 284 )
   W( 35 ) = JVS( 285 )
   W( 36 ) = JVS( 286 )
   W( 37 ) = JVS( 287 )
   W( 38 ) = JVS( 288 )
   W( 39 ) = JVS( 289 )
   W( 40 ) = JVS( 290 )
   W( 41 ) = JVS( 291 )
   W( 42 ) = JVS( 292 )
   W( 43 ) = JVS( 293 )
   W( 44 ) = JVS( 294 )
   W( 45 ) = JVS( 295 )
   W( 46 ) = JVS( 296 )
   W( 47 ) = JVS( 297 )
   W( 48 ) = JVS( 298 )
  a = -W( 21 ) / JVS(           59  )
  W( 21 ) = -a
  W( 46 ) = W( 46 ) + a*JVS( 60 )
  W( 47 ) = W( 47 ) + a*JVS( 61 )
  a = -W( 25 ) / JVS(           73  )
  W( 25 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 74 )
  W( 46 ) = W( 46 ) + a*JVS( 75 )
  W( 48 ) = W( 48 ) + a*JVS( 76 )
  a = -W( 27 ) / JVS(           80  )
  W( 27 ) = -a
  W( 42 ) = W( 42 ) + a*JVS( 81 )
  W( 43 ) = W( 43 ) + a*JVS( 82 )
  W( 46 ) = W( 46 ) + a*JVS( 83 )
  a = -W( 28 ) / JVS(           85  )
  W( 28 ) = -a
  W( 35 ) = W( 35 ) + a*JVS( 86 )
  W( 38 ) = W( 38 ) + a*JVS( 87 )
  W( 41 ) = W( 41 ) + a*JVS( 88 )
  W( 43 ) = W( 43 ) + a*JVS( 89 )
  W( 46 ) = W( 46 ) + a*JVS( 90 )
  W( 47 ) = W( 47 ) + a*JVS( 91 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 35 ) / JVS(          137  )
  W( 35 ) = -a
  W( 36 ) = W( 36 ) + a*JVS( 138 )
  W( 40 ) = W( 40 ) + a*JVS( 139 )
  W( 43 ) = W( 43 ) + a*JVS( 140 )
  W( 44 ) = W( 44 ) + a*JVS( 141 )
  W( 45 ) = W( 45 ) + a*JVS( 142 )
  W( 47 ) = W( 47 ) + a*JVS( 143 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 37 ) / JVS(          150  )
  W( 37 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 151 )
  W( 44 ) = W( 44 ) + a*JVS( 152 )
  W( 47 ) = W( 47 ) + a*JVS( 153 )
  a = -W( 38 ) / JVS(          162  )
  W( 38 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 163 )
  W( 44 ) = W( 44 ) + a*JVS( 164 )
  W( 47 ) = W( 47 ) + a*JVS( 165 )
  a = -W( 39 ) / JVS(          179  )
  W( 39 ) = -a
  W( 40 ) = W( 40 ) + a*JVS( 180 )
  W( 42 ) = W( 42 ) + a*JVS( 181 )
  W( 43 ) = W( 43 ) + a*JVS( 182 )
  W( 44 ) = W( 44 ) + a*JVS( 183 )
  W( 45 ) = W( 45 ) + a*JVS( 184 )
  W( 47 ) = W( 47 ) + a*JVS( 185 )
  W( 48 ) = W( 48 ) + a*JVS( 186 )
  a = -W( 40 ) / JVS(          194  )
  W( 40 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 195 )
  W( 44 ) = W( 44 ) + a*JVS( 196 )
  W( 45 ) = W( 45 ) + a*JVS( 197 )
  W( 47 ) = W( 47 ) + a*JVS( 198 )
  W( 48 ) = W( 48 ) + a*JVS( 199 )
  a = -W( 41 ) / JVS(          208  )
  W( 41 ) = -a
  W( 42 ) = W( 42 ) + a*JVS( 209 )
  W( 43 ) = W( 43 ) + a*JVS( 210 )
  W( 44 ) = W( 44 ) + a*JVS( 211 )
  W( 45 ) = W( 45 ) + a*JVS( 212 )
  W( 46 ) = W( 46 ) + a*JVS( 213 )
  W( 47 ) = W( 47 ) + a*JVS( 214 )
  W( 48 ) = W( 48 ) + a*JVS( 215 )
  a = -W( 42 ) / JVS(          223  )
  W( 42 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 224 )
  W( 44 ) = W( 44 ) + a*JVS( 225 )
  W( 45 ) = W( 45 ) + a*JVS( 226 )
  W( 46 ) = W( 46 ) + a*JVS( 227 )
  W( 47 ) = W( 47 ) + a*JVS( 228 )
  W( 48 ) = W( 48 ) + a*JVS( 229 )
  a = -W( 43 ) / JVS(          253  )
  W( 43 ) = -a
  W( 44 ) = W( 44 ) + a*JVS( 254 )
  W( 45 ) = W( 45 ) + a*JVS( 255 )
  W( 46 ) = W( 46 ) + a*JVS( 256 )
  W( 47 ) = W( 47 ) + a*JVS( 257 )
  W( 48 ) = W( 48 ) + a*JVS( 258 )
  a = -W( 44 ) / JVS(          266  )
  W( 44 ) = -a
  W( 45 ) = W( 45 ) + a*JVS( 267 )
  W( 46 ) = W( 46 ) + a*JVS( 268 )
  W( 47 ) = W( 47 ) + a*JVS( 269 )
  W( 48 ) = W( 48 ) + a*JVS( 270 )
  a = -W( 45 ) / JVS(          276  )
  W( 45 ) = -a
  W( 46 ) = W( 46 ) + a*JVS( 277 )
  W( 47 ) = W( 47 ) + a*JVS( 278 )
  W( 48 ) = W( 48 ) + a*JVS( 279 )
  JVS( 280) = W( 21 )
  JVS( 281) = W( 25 )
  JVS( 282) = W( 27 )
  JVS( 283) = W( 28 )
  JVS( 284) = W( 34 )
  JVS( 285) = W( 35 )
  JVS( 286) = W( 36 )
  JVS( 287) = W( 37 )
  JVS( 288) = W( 38 )
  JVS( 289) = W( 39 )
  JVS( 290) = W( 40 )
  JVS( 291) = W( 41 )
  JVS( 292) = W( 42 )
  JVS( 293) = W( 43 )
  JVS( 294) = W( 44 )
  JVS( 295) = W( 45 )
  JVS( 296) = W( 46 )
  JVS( 297) = W( 47 )
  JVS( 298) = W( 48 )
  IF ( ABS(  JVS( 317 )) < TINY(a) ) THEN
         IER = 47                                      
         RETURN
  END IF
   W( 21 ) = JVS( 299 )
   W( 25 ) = JVS( 300 )
   W( 27 ) = JVS( 301 )
   W( 28 ) = JVS( 302 )
   W( 31 ) = JVS( 303 )
   W( 32 ) = JVS( 304 )
   W( 34 ) = JVS( 305 )
   W( 35 ) = JVS( 306 )
   W( 36 ) = JVS( 307 )
   W( 37 ) = JVS( 308 )
   W( 38 ) = JVS( 309 )
   W( 40 ) = JVS( 310 )
   W( 41 ) = JVS( 311 )
   W( 42 ) = JVS( 312 )
   W( 43 ) = JVS( 313 )
   W( 44 ) = JVS( 314 )
   W( 45 ) = JVS( 315 )
   W( 46 ) = JVS( 316 )
   W( 47 ) = JVS( 317 )
   W( 48 ) = JVS( 318 )
  a = -W( 21 ) / JVS(           59  )
  W( 21 ) = -a
  W( 46 ) = W( 46 ) + a*JVS( 60 )
  W( 47 ) = W( 47 ) + a*JVS( 61 )
  a = -W( 25 ) / JVS(           73  )
  W( 25 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 74 )
  W( 46 ) = W( 46 ) + a*JVS( 75 )
  W( 48 ) = W( 48 ) + a*JVS( 76 )
  a = -W( 27 ) / JVS(           80  )
  W( 27 ) = -a
  W( 42 ) = W( 42 ) + a*JVS( 81 )
  W( 43 ) = W( 43 ) + a*JVS( 82 )
  W( 46 ) = W( 46 ) + a*JVS( 83 )
  a = -W( 28 ) / JVS(           85  )
  W( 28 ) = -a
  W( 35 ) = W( 35 ) + a*JVS( 86 )
  W( 38 ) = W( 38 ) + a*JVS( 87 )
  W( 41 ) = W( 41 ) + a*JVS( 88 )
  W( 43 ) = W( 43 ) + a*JVS( 89 )
  W( 46 ) = W( 46 ) + a*JVS( 90 )
  W( 47 ) = W( 47 ) + a*JVS( 91 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 35 ) / JVS(          137  )
  W( 35 ) = -a
  W( 36 ) = W( 36 ) + a*JVS( 138 )
  W( 40 ) = W( 40 ) + a*JVS( 139 )
  W( 43 ) = W( 43 ) + a*JVS( 140 )
  W( 44 ) = W( 44 ) + a*JVS( 141 )
  W( 45 ) = W( 45 ) + a*JVS( 142 )
  W( 47 ) = W( 47 ) + a*JVS( 143 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 37 ) / JVS(          150  )
  W( 37 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 151 )
  W( 44 ) = W( 44 ) + a*JVS( 152 )
  W( 47 ) = W( 47 ) + a*JVS( 153 )
  a = -W( 38 ) / JVS(          162  )
  W( 38 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 163 )
  W( 44 ) = W( 44 ) + a*JVS( 164 )
  W( 47 ) = W( 47 ) + a*JVS( 165 )
  a = -W( 40 ) / JVS(          194  )
  W( 40 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 195 )
  W( 44 ) = W( 44 ) + a*JVS( 196 )
  W( 45 ) = W( 45 ) + a*JVS( 197 )
  W( 47 ) = W( 47 ) + a*JVS( 198 )
  W( 48 ) = W( 48 ) + a*JVS( 199 )
  a = -W( 41 ) / JVS(          208  )
  W( 41 ) = -a
  W( 42 ) = W( 42 ) + a*JVS( 209 )
  W( 43 ) = W( 43 ) + a*JVS( 210 )
  W( 44 ) = W( 44 ) + a*JVS( 211 )
  W( 45 ) = W( 45 ) + a*JVS( 212 )
  W( 46 ) = W( 46 ) + a*JVS( 213 )
  W( 47 ) = W( 47 ) + a*JVS( 214 )
  W( 48 ) = W( 48 ) + a*JVS( 215 )
  a = -W( 42 ) / JVS(          223  )
  W( 42 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 224 )
  W( 44 ) = W( 44 ) + a*JVS( 225 )
  W( 45 ) = W( 45 ) + a*JVS( 226 )
  W( 46 ) = W( 46 ) + a*JVS( 227 )
  W( 47 ) = W( 47 ) + a*JVS( 228 )
  W( 48 ) = W( 48 ) + a*JVS( 229 )
  a = -W( 43 ) / JVS(          253  )
  W( 43 ) = -a
  W( 44 ) = W( 44 ) + a*JVS( 254 )
  W( 45 ) = W( 45 ) + a*JVS( 255 )
  W( 46 ) = W( 46 ) + a*JVS( 256 )
  W( 47 ) = W( 47 ) + a*JVS( 257 )
  W( 48 ) = W( 48 ) + a*JVS( 258 )
  a = -W( 44 ) / JVS(          266  )
  W( 44 ) = -a
  W( 45 ) = W( 45 ) + a*JVS( 267 )
  W( 46 ) = W( 46 ) + a*JVS( 268 )
  W( 47 ) = W( 47 ) + a*JVS( 269 )
  W( 48 ) = W( 48 ) + a*JVS( 270 )
  a = -W( 45 ) / JVS(          276  )
  W( 45 ) = -a
  W( 46 ) = W( 46 ) + a*JVS( 277 )
  W( 47 ) = W( 47 ) + a*JVS( 278 )
  W( 48 ) = W( 48 ) + a*JVS( 279 )
  a = -W( 46 ) / JVS(          296  )
  W( 46 ) = -a
  W( 47 ) = W( 47 ) + a*JVS( 297 )
  W( 48 ) = W( 48 ) + a*JVS( 298 )
  JVS( 299) = W( 21 )
  JVS( 300) = W( 25 )
  JVS( 301) = W( 27 )
  JVS( 302) = W( 28 )
  JVS( 303) = W( 31 )
  JVS( 304) = W( 32 )
  JVS( 305) = W( 34 )
  JVS( 306) = W( 35 )
  JVS( 307) = W( 36 )
  JVS( 308) = W( 37 )
  JVS( 309) = W( 38 )
  JVS( 310) = W( 40 )
  JVS( 311) = W( 41 )
  JVS( 312) = W( 42 )
  JVS( 313) = W( 43 )
  JVS( 314) = W( 44 )
  JVS( 315) = W( 45 )
  JVS( 316) = W( 46 )
  JVS( 317) = W( 47 )
  JVS( 318) = W( 48 )
  IF ( ABS(  JVS( 343 )) < TINY(a) ) THEN
         IER = 48                                      
         RETURN
  END IF
   W( 19 ) = JVS( 319 )
   W( 22 ) = JVS( 320 )
   W( 23 ) = JVS( 321 )
   W( 25 ) = JVS( 322 )
   W( 26 ) = JVS( 323 )
   W( 29 ) = JVS( 324 )
   W( 30 ) = JVS( 325 )
   W( 31 ) = JVS( 326 )
   W( 32 ) = JVS( 327 )
   W( 33 ) = JVS( 328 )
   W( 34 ) = JVS( 329 )
   W( 35 ) = JVS( 330 )
   W( 36 ) = JVS( 331 )
   W( 37 ) = JVS( 332 )
   W( 38 ) = JVS( 333 )
   W( 39 ) = JVS( 334 )
   W( 40 ) = JVS( 335 )
   W( 41 ) = JVS( 336 )
   W( 42 ) = JVS( 337 )
   W( 43 ) = JVS( 338 )
   W( 44 ) = JVS( 339 )
   W( 45 ) = JVS( 340 )
   W( 46 ) = JVS( 341 )
   W( 47 ) = JVS( 342 )
   W( 48 ) = JVS( 343 )
  a = -W( 19 ) / JVS(           49  )
  W( 19 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 50 )
  W( 48 ) = W( 48 ) + a*JVS( 51 )
  a = -W( 22 ) / JVS(           62  )
  W( 22 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 63 )
  a = -W( 23 ) / JVS(           64  )
  W( 23 ) = -a
  W( 33 ) = W( 33 ) + a*JVS( 65 )
  W( 43 ) = W( 43 ) + a*JVS( 66 )
  a = -W( 25 ) / JVS(           73  )
  W( 25 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 74 )
  W( 46 ) = W( 46 ) + a*JVS( 75 )
  W( 48 ) = W( 48 ) + a*JVS( 76 )
  a = -W( 26 ) / JVS(           77  )
  W( 26 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 78 )
  W( 44 ) = W( 44 ) + a*JVS( 79 )
  a = -W( 29 ) / JVS(           94  )
  W( 29 ) = -a
  W( 30 ) = W( 30 ) + a*JVS( 95 )
  W( 31 ) = W( 31 ) + a*JVS( 96 )
  W( 34 ) = W( 34 ) + a*JVS( 97 )
  W( 36 ) = W( 36 ) + a*JVS( 98 )
  W( 37 ) = W( 37 ) + a*JVS( 99 )
  W( 38 ) = W( 38 ) + a*JVS( 100 )
  W( 41 ) = W( 41 ) + a*JVS( 101 )
  W( 43 ) = W( 43 ) + a*JVS( 102 )
  W( 44 ) = W( 44 ) + a*JVS( 103 )
  W( 47 ) = W( 47 ) + a*JVS( 104 )
  a = -W( 30 ) / JVS(          106  )
  W( 30 ) = -a
  W( 32 ) = W( 32 ) + a*JVS( 107 )
  W( 36 ) = W( 36 ) + a*JVS( 108 )
  W( 43 ) = W( 43 ) + a*JVS( 109 )
  W( 44 ) = W( 44 ) + a*JVS( 110 )
  W( 47 ) = W( 47 ) + a*JVS( 111 )
  a = -W( 31 ) / JVS(          112  )
  W( 31 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 113 )
  W( 44 ) = W( 44 ) + a*JVS( 114 )
  W( 47 ) = W( 47 ) + a*JVS( 115 )
  a = -W( 32 ) / JVS(          116  )
  W( 32 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 117 )
  W( 44 ) = W( 44 ) + a*JVS( 118 )
  W( 47 ) = W( 47 ) + a*JVS( 119 )
  a = -W( 33 ) / JVS(          124  )
  W( 33 ) = -a
  W( 34 ) = W( 34 ) + a*JVS( 125 )
  W( 36 ) = W( 36 ) + a*JVS( 126 )
  W( 37 ) = W( 37 ) + a*JVS( 127 )
  W( 43 ) = W( 43 ) + a*JVS( 128 )
  W( 44 ) = W( 44 ) + a*JVS( 129 )
  W( 47 ) = W( 47 ) + a*JVS( 130 )
  a = -W( 34 ) / JVS(          131  )
  W( 34 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 132 )
  W( 44 ) = W( 44 ) + a*JVS( 133 )
  W( 47 ) = W( 47 ) + a*JVS( 134 )
  a = -W( 35 ) / JVS(          137  )
  W( 35 ) = -a
  W( 36 ) = W( 36 ) + a*JVS( 138 )
  W( 40 ) = W( 40 ) + a*JVS( 139 )
  W( 43 ) = W( 43 ) + a*JVS( 140 )
  W( 44 ) = W( 44 ) + a*JVS( 141 )
  W( 45 ) = W( 45 ) + a*JVS( 142 )
  W( 47 ) = W( 47 ) + a*JVS( 143 )
  a = -W( 36 ) / JVS(          144  )
  W( 36 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 145 )
  W( 44 ) = W( 44 ) + a*JVS( 146 )
  W( 47 ) = W( 47 ) + a*JVS( 147 )
  a = -W( 37 ) / JVS(          150  )
  W( 37 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 151 )
  W( 44 ) = W( 44 ) + a*JVS( 152 )
  W( 47 ) = W( 47 ) + a*JVS( 153 )
  a = -W( 38 ) / JVS(          162  )
  W( 38 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 163 )
  W( 44 ) = W( 44 ) + a*JVS( 164 )
  W( 47 ) = W( 47 ) + a*JVS( 165 )
  a = -W( 39 ) / JVS(          179  )
  W( 39 ) = -a
  W( 40 ) = W( 40 ) + a*JVS( 180 )
  W( 42 ) = W( 42 ) + a*JVS( 181 )
  W( 43 ) = W( 43 ) + a*JVS( 182 )
  W( 44 ) = W( 44 ) + a*JVS( 183 )
  W( 45 ) = W( 45 ) + a*JVS( 184 )
  W( 47 ) = W( 47 ) + a*JVS( 185 )
  W( 48 ) = W( 48 ) + a*JVS( 186 )
  a = -W( 40 ) / JVS(          194  )
  W( 40 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 195 )
  W( 44 ) = W( 44 ) + a*JVS( 196 )
  W( 45 ) = W( 45 ) + a*JVS( 197 )
  W( 47 ) = W( 47 ) + a*JVS( 198 )
  W( 48 ) = W( 48 ) + a*JVS( 199 )
  a = -W( 41 ) / JVS(          208  )
  W( 41 ) = -a
  W( 42 ) = W( 42 ) + a*JVS( 209 )
  W( 43 ) = W( 43 ) + a*JVS( 210 )
  W( 44 ) = W( 44 ) + a*JVS( 211 )
  W( 45 ) = W( 45 ) + a*JVS( 212 )
  W( 46 ) = W( 46 ) + a*JVS( 213 )
  W( 47 ) = W( 47 ) + a*JVS( 214 )
  W( 48 ) = W( 48 ) + a*JVS( 215 )
  a = -W( 42 ) / JVS(          223  )
  W( 42 ) = -a
  W( 43 ) = W( 43 ) + a*JVS( 224 )
  W( 44 ) = W( 44 ) + a*JVS( 225 )
  W( 45 ) = W( 45 ) + a*JVS( 226 )
  W( 46 ) = W( 46 ) + a*JVS( 227 )
  W( 47 ) = W( 47 ) + a*JVS( 228 )
  W( 48 ) = W( 48 ) + a*JVS( 229 )
  a = -W( 43 ) / JVS(          253  )
  W( 43 ) = -a
  W( 44 ) = W( 44 ) + a*JVS( 254 )
  W( 45 ) = W( 45 ) + a*JVS( 255 )
  W( 46 ) = W( 46 ) + a*JVS( 256 )
  W( 47 ) = W( 47 ) + a*JVS( 257 )
  W( 48 ) = W( 48 ) + a*JVS( 258 )
  a = -W( 44 ) / JVS(          266  )
  W( 44 ) = -a
  W( 45 ) = W( 45 ) + a*JVS( 267 )
  W( 46 ) = W( 46 ) + a*JVS( 268 )
  W( 47 ) = W( 47 ) + a*JVS( 269 )
  W( 48 ) = W( 48 ) + a*JVS( 270 )
  a = -W( 45 ) / JVS(          276  )
  W( 45 ) = -a
  W( 46 ) = W( 46 ) + a*JVS( 277 )
  W( 47 ) = W( 47 ) + a*JVS( 278 )
  W( 48 ) = W( 48 ) + a*JVS( 279 )
  a = -W( 46 ) / JVS(          296  )
  W( 46 ) = -a
  W( 47 ) = W( 47 ) + a*JVS( 297 )
  W( 48 ) = W( 48 ) + a*JVS( 298 )
  a = -W( 47 ) / JVS(          317  )
  W( 47 ) = -a
  W( 48 ) = W( 48 ) + a*JVS( 318 )
  JVS( 319) = W( 19 )
  JVS( 320) = W( 22 )
  JVS( 321) = W( 23 )
  JVS( 322) = W( 25 )
  JVS( 323) = W( 26 )
  JVS( 324) = W( 29 )
  JVS( 325) = W( 30 )
  JVS( 326) = W( 31 )
  JVS( 327) = W( 32 )
  JVS( 328) = W( 33 )
  JVS( 329) = W( 34 )
  JVS( 330) = W( 35 )
  JVS( 331) = W( 36 )
  JVS( 332) = W( 37 )
  JVS( 333) = W( 38 )
  JVS( 334) = W( 39 )
  JVS( 335) = W( 40 )
  JVS( 336) = W( 41 )
  JVS( 337) = W( 42 )
  JVS( 338) = W( 43 )
  JVS( 339) = W( 44 )
  JVS( 340) = W( 45 )
  JVS( 341) = W( 46 )
  JVS( 342) = W( 47 )
  JVS( 343) = W( 48 )
   
   END SUBROUTINE decomp_redhc_made_soa_vbs_aq
 


END MODULE redhc_made_soa_vbs_aq_Integrator
